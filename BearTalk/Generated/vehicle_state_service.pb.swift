// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vehicle_state_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Mobilegateway_Protos_AccessLevel: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case predeliveryOwner // = 1
  case primaryOwner // = 2
  case secondaryOwner // = 3
  case deliveryTeam // = 4
  case serviceTeam // = 5
  case customerSupportTeam // = 6
  case readOnly // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .predeliveryOwner
    case 2: self = .primaryOwner
    case 3: self = .secondaryOwner
    case 4: self = .deliveryTeam
    case 5: self = .serviceTeam
    case 6: self = .customerSupportTeam
    case 7: self = .readOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .predeliveryOwner: return 1
    case .primaryOwner: return 2
    case .secondaryOwner: return 3
    case .deliveryTeam: return 4
    case .serviceTeam: return 5
    case .customerSupportTeam: return 6
    case .readOnly: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AccessLevel] = [
    .unknown,
    .predeliveryOwner,
    .primaryOwner,
    .secondaryOwner,
    .deliveryTeam,
    .serviceTeam,
    .customerSupportTeam,
    .readOnly,
  ]

}

public enum Mobilegateway_Protos_Model: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case air // = 1
  case gravity // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .air
    case 2: self = .gravity
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .air: return 1
    case .gravity: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_Model] = [
    .unknown,
    .air,
    .gravity,
  ]

}

public enum Mobilegateway_Protos_ModelVariant: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case dreamEdition // = 1
  case grandTouring // = 2
  case touring // = 3
  case pure // = 4
  case sapphire // = 5
  case hyper // = 6
  case executive // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .dreamEdition
    case 2: self = .grandTouring
    case 3: self = .touring
    case 4: self = .pure
    case 5: self = .sapphire
    case 6: self = .hyper
    case 7: self = .executive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .dreamEdition: return 1
    case .grandTouring: return 2
    case .touring: return 3
    case .pure: return 4
    case .sapphire: return 5
    case .hyper: return 6
    case .executive: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ModelVariant] = [
    .unknown,
    .dreamEdition,
    .grandTouring,
    .touring,
    .pure,
    .sapphire,
    .hyper,
    .executive,
  ]

}

public enum Mobilegateway_Protos_PaintColor: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case eurekaGold // = 1
  case stellarWhite // = 2
  case infiniteBlack // = 3
  case cosmosSilver // = 4
  case quantumGrey // = 5
  case zenithRed // = 6
  case fathomBlue // = 7
  case custom // = 8
  case sapphireBlue // = 9
  case lunarTitanium // = 10
  case auroraGreen // = 11
  case supernovaBronze // = 12
  case glossBlackPrimary // = 13
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .eurekaGold
    case 2: self = .stellarWhite
    case 3: self = .infiniteBlack
    case 4: self = .cosmosSilver
    case 5: self = .quantumGrey
    case 6: self = .zenithRed
    case 7: self = .fathomBlue
    case 8: self = .custom
    case 9: self = .sapphireBlue
    case 10: self = .lunarTitanium
    case 11: self = .auroraGreen
    case 12: self = .supernovaBronze
    case 13: self = .glossBlackPrimary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .eurekaGold: return 1
    case .stellarWhite: return 2
    case .infiniteBlack: return 3
    case .cosmosSilver: return 4
    case .quantumGrey: return 5
    case .zenithRed: return 6
    case .fathomBlue: return 7
    case .custom: return 8
    case .sapphireBlue: return 9
    case .lunarTitanium: return 10
    case .auroraGreen: return 11
    case .supernovaBronze: return 12
    case .glossBlackPrimary: return 13
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PaintColor] = [
    .unknown,
    .eurekaGold,
    .stellarWhite,
    .infiniteBlack,
    .cosmosSilver,
    .quantumGrey,
    .zenithRed,
    .fathomBlue,
    .custom,
    .sapphireBlue,
    .lunarTitanium,
    .auroraGreen,
    .supernovaBronze,
    .glossBlackPrimary,
  ]

}

public enum Mobilegateway_Protos_Look: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case platinum // = 1
  case stealth // = 2
  case sapphire // = 3
  case surfrider // = 4
  case base // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .platinum
    case 2: self = .stealth
    case 3: self = .sapphire
    case 4: self = .surfrider
    case 5: self = .base
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .platinum: return 1
    case .stealth: return 2
    case .sapphire: return 3
    case .surfrider: return 4
    case .base: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_Look] = [
    .unknown,
    .platinum,
    .stealth,
    .sapphire,
    .surfrider,
    .base,
  ]

}

public enum Mobilegateway_Protos_Wheels: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case dream // = 1
  case blade // = 2
  case lite // = 3
  case range // = 4
  case sport // = 5
  case sportStealth // = 6
  case bladeGraphite // = 7
  case liteStealth // = 8
  case sportLuster // = 9
  case sapphirePackage // = 10
  case rangeStealth // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .dream
    case 2: self = .blade
    case 3: self = .lite
    case 4: self = .range
    case 5: self = .sport
    case 6: self = .sportStealth
    case 7: self = .bladeGraphite
    case 8: self = .liteStealth
    case 9: self = .sportLuster
    case 10: self = .sapphirePackage
    case 11: self = .rangeStealth
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .dream: return 1
    case .blade: return 2
    case .lite: return 3
    case .range: return 4
    case .sport: return 5
    case .sportStealth: return 6
    case .bladeGraphite: return 7
    case .liteStealth: return 8
    case .sportLuster: return 9
    case .sapphirePackage: return 10
    case .rangeStealth: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_Wheels] = [
    .unknown,
    .dream,
    .blade,
    .lite,
    .range,
    .sport,
    .sportStealth,
    .bladeGraphite,
    .liteStealth,
    .sportLuster,
    .sapphirePackage,
    .rangeStealth,
  ]

}

public enum Mobilegateway_Protos_SubscriptionStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case current // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .current
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .current: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SubscriptionStatus] = [
    .unknown,
    .current,
  ]

}

public enum Mobilegateway_Protos_ChargingAccountStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case disabled // = 1
  case enrolled // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .disabled
    case 2: self = .enrolled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .disabled: return 1
    case .enrolled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ChargingAccountStatus] = [
    .unknown,
    .disabled,
    .enrolled,
  ]

}

public enum Mobilegateway_Protos_ChargingVendor: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case electrifyAmerica // = 1
  case bosch // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .electrifyAmerica
    case 3: self = .bosch
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .electrifyAmerica: return 1
    case .bosch: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ChargingVendor] = [
    .unknown,
    .electrifyAmerica,
    .bosch,
  ]

}

public enum Mobilegateway_Protos_Edition: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case performance // = 1
  case range // = 2
  case standard // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .performance
    case 2: self = .range
    case 3: self = .standard
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .performance: return 1
    case .range: return 2
    case .standard: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_Edition] = [
    .unknown,
    .performance,
    .range,
    .standard,
  ]

}

public enum Mobilegateway_Protos_BatteryType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case batteryType01 // = 1
  case batteryType02 // = 2
  case batteryType03 // = 3
  case batteryType04 // = 4
  case batteryType05 // = 5
  case batteryType06 // = 6
  case batteryType07 // = 7
  case batteryType08 // = 8
  case batteryType09 // = 9
  case batteryType25 // = 25
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .batteryType01
    case 2: self = .batteryType02
    case 3: self = .batteryType03
    case 4: self = .batteryType04
    case 5: self = .batteryType05
    case 6: self = .batteryType06
    case 7: self = .batteryType07
    case 8: self = .batteryType08
    case 9: self = .batteryType09
    case 25: self = .batteryType25
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .batteryType01: return 1
    case .batteryType02: return 2
    case .batteryType03: return 3
    case .batteryType04: return 4
    case .batteryType05: return 5
    case .batteryType06: return 6
    case .batteryType07: return 7
    case .batteryType08: return 8
    case .batteryType09: return 9
    case .batteryType25: return 25
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_BatteryType] = [
    .unknown,
    .batteryType01,
    .batteryType02,
    .batteryType03,
    .batteryType04,
    .batteryType05,
    .batteryType06,
    .batteryType07,
    .batteryType08,
    .batteryType09,
    .batteryType25,
  ]

}

public enum Mobilegateway_Protos_Interior: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case santaCruz // = 1
  case tahoe // = 2
  case mojave // = 3
  case santaMonica // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .santaCruz
    case 2: self = .tahoe
    case 3: self = .mojave
    case 5: self = .santaMonica
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .santaCruz: return 1
    case .tahoe: return 2
    case .mojave: return 3
    case .santaMonica: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_Interior] = [
    .unknown,
    .santaCruz,
    .tahoe,
    .mojave,
    .santaMonica,
  ]

}

public enum Mobilegateway_Protos_StrutType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case gas // = 1
  case power // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .gas
    case 2: self = .power
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .gas: return 1
    case .power: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_StrutType] = [
    .unknown,
    .gas,
    .power,
  ]

}

public enum Mobilegateway_Protos_RoofType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case glassCanopy // = 1
  case metal // = 2
  case carbonFiber // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .glassCanopy
    case 2: self = .metal
    case 3: self = .carbonFiber
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .glassCanopy: return 1
    case .metal: return 2
    case .carbonFiber: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_RoofType] = [
    .unknown,
    .glassCanopy,
    .metal,
    .carbonFiber,
  ]

}

public enum Mobilegateway_Protos_FrontSeatsVentilationAvailability: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case frontSeatsVentilationUnknown // = 0
  case frontSeatsVentilationUnavailable // = 1
  case frontSeatsVentilationAvailable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .frontSeatsVentilationUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .frontSeatsVentilationUnknown
    case 1: self = .frontSeatsVentilationUnavailable
    case 2: self = .frontSeatsVentilationAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .frontSeatsVentilationUnknown: return 0
    case .frontSeatsVentilationUnavailable: return 1
    case .frontSeatsVentilationAvailable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_FrontSeatsVentilationAvailability] = [
    .frontSeatsVentilationUnknown,
    .frontSeatsVentilationUnavailable,
    .frontSeatsVentilationAvailable,
  ]

}

public enum Mobilegateway_Protos_FrontSeatsHeatingAvailability: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case frontSeatsHeatingUnknown // = 0
  case frontSeatsHeatingUnavailable // = 1
  case frontSeatsHeatingAvailable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .frontSeatsHeatingUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .frontSeatsHeatingUnknown
    case 1: self = .frontSeatsHeatingUnavailable
    case 2: self = .frontSeatsHeatingAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .frontSeatsHeatingUnknown: return 0
    case .frontSeatsHeatingUnavailable: return 1
    case .frontSeatsHeatingAvailable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_FrontSeatsHeatingAvailability] = [
    .frontSeatsHeatingUnknown,
    .frontSeatsHeatingUnavailable,
    .frontSeatsHeatingAvailable,
  ]

}

public enum Mobilegateway_Protos_SecondRowHeatedSeatsAvailability: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case secondRowHeatedSeatsUnknown // = 0
  case secondRowHeatedSeatsUnavailable // = 1
  case secondRowHeatedSeatsAvailable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .secondRowHeatedSeatsUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .secondRowHeatedSeatsUnknown
    case 1: self = .secondRowHeatedSeatsUnavailable
    case 2: self = .secondRowHeatedSeatsAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .secondRowHeatedSeatsUnknown: return 0
    case .secondRowHeatedSeatsUnavailable: return 1
    case .secondRowHeatedSeatsAvailable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SecondRowHeatedSeatsAvailability] = [
    .secondRowHeatedSeatsUnknown,
    .secondRowHeatedSeatsUnavailable,
    .secondRowHeatedSeatsAvailable,
  ]

}

public enum Mobilegateway_Protos_HeatedSteeringWheelAvailability: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case heatedSteeringWheelUnknown // = 0
  case heatedSteeringWheelUnavailable // = 1
  case heatedSteeringWheelAvailable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .heatedSteeringWheelUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .heatedSteeringWheelUnknown
    case 1: self = .heatedSteeringWheelUnavailable
    case 2: self = .heatedSteeringWheelAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .heatedSteeringWheelUnknown: return 0
    case .heatedSteeringWheelUnavailable: return 1
    case .heatedSteeringWheelAvailable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_HeatedSteeringWheelAvailability] = [
    .heatedSteeringWheelUnknown,
    .heatedSteeringWheelUnavailable,
    .heatedSteeringWheelAvailable,
  ]

}

public enum Mobilegateway_Protos_RearSeatConfig: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case rearSeatConfig5Seat // = 1
  case rearSeatConfig6Seat // = 2
  case rearSeatConfig7Seat // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .rearSeatConfig5Seat
    case 2: self = .rearSeatConfig6Seat
    case 3: self = .rearSeatConfig7Seat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .rearSeatConfig5Seat: return 1
    case .rearSeatConfig6Seat: return 2
    case .rearSeatConfig7Seat: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_RearSeatConfig] = [
    .unknown,
    .rearSeatConfig5Seat,
    .rearSeatConfig6Seat,
    .rearSeatConfig7Seat,
  ]

}

public enum Mobilegateway_Protos_WarningState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case warningUnknown // = 0
  case warningOff // = 1
  case warningOn // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .warningUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .warningUnknown
    case 1: self = .warningOff
    case 2: self = .warningOn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .warningUnknown: return 0
    case .warningOff: return 1
    case .warningOn: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WarningState] = [
    .warningUnknown,
    .warningOff,
    .warningOn,
  ]

}

public enum Mobilegateway_Protos_BatteryPreconStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case batteryPreconUnknown // = 0
  case batteryPreconOff // = 1
  case batteryPreconOn // = 2
  case batteryPreconUnavailable // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .batteryPreconUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .batteryPreconUnknown
    case 1: self = .batteryPreconOff
    case 2: self = .batteryPreconOn
    case 3: self = .batteryPreconUnavailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .batteryPreconUnknown: return 0
    case .batteryPreconOff: return 1
    case .batteryPreconOn: return 2
    case .batteryPreconUnavailable: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_BatteryPreconStatus] = [
    .batteryPreconUnknown,
    .batteryPreconOff,
    .batteryPreconOn,
    .batteryPreconUnavailable,
  ]

}

public enum Mobilegateway_Protos_BatteryCellType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case lgM48 // = 1
  case sdi50G // = 2
  case pana2170M // = 3
  case sdi50Gv2 // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .lgM48
    case 2: self = .sdi50G
    case 3: self = .pana2170M
    case 4: self = .sdi50Gv2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .lgM48: return 1
    case .sdi50G: return 2
    case .pana2170M: return 3
    case .sdi50Gv2: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_BatteryCellType] = [
    .unknown,
    .lgM48,
    .sdi50G,
    .pana2170M,
    .sdi50Gv2,
  ]

}

public enum Mobilegateway_Protos_BatteryPackType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case air22 // = 1
  case air18 // = 2
  case air16 // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .air22
    case 2: self = .air18
    case 3: self = .air16
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .air22: return 1
    case .air18: return 2
    case .air16: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_BatteryPackType] = [
    .unknown,
    .air22,
    .air18,
    .air16,
  ]

}

public enum Mobilegateway_Protos_PowerState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case sleep // = 1
  case wink // = 2
  case accessory // = 3
  case drive // = 4
  case liveCharge // = 5
  case sleepCharge // = 6
  case liveUpdate // = 7
  case cloud2 // = 10
  case monitor // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .sleep
    case 2: self = .wink
    case 3: self = .accessory
    case 4: self = .drive
    case 5: self = .liveCharge
    case 6: self = .sleepCharge
    case 7: self = .liveUpdate
    case 10: self = .cloud2
    case 11: self = .monitor
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .sleep: return 1
    case .wink: return 2
    case .accessory: return 3
    case .drive: return 4
    case .liveCharge: return 5
    case .sleepCharge: return 6
    case .liveUpdate: return 7
    case .cloud2: return 10
    case .monitor: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PowerState] = [
    .unknown,
    .sleep,
    .wink,
    .accessory,
    .drive,
    .liveCharge,
    .sleepCharge,
    .liveUpdate,
    .cloud2,
    .monitor,
  ]

}

public enum Mobilegateway_Protos_LockState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case unlocked // = 1
  case locked // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .unlocked
    case 2: self = .locked
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .unlocked: return 1
    case .locked: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LockState] = [
    .unknown,
    .unlocked,
    .locked,
  ]

}

public enum Mobilegateway_Protos_DoorState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case `open` // = 1
  case closed // = 2
  case ajar // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .open
    case 2: self = .closed
    case 3: self = .ajar
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .open: return 1
    case .closed: return 2
    case .ajar: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_DoorState] = [
    .unknown,
    .open,
    .closed,
    .ajar,
  ]

}

public enum Mobilegateway_Protos_WalkawayState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case walkawayUnknown // = 0
  case walkawayActive // = 2
  case walkawayDisable // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .walkawayUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .walkawayUnknown
    case 2: self = .walkawayActive
    case 3: self = .walkawayDisable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .walkawayUnknown: return 0
    case .walkawayActive: return 2
    case .walkawayDisable: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WalkawayState] = [
    .walkawayUnknown,
    .walkawayActive,
    .walkawayDisable,
  ]

}

public enum Mobilegateway_Protos_AccessRequest: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case active // = 1
  case passive // = 2
  case passiveDriver // = 3
  case passiveTempDisabled // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .active
    case 2: self = .passive
    case 3: self = .passiveDriver
    case 4: self = .passiveTempDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .active: return 1
    case .passive: return 2
    case .passiveDriver: return 3
    case .passiveTempDisabled: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AccessRequest] = [
    .unknown,
    .active,
    .passive,
    .passiveDriver,
    .passiveTempDisabled,
  ]

}

public enum Mobilegateway_Protos_KeyfobBatteryStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case low // = 1
  case sufficient // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .low
    case 2: self = .sufficient
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .low: return 1
    case .sufficient: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_KeyfobBatteryStatus] = [
    .unknown,
    .low,
    .sufficient,
  ]

}

public enum Mobilegateway_Protos_AllWindowPosition: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case `open` // = 2
  case closed // = 3
  case error // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .open
    case 3: self = .closed
    case 4: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .open: return 2
    case .closed: return 3
    case .error: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AllWindowPosition] = [
    .unknown,
    .idle,
    .open,
    .closed,
    .error,
  ]

}

public enum Mobilegateway_Protos_WindowPositionStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case fullyClosed // = 1
  case aboveShortDropPosition // = 2
  case shortDropPosition // = 3
  case belowShortDropPosition // = 4
  case fullyOpen // = 5
  case unknownDeInitialized // = 6
  case atpReversePosition // = 7
  case hardStopUp // = 9
  case hardStopDown // = 10
  case longDropPosition // = 11
  case ventDropPosition // = 12
  case betweenFullyClosedAndShortDropDown // = 13
  case betweenShortDropDownAndFullyOpen // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .fullyClosed
    case 2: self = .aboveShortDropPosition
    case 3: self = .shortDropPosition
    case 4: self = .belowShortDropPosition
    case 5: self = .fullyOpen
    case 6: self = .unknownDeInitialized
    case 7: self = .atpReversePosition
    case 9: self = .hardStopUp
    case 10: self = .hardStopDown
    case 11: self = .longDropPosition
    case 12: self = .ventDropPosition
    case 13: self = .betweenFullyClosedAndShortDropDown
    case 14: self = .betweenShortDropDownAndFullyOpen
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .fullyClosed: return 1
    case .aboveShortDropPosition: return 2
    case .shortDropPosition: return 3
    case .belowShortDropPosition: return 4
    case .fullyOpen: return 5
    case .unknownDeInitialized: return 6
    case .atpReversePosition: return 7
    case .hardStopUp: return 9
    case .hardStopDown: return 10
    case .longDropPosition: return 11
    case .ventDropPosition: return 12
    case .betweenFullyClosedAndShortDropDown: return 13
    case .betweenShortDropDownAndFullyOpen: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WindowPositionStatus] = [
    .unknown,
    .fullyClosed,
    .aboveShortDropPosition,
    .shortDropPosition,
    .belowShortDropPosition,
    .fullyOpen,
    .unknownDeInitialized,
    .atpReversePosition,
    .hardStopUp,
    .hardStopDown,
    .longDropPosition,
    .ventDropPosition,
    .betweenFullyClosedAndShortDropDown,
    .betweenShortDropDownAndFullyOpen,
  ]

}

public enum Mobilegateway_Protos_MirrorFoldState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case foldedOut // = 2
  case foldedIn // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .foldedOut
    case 3: self = .foldedIn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .foldedOut: return 2
    case .foldedIn: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_MirrorFoldState] = [
    .unknown,
    .idle,
    .foldedOut,
    .foldedIn,
  ]

}

public enum Mobilegateway_Protos_LivingObjectDetectionStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case disabled // = 1
  case notActive // = 2
  case level1Warning // = 3
  case level2Warning // = 4
  case level3Warning // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .disabled
    case 2: self = .notActive
    case 3: self = .level1Warning
    case 4: self = .level2Warning
    case 5: self = .level3Warning
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .disabled: return 1
    case .notActive: return 2
    case .level1Warning: return 3
    case .level2Warning: return 4
    case .level3Warning: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LivingObjectDetectionStatus] = [
    .unknown,
    .disabled,
    .notActive,
    .level1Warning,
    .level2Warning,
    .level3Warning,
  ]

}

public enum Mobilegateway_Protos_LightState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///
  /// There's an explicit unknown state here in addition to 0, which I guess
  /// is more like undefined?
  case reallyUnknown // = 0
  case off // = 1
  case on // = 2
  case unknown // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .reallyUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .reallyUnknown
    case 1: self = .off
    case 2: self = .on
    case 3: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .reallyUnknown: return 0
    case .off: return 1
    case .on: return 2
    case .unknown: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LightState] = [
    .reallyUnknown,
    .off,
    .on,
    .unknown,
  ]

}

public enum Mobilegateway_Protos_LightAction: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case flash // = 1
  case on // = 2
  case off // = 3
  case hazardOn // = 4
  case hazardOff // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .flash
    case 2: self = .on
    case 3: self = .off
    case 4: self = .hazardOn
    case 5: self = .hazardOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .flash: return 1
    case .on: return 2
    case .off: return 3
    case .hazardOn: return 4
    case .hazardOff: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LightAction] = [
    .unknown,
    .flash,
    .on,
    .off,
    .hazardOn,
    .hazardOff,
  ]

}

public enum Mobilegateway_Protos_WelcomeAction: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case unlock // = 1
  case departure // = 2
  case lights // = 3
  case blinkers // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .unlock
    case 2: self = .departure
    case 3: self = .lights
    case 4: self = .blinkers
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .unlock: return 1
    case .departure: return 2
    case .lights: return 3
    case .blinkers: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WelcomeAction] = [
    .unknown,
    .unlock,
    .departure,
    .lights,
    .blinkers,
  ]

}

public enum Mobilegateway_Protos_TirePressureSensorDefective: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_TirePressureSensorDefective] = [
    .unknown,
    .off,
    .on,
  ]

}

public enum Mobilegateway_Protos_ChargeState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case notConnected // = 1
  case cableConnected // = 2
  case establishingSession // = 3
  case authorizingPnc // = 4
  case authorizingExternal // = 5
  case authorized // = 6
  case chargerPreparation // = 7
  case charging // = 8
  case chargingEndOk // = 9
  case chargingStopped // = 10
  case evseMalfunction // = 11
  case discharging // = 19
  case dischargingCompleted // = 20
  case dischargingStopped // = 21
  case dischargingFault // = 22
  case dischargingUnavailable // = 23
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .notConnected
    case 2: self = .cableConnected
    case 3: self = .establishingSession
    case 4: self = .authorizingPnc
    case 5: self = .authorizingExternal
    case 6: self = .authorized
    case 7: self = .chargerPreparation
    case 8: self = .charging
    case 9: self = .chargingEndOk
    case 10: self = .chargingStopped
    case 11: self = .evseMalfunction
    case 19: self = .discharging
    case 20: self = .dischargingCompleted
    case 21: self = .dischargingStopped
    case 22: self = .dischargingFault
    case 23: self = .dischargingUnavailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .notConnected: return 1
    case .cableConnected: return 2
    case .establishingSession: return 3
    case .authorizingPnc: return 4
    case .authorizingExternal: return 5
    case .authorized: return 6
    case .chargerPreparation: return 7
    case .charging: return 8
    case .chargingEndOk: return 9
    case .chargingStopped: return 10
    case .evseMalfunction: return 11
    case .discharging: return 19
    case .dischargingCompleted: return 20
    case .dischargingStopped: return 21
    case .dischargingFault: return 22
    case .dischargingUnavailable: return 23
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ChargeState] = [
    .unknown,
    .notConnected,
    .cableConnected,
    .establishingSession,
    .authorizingPnc,
    .authorizingExternal,
    .authorized,
    .chargerPreparation,
    .charging,
    .chargingEndOk,
    .chargingStopped,
    .evseMalfunction,
    .discharging,
    .dischargingCompleted,
    .dischargingStopped,
    .dischargingFault,
    .dischargingUnavailable,
  ]

}

public enum Mobilegateway_Protos_ScheduledChargeState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case scheduledToCharge // = 2
  case requestToCharge // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .scheduledToCharge
    case 3: self = .requestToCharge
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .scheduledToCharge: return 2
    case .requestToCharge: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ScheduledChargeState] = [
    .unknown,
    .idle,
    .scheduledToCharge,
    .requestToCharge,
  ]

}

public enum Mobilegateway_Protos_ScheduledChargeUnavailableState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case scheduledChargeUnavailableUnknown // = 0
  case scheduledChargeUnavailableNoRequest // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .scheduledChargeUnavailableUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .scheduledChargeUnavailableUnknown
    case 1: self = .scheduledChargeUnavailableNoRequest
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .scheduledChargeUnavailableUnknown: return 0
    case .scheduledChargeUnavailableNoRequest: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ScheduledChargeUnavailableState] = [
    .scheduledChargeUnavailableUnknown,
    .scheduledChargeUnavailableNoRequest,
  ]

}

public enum Mobilegateway_Protos_EnergyType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case ac // = 1
  case dc // = 2
  case v2V // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .ac
    case 2: self = .dc
    case 4: self = .v2V
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .ac: return 1
    case .dc: return 2
    case .v2V: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_EnergyType] = [
    .unknown,
    .ac,
    .dc,
    .v2V,
  ]

}

public enum Mobilegateway_Protos_MobileDischargingCommand: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case startDischarging // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .startDischarging
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .startDischarging: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_MobileDischargingCommand] = [
    .unknown,
    .startDischarging,
  ]

}

public enum Mobilegateway_Protos_ChargingSessionRestartAllowed: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case statusUnknown // = 0
  case statusIdle // = 1
  case statusNotAllowed // = 2
  case statusAllowed // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .statusUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .statusUnknown
    case 1: self = .statusIdle
    case 2: self = .statusNotAllowed
    case 3: self = .statusAllowed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .statusUnknown: return 0
    case .statusIdle: return 1
    case .statusNotAllowed: return 2
    case .statusAllowed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ChargingSessionRestartAllowed] = [
    .statusUnknown,
    .statusIdle,
    .statusNotAllowed,
    .statusAllowed,
  ]

}

public enum Mobilegateway_Protos_EaPncStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case enable // = 2
  case disable // = 3
  case noNotification // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .enable
    case 3: self = .disable
    case 4: self = .noNotification
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .enable: return 2
    case .disable: return 3
    case .noNotification: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_EaPncStatus] = [
    .unknown,
    .idle,
    .enable,
    .disable,
    .noNotification,
  ]

}

public enum Mobilegateway_Protos_AcOutletUnavailableReason: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case none // = 1
  case warningFault // = 2
  case criticalFault // = 3
  case charging // = 4
  case lowVehRange // = 5
  case warningFaultCamp // = 6
  case criticalFaultCamp // = 7
  case lowVehRangeCamp // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .none
    case 2: self = .warningFault
    case 3: self = .criticalFault
    case 4: self = .charging
    case 5: self = .lowVehRange
    case 6: self = .warningFaultCamp
    case 7: self = .criticalFaultCamp
    case 8: self = .lowVehRangeCamp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .none: return 1
    case .warningFault: return 2
    case .criticalFault: return 3
    case .charging: return 4
    case .lowVehRange: return 5
    case .warningFaultCamp: return 6
    case .criticalFaultCamp: return 7
    case .lowVehRangeCamp: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AcOutletUnavailableReason] = [
    .unknown,
    .none,
    .warningFault,
    .criticalFault,
    .charging,
    .lowVehRange,
    .warningFaultCamp,
    .criticalFaultCamp,
    .lowVehRangeCamp,
  ]

}

public enum Mobilegateway_Protos_UpdateState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case inProgress // = 1
  case success // = 2
  case failed // = 3
  case waitingOnBcm // = 4
  case updateFailedDriveAllowed // = 5
  case updateFailedNoAction // = 6
  case updateSuccessWithWarnings // = 7
  case updateNotstartedWithWarnings // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .inProgress
    case 2: self = .success
    case 3: self = .failed
    case 4: self = .waitingOnBcm
    case 5: self = .updateFailedDriveAllowed
    case 6: self = .updateFailedNoAction
    case 7: self = .updateSuccessWithWarnings
    case 8: self = .updateNotstartedWithWarnings
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .inProgress: return 1
    case .success: return 2
    case .failed: return 3
    case .waitingOnBcm: return 4
    case .updateFailedDriveAllowed: return 5
    case .updateFailedNoAction: return 6
    case .updateSuccessWithWarnings: return 7
    case .updateNotstartedWithWarnings: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_UpdateState] = [
    .unknown,
    .inProgress,
    .success,
    .failed,
    .waitingOnBcm,
    .updateFailedDriveAllowed,
    .updateFailedNoAction,
    .updateSuccessWithWarnings,
    .updateNotstartedWithWarnings,
  ]

}

public enum Mobilegateway_Protos_UpdateAvailability: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case updateAvailable // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .updateAvailable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .updateAvailable: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_UpdateAvailability] = [
    .unknown,
    .updateAvailable,
  ]

}

public enum Mobilegateway_Protos_TcuDownloadStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case tcuSoftwareDownloadStatusUnknown // = 0
  case tcuSoftwareDownloadStatusIdle // = 1
  case tcuSoftwareDownloadStatusDownloading // = 2
  case tcuSoftwareDownloadStatusDownloadPaused // = 3
  case tcuSoftwareDownloadStatusDownloadComplete // = 4
  case tcuSoftwareDownloadStatusDownloadFailed // = 5
  case tcuSoftwareDownloadStatusDownloadCanceled // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .tcuSoftwareDownloadStatusUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tcuSoftwareDownloadStatusUnknown
    case 1: self = .tcuSoftwareDownloadStatusIdle
    case 2: self = .tcuSoftwareDownloadStatusDownloading
    case 3: self = .tcuSoftwareDownloadStatusDownloadPaused
    case 4: self = .tcuSoftwareDownloadStatusDownloadComplete
    case 5: self = .tcuSoftwareDownloadStatusDownloadFailed
    case 6: self = .tcuSoftwareDownloadStatusDownloadCanceled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .tcuSoftwareDownloadStatusUnknown: return 0
    case .tcuSoftwareDownloadStatusIdle: return 1
    case .tcuSoftwareDownloadStatusDownloading: return 2
    case .tcuSoftwareDownloadStatusDownloadPaused: return 3
    case .tcuSoftwareDownloadStatusDownloadComplete: return 4
    case .tcuSoftwareDownloadStatusDownloadFailed: return 5
    case .tcuSoftwareDownloadStatusDownloadCanceled: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_TcuDownloadStatus] = [
    .tcuSoftwareDownloadStatusUnknown,
    .tcuSoftwareDownloadStatusIdle,
    .tcuSoftwareDownloadStatusDownloading,
    .tcuSoftwareDownloadStatusDownloadPaused,
    .tcuSoftwareDownloadStatusDownloadComplete,
    .tcuSoftwareDownloadStatusDownloadFailed,
    .tcuSoftwareDownloadStatusDownloadCanceled,
  ]

}

public enum Mobilegateway_Protos_SoftwareDownloadStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case downloading // = 2
  case downloadPaused // = 3
  case downloadComplete // = 4
  case downloadFailed // = 5
  case downloadCanceled // = 6
  case waitingOnWifi // = 7
  case waitingOnLte // = 8
  case pausedWaitingOnWifi // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .downloading
    case 3: self = .downloadPaused
    case 4: self = .downloadComplete
    case 5: self = .downloadFailed
    case 6: self = .downloadCanceled
    case 7: self = .waitingOnWifi
    case 8: self = .waitingOnLte
    case 9: self = .pausedWaitingOnWifi
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .downloading: return 2
    case .downloadPaused: return 3
    case .downloadComplete: return 4
    case .downloadFailed: return 5
    case .downloadCanceled: return 6
    case .waitingOnWifi: return 7
    case .waitingOnLte: return 8
    case .pausedWaitingOnWifi: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SoftwareDownloadStatus] = [
    .unknown,
    .idle,
    .downloading,
    .downloadPaused,
    .downloadComplete,
    .downloadFailed,
    .downloadCanceled,
    .waitingOnWifi,
    .waitingOnLte,
    .pausedWaitingOnWifi,
  ]

}

public enum Mobilegateway_Protos_SoftwareDownloadInterface: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case wifiOnly // = 2
  case lte // = 3
  case any // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .wifiOnly
    case 3: self = .lte
    case 4: self = .any
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .wifiOnly: return 2
    case .lte: return 3
    case .any: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SoftwareDownloadInterface] = [
    .unknown,
    .idle,
    .wifiOnly,
    .lte,
    .any,
  ]

}

public enum Mobilegateway_Protos_AlarmStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case disarmed // = 1
  case armed // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .disarmed
    case 2: self = .armed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .disarmed: return 1
    case .armed: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AlarmStatus] = [
    .unknown,
    .disarmed,
    .armed,
  ]

}

public enum Mobilegateway_Protos_AlarmMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case silent // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    case 3: self = .silent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .silent: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_AlarmMode] = [
    .unknown,
    .off,
    .on,
    .silent,
  ]

}

public enum Mobilegateway_Protos_CloudConnectionState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case cloudConnectionUnknown // = 0
  case cloudConnectionConnected // = 1
  case cloudConnectionDisconnected // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .cloudConnectionUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cloudConnectionUnknown
    case 1: self = .cloudConnectionConnected
    case 2: self = .cloudConnectionDisconnected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cloudConnectionUnknown: return 0
    case .cloudConnectionConnected: return 1
    case .cloudConnectionDisconnected: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_CloudConnectionState] = [
    .cloudConnectionUnknown,
    .cloudConnectionConnected,
    .cloudConnectionDisconnected,
  ]

}

public enum Mobilegateway_Protos_KeylessDrivingState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case keylessDrivingUnknown // = 0
  case keylessDrivingOn // = 1
  case keylessDrivingOff // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .keylessDrivingUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .keylessDrivingUnknown
    case 1: self = .keylessDrivingOn
    case 2: self = .keylessDrivingOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .keylessDrivingUnknown: return 0
    case .keylessDrivingOn: return 1
    case .keylessDrivingOff: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_KeylessDrivingState] = [
    .keylessDrivingUnknown,
    .keylessDrivingOn,
    .keylessDrivingOff,
  ]

}

public enum Mobilegateway_Protos_HvacPower: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case hvacOn // = 1
  case hvacOff // = 2
  case hvacPrecondition // = 3
  case hvacKeepTemp // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .hvacOn
    case 2: self = .hvacOff
    case 3: self = .hvacPrecondition
    case 6: self = .hvacKeepTemp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .hvacOn: return 1
    case .hvacOff: return 2
    case .hvacPrecondition: return 3
    case .hvacKeepTemp: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_HvacPower] = [
    .unknown,
    .hvacOn,
    .hvacOff,
    .hvacPrecondition,
    .hvacKeepTemp,
  ]

}

public enum Mobilegateway_Protos_DefrostState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case defrostOn // = 1
  case defrostOff // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .defrostOn
    case 2: self = .defrostOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .defrostOn: return 1
    case .defrostOff: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_DefrostState] = [
    .unknown,
    .defrostOn,
    .defrostOff,
  ]

}

public enum Mobilegateway_Protos_HvacPreconditionStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case stillActive // = 1
  case tempReached // = 2
  case timeout // = 3
  case userInput // = 4
  case notActivePrecondition // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .stillActive
    case 2: self = .tempReached
    case 3: self = .timeout
    case 4: self = .userInput
    case 6: self = .notActivePrecondition
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .stillActive: return 1
    case .tempReached: return 2
    case .timeout: return 3
    case .userInput: return 4
    case .notActivePrecondition: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_HvacPreconditionStatus] = [
    .unknown,
    .stillActive,
    .tempReached,
    .timeout,
    .userInput,
    .notActivePrecondition,
  ]

}

public enum Mobilegateway_Protos_KeepClimateStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case inactive // = 1
  case enabled // = 2
  case canceled // = 3
  case petModeOn // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .inactive
    case 2: self = .enabled
    case 3: self = .canceled
    case 4: self = .petModeOn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .inactive: return 1
    case .enabled: return 2
    case .canceled: return 3
    case .petModeOn: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_KeepClimateStatus] = [
    .unknown,
    .inactive,
    .enabled,
    .canceled,
    .petModeOn,
  ]

}

public enum Mobilegateway_Protos_KeepClimateCondition: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_KeepClimateCondition] = [
    .unknown,
  ]

}

public enum Mobilegateway_Protos_SeatClimateMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 2
  case low // = 3
  case medium // = 4
  case high // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 2: self = .off
    case 3: self = .low
    case 4: self = .medium
    case 5: self = .high
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 2
    case .low: return 3
    case .medium: return 4
    case .high: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SeatClimateMode] = [
    .unknown,
    .off,
    .low,
    .medium,
    .high,
  ]

}

public enum Mobilegateway_Protos_SteeringHeaterStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SteeringHeaterStatus] = [
    .unknown,
    .off,
    .on,
  ]

}

public enum Mobilegateway_Protos_SyncSet: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SyncSet] = [
    .unknown,
    .off,
    .on,
  ]

}

public enum Mobilegateway_Protos_RearWindowHeatingStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case offLostCommWithDcm // = 3
  case onLostCommWithDcm // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    case 3: self = .offLostCommWithDcm
    case 4: self = .onLostCommWithDcm
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .offLostCommWithDcm: return 3
    case .onLostCommWithDcm: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_RearWindowHeatingStatus] = [
    .unknown,
    .off,
    .on,
    .offLostCommWithDcm,
    .onLostCommWithDcm,
  ]

}

public enum Mobilegateway_Protos_HvacLimited: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_HvacLimited] = [
    .unknown,
    .off,
    .on,
  ]

}

public enum Mobilegateway_Protos_DriveMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case comfort // = 1
  case swift // = 2
  case winter // = 3
  case valet // = 4

  /// aka Sprint 
  case sportPlus // = 5
  case reserved1 // = 6
  case reserved2 // = 7

  /// Service mode - car is in shop and can't be remote controlled 
  case service // = 8
  case launch // = 9
  case factory // = 10
  case dev1 // = 11
  case dev2 // = 12
  case transport // = 13
  case showroom // = 14
  case tow // = 15
  case testDrive // = 16
  case reserved3 // = 17
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .comfort
    case 2: self = .swift
    case 3: self = .winter
    case 4: self = .valet
    case 5: self = .sportPlus
    case 6: self = .reserved1
    case 7: self = .reserved2
    case 8: self = .service
    case 9: self = .launch
    case 10: self = .factory
    case 11: self = .dev1
    case 12: self = .dev2
    case 13: self = .transport
    case 14: self = .showroom
    case 15: self = .tow
    case 16: self = .testDrive
    case 17: self = .reserved3
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .comfort: return 1
    case .swift: return 2
    case .winter: return 3
    case .valet: return 4
    case .sportPlus: return 5
    case .reserved1: return 6
    case .reserved2: return 7
    case .service: return 8
    case .launch: return 9
    case .factory: return 10
    case .dev1: return 11
    case .dev2: return 12
    case .transport: return 13
    case .showroom: return 14
    case .tow: return 15
    case .testDrive: return 16
    case .reserved3: return 17
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_DriveMode] = [
    .unknown,
    .comfort,
    .swift,
    .winter,
    .valet,
    .sportPlus,
    .reserved1,
    .reserved2,
    .service,
    .launch,
    .factory,
    .dev1,
    .dev2,
    .transport,
    .showroom,
    .tow,
    .testDrive,
    .reserved3,
  ]

}

public enum Mobilegateway_Protos_PrivacyMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case connectivityEnabled // = 1
  case connectivityDisabled // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .connectivityEnabled
    case 2: self = .connectivityDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .connectivityEnabled: return 1
    case .connectivityDisabled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PrivacyMode] = [
    .unknown,
    .connectivityEnabled,
    .connectivityDisabled,
  ]

}

public enum Mobilegateway_Protos_GearPosition: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case gearUnknown // = 0
  case gearPark // = 1
  case gearReverse // = 2
  case gearNeutral // = 3
  case gearDrive // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .gearUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .gearUnknown
    case 1: self = .gearPark
    case 2: self = .gearReverse
    case 3: self = .gearNeutral
    case 4: self = .gearDrive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .gearUnknown: return 0
    case .gearPark: return 1
    case .gearReverse: return 2
    case .gearNeutral: return 3
    case .gearDrive: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_GearPosition] = [
    .gearUnknown,
    .gearPark,
    .gearReverse,
    .gearNeutral,
    .gearDrive,
  ]

}

public enum Mobilegateway_Protos_SharedTripState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case sharedTripUnknown // = 0
  case sharedTripAvailable // = 1
  case sharedTripProfileUpdated // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .sharedTripUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sharedTripUnknown
    case 1: self = .sharedTripAvailable
    case 3: self = .sharedTripProfileUpdated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sharedTripUnknown: return 0
    case .sharedTripAvailable: return 1
    case .sharedTripProfileUpdated: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SharedTripState] = [
    .sharedTripUnknown,
    .sharedTripAvailable,
    .sharedTripProfileUpdated,
  ]

}

public enum Mobilegateway_Protos_PanicState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case panicAlarmUnknown // = 0
  case panicAlarmOn // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .panicAlarmUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .panicAlarmUnknown
    case 1: self = .panicAlarmOn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .panicAlarmUnknown: return 0
    case .panicAlarmOn: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PanicState] = [
    .panicAlarmUnknown,
    .panicAlarmOn,
  ]

}

public enum Mobilegateway_Protos_TcuState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case tcuUnknown // = 0
  case tcuSleep // = 1
  case tcuDrowsy // = 2
  case tcuFull // = 4

  /// State during an update 
  case tcuFactory // = 5
  case tcuPower // = 6
  case tcuOff // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .tcuUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tcuUnknown
    case 1: self = .tcuSleep
    case 2: self = .tcuDrowsy
    case 4: self = .tcuFull
    case 5: self = .tcuFactory
    case 6: self = .tcuPower
    case 7: self = .tcuOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .tcuUnknown: return 0
    case .tcuSleep: return 1
    case .tcuDrowsy: return 2
    case .tcuFull: return 4
    case .tcuFactory: return 5
    case .tcuPower: return 6
    case .tcuOff: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_TcuState] = [
    .tcuUnknown,
    .tcuSleep,
    .tcuDrowsy,
    .tcuFull,
    .tcuFactory,
    .tcuPower,
    .tcuOff,
  ]

}

public enum Mobilegateway_Protos_LteType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case lteType3G // = 1
  case lteType4G // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .lteType3G
    case 2: self = .lteType4G
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .lteType3G: return 1
    case .lteType4G: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LteType] = [
    .unknown,
    .lteType3G,
    .lteType4G,
  ]

}

public enum Mobilegateway_Protos_InternetStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case internetDisconnected // = 1
  case internetConnected // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .internetDisconnected
    case 2: self = .internetConnected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .internetDisconnected: return 1
    case .internetConnected: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_InternetStatus] = [
    .unknown,
    .internetDisconnected,
    .internetConnected,
  ]

}

public enum Mobilegateway_Protos_MpbFaultStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case normal // = 1
  case critical // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .normal
    case 3: self = .critical
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .normal: return 1
    case .critical: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_MpbFaultStatus] = [
    .unknown,
    .normal,
    .critical,
  ]

}

public enum Mobilegateway_Protos_PowertrainMessage: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case blankNoMessage // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .blankNoMessage
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .blankNoMessage: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PowertrainMessage] = [
    .unknown,
    .blankNoMessage,
  ]

}

public enum Mobilegateway_Protos_PowertrainNotifyStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case powertrainNotifyUnknown // = 0
  case powertrainNotifyNone // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .powertrainNotifyUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .powertrainNotifyUnknown
    case 1: self = .powertrainNotifyNone
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .powertrainNotifyUnknown: return 0
    case .powertrainNotifyNone: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_PowertrainNotifyStatus] = [
    .powertrainNotifyUnknown,
    .powertrainNotifyNone,
  ]

}

public enum Mobilegateway_Protos_GeneralChargeStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case generalChargeUnknown // = 0
  case generalChargeDefault // = 1
  case generalChargeDeratedChargingPower // = 4
  case generalChargeSavetimeTempPrecon // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .generalChargeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .generalChargeUnknown
    case 1: self = .generalChargeDefault
    case 4: self = .generalChargeDeratedChargingPower
    case 5: self = .generalChargeSavetimeTempPrecon
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .generalChargeUnknown: return 0
    case .generalChargeDefault: return 1
    case .generalChargeDeratedChargingPower: return 4
    case .generalChargeSavetimeTempPrecon: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_GeneralChargeStatus] = [
    .generalChargeUnknown,
    .generalChargeDefault,
    .generalChargeDeratedChargingPower,
    .generalChargeSavetimeTempPrecon,
  ]

}

public enum Mobilegateway_Protos_EnablementState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 3: self = .idle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_EnablementState] = [
    .unknown,
    .idle,
  ]

}

public enum Mobilegateway_Protos_SentryThreat: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case levelUnknown // = 0
  case idle // = 1
  case levelOne // = 2
  case levelTwo // = 3
  case levelThree // = 4
  case noThreat // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .levelUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .levelUnknown
    case 1: self = .idle
    case 2: self = .levelOne
    case 3: self = .levelTwo
    case 4: self = .levelThree
    case 5: self = .noThreat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .levelUnknown: return 0
    case .idle: return 1
    case .levelOne: return 2
    case .levelTwo: return 3
    case .levelThree: return 4
    case .noThreat: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SentryThreat] = [
    .levelUnknown,
    .idle,
    .levelOne,
    .levelTwo,
    .levelThree,
    .noThreat,
  ]

}

public enum Mobilegateway_Protos_SentryUsbDriveStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknownSentryUsbDriveStatus // = 0
  case sentryUsbDriveIdle // = 1
  case sentryUsbDriveConnected // = 2
  case sentryUsbDriveNotConnected // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownSentryUsbDriveStatus
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownSentryUsbDriveStatus
    case 1: self = .sentryUsbDriveIdle
    case 2: self = .sentryUsbDriveConnected
    case 3: self = .sentryUsbDriveNotConnected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownSentryUsbDriveStatus: return 0
    case .sentryUsbDriveIdle: return 1
    case .sentryUsbDriveConnected: return 2
    case .sentryUsbDriveNotConnected: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SentryUsbDriveStatus] = [
    .unknownSentryUsbDriveStatus,
    .sentryUsbDriveIdle,
    .sentryUsbDriveConnected,
    .sentryUsbDriveNotConnected,
  ]

}

public enum Mobilegateway_Protos_EnhancedDeterrenceState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case enhancedDeterrenceEnabled // = 1
  case enhancedDeterrenceDisabled // = 2
  case enhancedDeterrenceIdle // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .enhancedDeterrenceEnabled
    case 2: self = .enhancedDeterrenceDisabled
    case 3: self = .enhancedDeterrenceIdle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .enhancedDeterrenceEnabled: return 1
    case .enhancedDeterrenceDisabled: return 2
    case .enhancedDeterrenceIdle: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_EnhancedDeterrenceState] = [
    .unknown,
    .enhancedDeterrenceEnabled,
    .enhancedDeterrenceDisabled,
    .enhancedDeterrenceIdle,
  ]

}

public enum Mobilegateway_Protos_SentryRemoteAlarmState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case sentryRemoteAlarmIdle // = 1
  case sentryRemoteAlarmOn // = 2
  case sentryRemoteAlarmOff // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .sentryRemoteAlarmIdle
    case 2: self = .sentryRemoteAlarmOn
    case 3: self = .sentryRemoteAlarmOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .sentryRemoteAlarmIdle: return 1
    case .sentryRemoteAlarmOn: return 2
    case .sentryRemoteAlarmOff: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SentryRemoteAlarmState] = [
    .unknown,
    .sentryRemoteAlarmIdle,
    .sentryRemoteAlarmOn,
    .sentryRemoteAlarmOff,
  ]

}

public enum Mobilegateway_Protos_LowPowerModeStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case inactive // = 1
  case active // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .inactive
    case 2: self = .active
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .inactive: return 1
    case .active: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_LowPowerModeStatus] = [
    .unknown,
    .inactive,
    .active,
  ]

}

public enum Mobilegateway_Protos_ChargeAction: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case start // = 1
  case stop // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .start
    case 2: self = .stop
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .start: return 1
    case .stop: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_ChargeAction] = [
    .unknown,
    .start,
    .stop,
  ]

}

public enum Mobilegateway_Protos_DocumentType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case releaseNotesPre // = 1
  case releaseNotesPost // = 2
  case ownersManual // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .releaseNotesPre
    case 2: self = .releaseNotesPost
    case 3: self = .ownersManual
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .releaseNotesPre: return 1
    case .releaseNotesPost: return 2
    case .ownersManual: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_DocumentType] = [
    .unknown,
    .releaseNotesPre,
    .releaseNotesPost,
    .ownersManual,
  ]

}

public enum Mobilegateway_Protos_DischargeCommand: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case dischargeUnknown // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .dischargeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dischargeUnknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .dischargeUnknown: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_DischargeCommand] = [
    .dischargeUnknown,
  ]

}

public enum Mobilegateway_Protos_WindowSwitchState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case idle // = 1
  case autoUpAll // = 2
  case ventAll // = 3
  case autoDownAll // = 4
  case error // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .idle
    case 2: self = .autoUpAll
    case 3: self = .ventAll
    case 4: self = .autoDownAll
    case 5: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .idle: return 1
    case .autoUpAll: return 2
    case .ventAll: return 3
    case .autoDownAll: return 4
    case .error: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WindowSwitchState] = [
    .unknown,
    .idle,
    .autoUpAll,
    .ventAll,
    .autoDownAll,
    .error,
  ]

}

public enum Mobilegateway_Protos_MaxACState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_MaxACState] = [
    .unknown,
    .off,
    .on,
  ]

}

public enum Mobilegateway_Protos_SteeringWheelHeaterLevel: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case steeringWheelHeaterLevel1 // = 2
  case steeringWheelHeaterLevel2 // = 3
  case steeringWheelHeaterLevel3 // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .steeringWheelHeaterLevel1
    case 3: self = .steeringWheelHeaterLevel2
    case 4: self = .steeringWheelHeaterLevel3
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .steeringWheelHeaterLevel1: return 2
    case .steeringWheelHeaterLevel2: return 3
    case .steeringWheelHeaterLevel3: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_SteeringWheelHeaterLevel] = [
    .unknown,
    .off,
    .steeringWheelHeaterLevel1,
    .steeringWheelHeaterLevel2,
    .steeringWheelHeaterLevel3,
  ]

}

public enum Mobilegateway_Protos_CreatureComfortMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case on // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .on
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .on: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_CreatureComfortMode] = [
    .unknown,
    .off,
    .on,
  ]

}

public struct Mobilegateway_Protos_ChargingSubscription: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var expirationDate: UInt64 = 0

  public var startDate: UInt64 = 0

  public var status: Mobilegateway_Protos_SubscriptionStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ChargingAccount: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var emaID: String = String()

  public var vehicleID: String = String()

  public var status: Mobilegateway_Protos_ChargingAccountStatus = .unknown

  public var createdAtEpochSec: UInt64 = 0

  public var expiryOnEpochSec: UInt64 = 0

  public var vendorName: Mobilegateway_Protos_ChargingVendor = .unknown

  public var validPaymentMethod: Bool = false

  public var planID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SpecialIdentifiers: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var doorPlate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_Reservation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var date: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_VehicleConfig: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vin: String {
    get {return _storage._vin}
    set {_uniqueStorage()._vin = newValue}
  }

  public var model: Mobilegateway_Protos_Model {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  public var variant: Mobilegateway_Protos_ModelVariant {
    get {return _storage._variant}
    set {_uniqueStorage()._variant = newValue}
  }

  public var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  public var paintColor: Mobilegateway_Protos_PaintColor {
    get {return _storage._paintColor}
    set {_uniqueStorage()._paintColor = newValue}
  }

  public var emaID: String {
    get {return _storage._emaID}
    set {_uniqueStorage()._emaID = newValue}
  }

  public var wheels: Mobilegateway_Protos_Wheels {
    get {return _storage._wheels}
    set {_uniqueStorage()._wheels = newValue}
  }

  public var eaSubscription: Mobilegateway_Protos_ChargingSubscription {
    get {return _storage._eaSubscription ?? Mobilegateway_Protos_ChargingSubscription()}
    set {_uniqueStorage()._eaSubscription = newValue}
  }
  /// Returns true if `eaSubscription` has been explicitly set.
  public var hasEaSubscription: Bool {return _storage._eaSubscription != nil}
  /// Clears the value of `eaSubscription`. Subsequent reads from it will return its default value.
  public mutating func clearEaSubscription() {_uniqueStorage()._eaSubscription = nil}

  public var chargingAccounts: [Mobilegateway_Protos_ChargingAccount] {
    get {return _storage._chargingAccounts}
    set {_uniqueStorage()._chargingAccounts = newValue}
  }

  public var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  public var regionCode: String {
    get {return _storage._regionCode}
    set {_uniqueStorage()._regionCode = newValue}
  }

  public var edition: Mobilegateway_Protos_Edition {
    get {return _storage._edition}
    set {_uniqueStorage()._edition = newValue}
  }

  public var battery: Mobilegateway_Protos_BatteryType {
    get {return _storage._battery}
    set {_uniqueStorage()._battery = newValue}
  }

  public var interior: Mobilegateway_Protos_Interior {
    get {return _storage._interior}
    set {_uniqueStorage()._interior = newValue}
  }

  public var specialIdentifiers: Mobilegateway_Protos_SpecialIdentifiers {
    get {return _storage._specialIdentifiers ?? Mobilegateway_Protos_SpecialIdentifiers()}
    set {_uniqueStorage()._specialIdentifiers = newValue}
  }
  /// Returns true if `specialIdentifiers` has been explicitly set.
  public var hasSpecialIdentifiers: Bool {return _storage._specialIdentifiers != nil}
  /// Clears the value of `specialIdentifiers`. Subsequent reads from it will return its default value.
  public mutating func clearSpecialIdentifiers() {_uniqueStorage()._specialIdentifiers = nil}

  public var look: Mobilegateway_Protos_Look {
    get {return _storage._look}
    set {_uniqueStorage()._look = newValue}
  }

  public var exteriorColorCode: String {
    get {return _storage._exteriorColorCode}
    set {_uniqueStorage()._exteriorColorCode = newValue}
  }

  public var interiorColorCode: String {
    get {return _storage._interiorColorCode}
    set {_uniqueStorage()._interiorColorCode = newValue}
  }

  public var frunkStrut: Mobilegateway_Protos_StrutType {
    get {return _storage._frunkStrut}
    set {_uniqueStorage()._frunkStrut = newValue}
  }

  public var reservation: Mobilegateway_Protos_Reservation {
    get {return _storage._reservation ?? Mobilegateway_Protos_Reservation()}
    set {_uniqueStorage()._reservation = newValue}
  }
  /// Returns true if `reservation` has been explicitly set.
  public var hasReservation: Bool {return _storage._reservation != nil}
  /// Clears the value of `reservation`. Subsequent reads from it will return its default value.
  public mutating func clearReservation() {_uniqueStorage()._reservation = nil}

  public var roof: Mobilegateway_Protos_RoofType {
    get {return _storage._roof}
    set {_uniqueStorage()._roof = newValue}
  }

  public var frontSeatsHeating: Mobilegateway_Protos_FrontSeatsHeatingAvailability {
    get {return _storage._frontSeatsHeating}
    set {_uniqueStorage()._frontSeatsHeating = newValue}
  }

  public var frontSeatsVentilation: Mobilegateway_Protos_FrontSeatsVentilationAvailability {
    get {return _storage._frontSeatsVentilation}
    set {_uniqueStorage()._frontSeatsVentilation = newValue}
  }

  public var secondRowHeatedSeats: Mobilegateway_Protos_SecondRowHeatedSeatsAvailability {
    get {return _storage._secondRowHeatedSeats}
    set {_uniqueStorage()._secondRowHeatedSeats = newValue}
  }

  public var rearSeatConfig: Mobilegateway_Protos_RearSeatConfig {
    get {return _storage._rearSeatConfig}
    set {_uniqueStorage()._rearSeatConfig = newValue}
  }

  public var heatedSteeringWheel: Mobilegateway_Protos_HeatedSteeringWheelAvailability {
    get {return _storage._heatedSteeringWheel}
    set {_uniqueStorage()._heatedSteeringWheel = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_BatteryState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var remainingRange: Double {
    get {return _storage._remainingRange}
    set {_uniqueStorage()._remainingRange = newValue}
  }

  public var chargePercent: Double {
    get {return _storage._chargePercent}
    set {_uniqueStorage()._chargePercent = newValue}
  }

  public var kwhr: Double {
    get {return _storage._kwhr}
    set {_uniqueStorage()._kwhr = newValue}
  }

  public var capacityKwhr: Double {
    get {return _storage._capacityKwhr}
    set {_uniqueStorage()._capacityKwhr = newValue}
  }

  public var batteryHealth: Mobilegateway_Protos_WarningState {
    get {return _storage._batteryHealth}
    set {_uniqueStorage()._batteryHealth = newValue}
  }

  public var lowChargeLevel: Mobilegateway_Protos_WarningState {
    get {return _storage._lowChargeLevel}
    set {_uniqueStorage()._lowChargeLevel = newValue}
  }

  public var criticalChargeLevel: Mobilegateway_Protos_WarningState {
    get {return _storage._criticalChargeLevel}
    set {_uniqueStorage()._criticalChargeLevel = newValue}
  }

  public var unavailableRange: Double {
    get {return _storage._unavailableRange}
    set {_uniqueStorage()._unavailableRange = newValue}
  }

  public var preconditioningStatus: Mobilegateway_Protos_BatteryPreconStatus {
    get {return _storage._preconditioningStatus}
    set {_uniqueStorage()._preconditioningStatus = newValue}
  }

  public var preconditioningTimeRemaining: UInt32 {
    get {return _storage._preconditioningTimeRemaining}
    set {_uniqueStorage()._preconditioningTimeRemaining = newValue}
  }

  public var batteryHealthLevel: Double {
    get {return _storage._batteryHealthLevel}
    set {_uniqueStorage()._batteryHealthLevel = newValue}
  }

  public var bmuSoftwareVersionMajor: UInt32 {
    get {return _storage._bmuSoftwareVersionMajor}
    set {_uniqueStorage()._bmuSoftwareVersionMajor = newValue}
  }

  public var bmuSoftwareVersionMinor: UInt32 {
    get {return _storage._bmuSoftwareVersionMinor}
    set {_uniqueStorage()._bmuSoftwareVersionMinor = newValue}
  }

  public var bmuSoftwareVersionMicro: UInt32 {
    get {return _storage._bmuSoftwareVersionMicro}
    set {_uniqueStorage()._bmuSoftwareVersionMicro = newValue}
  }

  public var batteryCellType: Mobilegateway_Protos_BatteryCellType {
    get {return _storage._batteryCellType}
    set {_uniqueStorage()._batteryCellType = newValue}
  }

  public var batteryPackType: Mobilegateway_Protos_BatteryPackType {
    get {return _storage._batteryPackType}
    set {_uniqueStorage()._batteryPackType = newValue}
  }

  public var maxCellTemp: Double {
    get {return _storage._maxCellTemp}
    set {_uniqueStorage()._maxCellTemp = newValue}
  }

  public var minCellTemp: Double {
    get {return _storage._minCellTemp}
    set {_uniqueStorage()._minCellTemp = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_CabinState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var interiorTemp: Double = 0

  public var exteriorTemp: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_WindowPositionState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var leftFront: Mobilegateway_Protos_WindowPositionStatus = .unknown

  public var leftRear: Mobilegateway_Protos_WindowPositionStatus = .unknown

  public var rightFront: Mobilegateway_Protos_WindowPositionStatus = .unknown

  public var rightRear: Mobilegateway_Protos_WindowPositionStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_BodyState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var doorLocks: Mobilegateway_Protos_LockState {
    get {return _storage._doorLocks}
    set {_uniqueStorage()._doorLocks = newValue}
  }

  public var frontCargo: Mobilegateway_Protos_DoorState {
    get {return _storage._frontCargo}
    set {_uniqueStorage()._frontCargo = newValue}
  }

  public var rearCargo: Mobilegateway_Protos_DoorState {
    get {return _storage._rearCargo}
    set {_uniqueStorage()._rearCargo = newValue}
  }

  public var frontLeftDoor: Mobilegateway_Protos_DoorState {
    get {return _storage._frontLeftDoor}
    set {_uniqueStorage()._frontLeftDoor = newValue}
  }

  public var frontRightDoor: Mobilegateway_Protos_DoorState {
    get {return _storage._frontRightDoor}
    set {_uniqueStorage()._frontRightDoor = newValue}
  }

  public var rearLeftDoor: Mobilegateway_Protos_DoorState {
    get {return _storage._rearLeftDoor}
    set {_uniqueStorage()._rearLeftDoor = newValue}
  }

  public var rearRightDoor: Mobilegateway_Protos_DoorState {
    get {return _storage._rearRightDoor}
    set {_uniqueStorage()._rearRightDoor = newValue}
  }

  public var chargePort: Mobilegateway_Protos_DoorState {
    get {return _storage._chargePort}
    set {_uniqueStorage()._chargePort = newValue}
  }

  public var walkawayLock: Mobilegateway_Protos_WalkawayState {
    get {return _storage._walkawayLock}
    set {_uniqueStorage()._walkawayLock = newValue}
  }

  public var accessTypeStatus: Mobilegateway_Protos_AccessRequest {
    get {return _storage._accessTypeStatus}
    set {_uniqueStorage()._accessTypeStatus = newValue}
  }

  public var keyfobBatteryStatus: Mobilegateway_Protos_KeyfobBatteryStatus {
    get {return _storage._keyfobBatteryStatus}
    set {_uniqueStorage()._keyfobBatteryStatus = newValue}
  }

  public var frontLeftMirrorFoldState: Mobilegateway_Protos_MirrorFoldState {
    get {return _storage._frontLeftMirrorFoldState}
    set {_uniqueStorage()._frontLeftMirrorFoldState = newValue}
  }

  public var frontRightMirrorFoldState: Mobilegateway_Protos_MirrorFoldState {
    get {return _storage._frontRightMirrorFoldState}
    set {_uniqueStorage()._frontRightMirrorFoldState = newValue}
  }

  public var allWindowsPosition: Mobilegateway_Protos_AllWindowPosition {
    get {return _storage._allWindowsPosition}
    set {_uniqueStorage()._allWindowsPosition = newValue}
  }

  public var livingObjectDetectionStatus: Mobilegateway_Protos_LivingObjectDetectionStatus {
    get {return _storage._livingObjectDetectionStatus}
    set {_uniqueStorage()._livingObjectDetectionStatus = newValue}
  }

  public var windowPosition: Mobilegateway_Protos_WindowPositionState {
    get {return _storage._windowPosition ?? Mobilegateway_Protos_WindowPositionState()}
    set {_uniqueStorage()._windowPosition = newValue}
  }
  /// Returns true if `windowPosition` has been explicitly set.
  public var hasWindowPosition: Bool {return _storage._windowPosition != nil}
  /// Clears the value of `windowPosition`. Subsequent reads from it will return its default value.
  public mutating func clearWindowPosition() {_uniqueStorage()._windowPosition = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_ChassisState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var odometerKm: Double {
    get {return _storage._odometerKm}
    set {_uniqueStorage()._odometerKm = newValue}
  }

  public var frontLeftTirePressureBar: Double {
    get {return _storage._frontLeftTirePressureBar}
    set {_uniqueStorage()._frontLeftTirePressureBar = newValue}
  }

  public var frontRightTirePressureBar: Double {
    get {return _storage._frontRightTirePressureBar}
    set {_uniqueStorage()._frontRightTirePressureBar = newValue}
  }

  public var rearLeftTirePressureBar: Double {
    get {return _storage._rearLeftTirePressureBar}
    set {_uniqueStorage()._rearLeftTirePressureBar = newValue}
  }

  public var rearRightTirePressureBar: Double {
    get {return _storage._rearRightTirePressureBar}
    set {_uniqueStorage()._rearRightTirePressureBar = newValue}
  }

  public var headlights: Mobilegateway_Protos_LightState {
    get {return _storage._headlights}
    set {_uniqueStorage()._headlights = newValue}
  }

  public var hardWarnLeftFront: Mobilegateway_Protos_WarningState {
    get {return _storage._hardWarnLeftFront}
    set {_uniqueStorage()._hardWarnLeftFront = newValue}
  }

  public var hardWarnLeftRear: Mobilegateway_Protos_WarningState {
    get {return _storage._hardWarnLeftRear}
    set {_uniqueStorage()._hardWarnLeftRear = newValue}
  }

  public var hardWarnRightFront: Mobilegateway_Protos_WarningState {
    get {return _storage._hardWarnRightFront}
    set {_uniqueStorage()._hardWarnRightFront = newValue}
  }

  public var hardWarnRightRear: Mobilegateway_Protos_WarningState {
    get {return _storage._hardWarnRightRear}
    set {_uniqueStorage()._hardWarnRightRear = newValue}
  }

  public var softWarnLeftFront: Mobilegateway_Protos_WarningState {
    get {return _storage._softWarnLeftFront}
    set {_uniqueStorage()._softWarnLeftFront = newValue}
  }

  public var softWarnLeftRear: Mobilegateway_Protos_WarningState {
    get {return _storage._softWarnLeftRear}
    set {_uniqueStorage()._softWarnLeftRear = newValue}
  }

  public var softWarnRightFront: Mobilegateway_Protos_WarningState {
    get {return _storage._softWarnRightFront}
    set {_uniqueStorage()._softWarnRightFront = newValue}
  }

  public var softWarnRightRear: Mobilegateway_Protos_WarningState {
    get {return _storage._softWarnRightRear}
    set {_uniqueStorage()._softWarnRightRear = newValue}
  }

  public var softwareVersion: String {
    get {return _storage._softwareVersion}
    set {_uniqueStorage()._softwareVersion = newValue}
  }

  /// in meters/second 
  public var speed: Double {
    get {return _storage._speed}
    set {_uniqueStorage()._speed = newValue}
  }

  public var sensorDefectiveLeftFront: Mobilegateway_Protos_TirePressureSensorDefective {
    get {return _storage._sensorDefectiveLeftFront}
    set {_uniqueStorage()._sensorDefectiveLeftFront = newValue}
  }

  public var sensorDefectiveLeftRear: Mobilegateway_Protos_TirePressureSensorDefective {
    get {return _storage._sensorDefectiveLeftRear}
    set {_uniqueStorage()._sensorDefectiveLeftRear = newValue}
  }

  public var sensorDefectiveRightFront: Mobilegateway_Protos_TirePressureSensorDefective {
    get {return _storage._sensorDefectiveRightFront}
    set {_uniqueStorage()._sensorDefectiveRightFront = newValue}
  }

  public var sensorDefectiveRightRear: Mobilegateway_Protos_TirePressureSensorDefective {
    get {return _storage._sensorDefectiveRightRear}
    set {_uniqueStorage()._sensorDefectiveRightRear = newValue}
  }

  public var tirePressureLastUpdated: UInt64 {
    get {return _storage._tirePressureLastUpdated}
    set {_uniqueStorage()._tirePressureLastUpdated = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_ChargingState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chargeState: Mobilegateway_Protos_ChargeState {
    get {return _storage._chargeState}
    set {_uniqueStorage()._chargeState = newValue}
  }

  public var energyType: Mobilegateway_Protos_EnergyType {
    get {return _storage._energyType}
    set {_uniqueStorage()._energyType = newValue}
  }

  public var chargeSessionMi: Double {
    get {return _storage._chargeSessionMi}
    set {_uniqueStorage()._chargeSessionMi = newValue}
  }

  public var chargeSessionKwh: Double {
    get {return _storage._chargeSessionKwh}
    set {_uniqueStorage()._chargeSessionKwh = newValue}
  }

  public var sessionMinutesRemaining: UInt32 {
    get {return _storage._sessionMinutesRemaining}
    set {_uniqueStorage()._sessionMinutesRemaining = newValue}
  }

  public var chargeLimit: UInt32 {
    get {return _storage._chargeLimit}
    set {_uniqueStorage()._chargeLimit = newValue}
  }

  public var cableLock: Mobilegateway_Protos_LockState {
    get {return _storage._cableLock}
    set {_uniqueStorage()._cableLock = newValue}
  }

  public var chargeRateKwhPrecise: Double {
    get {return _storage._chargeRateKwhPrecise}
    set {_uniqueStorage()._chargeRateKwhPrecise = newValue}
  }

  public var chargeRateMphPrecise: Double {
    get {return _storage._chargeRateMphPrecise}
    set {_uniqueStorage()._chargeRateMphPrecise = newValue}
  }

  public var chargeRateMilesMinPrecise: Double {
    get {return _storage._chargeRateMilesMinPrecise}
    set {_uniqueStorage()._chargeRateMilesMinPrecise = newValue}
  }

  public var chargeLimitPercent: Double {
    get {return _storage._chargeLimitPercent}
    set {_uniqueStorage()._chargeLimitPercent = newValue}
  }

  public var chargeScheduledTime: UInt32 {
    get {return _storage._chargeScheduledTime}
    set {_uniqueStorage()._chargeScheduledTime = newValue}
  }

  public var scheduledCharge: Mobilegateway_Protos_ScheduledChargeState {
    get {return _storage._scheduledCharge}
    set {_uniqueStorage()._scheduledCharge = newValue}
  }

  public var scheduledChargeUnavailable: Mobilegateway_Protos_ScheduledChargeUnavailableState {
    get {return _storage._scheduledChargeUnavailable}
    set {_uniqueStorage()._scheduledChargeUnavailable = newValue}
  }

  public var portPower: Double {
    get {return _storage._portPower}
    set {_uniqueStorage()._portPower = newValue}
  }

  public var acOutletUnavailableReason: Mobilegateway_Protos_AcOutletUnavailableReason {
    get {return _storage._acOutletUnavailableReason}
    set {_uniqueStorage()._acOutletUnavailableReason = newValue}
  }

  public var dischargeCommand: Mobilegateway_Protos_MobileDischargingCommand {
    get {return _storage._dischargeCommand}
    set {_uniqueStorage()._dischargeCommand = newValue}
  }

  public var dischargeSoeLimit: UInt32 {
    get {return _storage._dischargeSoeLimit}
    set {_uniqueStorage()._dischargeSoeLimit = newValue}
  }

  public var dischargeTargetSoe: UInt32 {
    get {return _storage._dischargeTargetSoe}
    set {_uniqueStorage()._dischargeTargetSoe = newValue}
  }

  public var dischargeEnergy: Double {
    get {return _storage._dischargeEnergy}
    set {_uniqueStorage()._dischargeEnergy = newValue}
  }

  public var activeSessionAcCurrentLimit: UInt32 {
    get {return _storage._activeSessionAcCurrentLimit}
    set {_uniqueStorage()._activeSessionAcCurrentLimit = newValue}
  }

  public var energyAcCurrentLimit: UInt32 {
    get {return _storage._energyAcCurrentLimit}
    set {_uniqueStorage()._energyAcCurrentLimit = newValue}
  }

  public var eaPncStatus: Mobilegateway_Protos_EaPncStatus {
    get {return _storage._eaPncStatus}
    set {_uniqueStorage()._eaPncStatus = newValue}
  }

  public var chargingSessionRestartAllowed: Mobilegateway_Protos_ChargingSessionRestartAllowed {
    get {return _storage._chargingSessionRestartAllowed}
    set {_uniqueStorage()._chargingSessionRestartAllowed = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_Location: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latitude: Double = 0

  public var longitude: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_Gps: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var location: Mobilegateway_Protos_Location {
    get {return _location ?? Mobilegateway_Protos_Location()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  public var elevation: Int32 = 0

  public var positionTime: UInt64 = 0

  public var headingPrecise: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _location: Mobilegateway_Protos_Location? = nil
}

public struct Mobilegateway_Protos_SoftwareUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var versionAvailable: String = String()

  public var installDurationMinutes: UInt32 = 0

  public var percentComplete: UInt32 = 0

  public var state: Mobilegateway_Protos_UpdateState = .unknown

  public var versionAvailableRaw: UInt32 = 0

  public var updateAvailable: Mobilegateway_Protos_UpdateAvailability = .unknown

  public var scheduledStartTimeSec: UInt64 = 0

  public var downloadStatus: Mobilegateway_Protos_SoftwareDownloadStatus = .unknown

  public var downloadInterface: Mobilegateway_Protos_SoftwareDownloadInterface = .unknown

  public var tcuDownloadStatus: Mobilegateway_Protos_TcuDownloadStatus = .tcuSoftwareDownloadStatusUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_AlarmState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Mobilegateway_Protos_AlarmStatus = .unknown

  public var mode: Mobilegateway_Protos_AlarmMode = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SeatClimateState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var driverHeatBackrestZone1: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatBackrestZone3: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatCushionZone2: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatCushionZone4: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverVentBackrest: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverVentCushion: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatBackrestZone1: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatBackrestZone3: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatCushionZone2: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatCushionZone4: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerVentBackrest: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerVentCushion: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatLeft: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatCenter: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatRight: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_HvacState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var power: Mobilegateway_Protos_HvacPower {
    get {return _storage._power}
    set {_uniqueStorage()._power = newValue}
  }

  public var defrost: Mobilegateway_Protos_DefrostState {
    get {return _storage._defrost}
    set {_uniqueStorage()._defrost = newValue}
  }

  public var preconditionStatus: Mobilegateway_Protos_HvacPreconditionStatus {
    get {return _storage._preconditionStatus}
    set {_uniqueStorage()._preconditionStatus = newValue}
  }

  public var keepClimateStatus: Mobilegateway_Protos_KeepClimateStatus {
    get {return _storage._keepClimateStatus}
    set {_uniqueStorage()._keepClimateStatus = newValue}
  }

  /// KeepClimateCondition keep_climate_condition = ???; 
  public var maxAcStatus: Mobilegateway_Protos_MaxACState {
    get {return _storage._maxAcStatus}
    set {_uniqueStorage()._maxAcStatus = newValue}
  }

  public var seats: Mobilegateway_Protos_SeatClimateState {
    get {return _storage._seats ?? Mobilegateway_Protos_SeatClimateState()}
    set {_uniqueStorage()._seats = newValue}
  }
  /// Returns true if `seats` has been explicitly set.
  public var hasSeats: Bool {return _storage._seats != nil}
  /// Clears the value of `seats`. Subsequent reads from it will return its default value.
  public mutating func clearSeats() {_uniqueStorage()._seats = nil}

  public var syncSet: Mobilegateway_Protos_SyncSet {
    get {return _storage._syncSet}
    set {_uniqueStorage()._syncSet = newValue}
  }

  public var rearWindowHeatingStatus: Mobilegateway_Protos_RearWindowHeatingStatus {
    get {return _storage._rearWindowHeatingStatus}
    set {_uniqueStorage()._rearWindowHeatingStatus = newValue}
  }

  public var steeringHeater: Mobilegateway_Protos_SteeringHeaterStatus {
    get {return _storage._steeringHeater}
    set {_uniqueStorage()._steeringHeater = newValue}
  }

  public var steeringHeaterLevel: Mobilegateway_Protos_SteeringWheelHeaterLevel {
    get {return _storage._steeringHeaterLevel}
    set {_uniqueStorage()._steeringHeaterLevel = newValue}
  }

  public var frontLeftSetTemperature: Double {
    get {return _storage._frontLeftSetTemperature}
    set {_uniqueStorage()._frontLeftSetTemperature = newValue}
  }

  public var hvacLimited: Mobilegateway_Protos_HvacLimited {
    get {return _storage._hvacLimited}
    set {_uniqueStorage()._hvacLimited = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Set of pending requests from API? 
public struct Mobilegateway_Protos_MobileAppReqState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var alarmSetRequest: Mobilegateway_Protos_AlarmMode = .unknown

  public var chargePortRequest: Mobilegateway_Protos_DoorState = .unknown

  public var frunkCargoRequest: Mobilegateway_Protos_DoorState = .unknown

  /// That's right, the horn is a door. 
  public var hornRequest: Mobilegateway_Protos_DoorState = .unknown

  public var hvacDefrost: Mobilegateway_Protos_DefrostState = .unknown

  public var hvacPrecondition: Mobilegateway_Protos_HvacPower = .unknown

  public var lightRequest: Mobilegateway_Protos_LightAction = .unknown

  public var panicRequest: Mobilegateway_Protos_PanicState = .panicAlarmUnknown

  public var sharedTripRequest: Mobilegateway_Protos_SharedTripState = .sharedTripUnknown

  public var trunkCargoRequest: Mobilegateway_Protos_DoorState = .unknown

  public var vehicleUnlockRequest: Mobilegateway_Protos_LockState = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_TcuInternetState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lteType: Mobilegateway_Protos_LteType = .unknown

  public var lteStatus: Mobilegateway_Protos_InternetStatus = .unknown

  public var wifiStatus: Mobilegateway_Protos_InternetStatus = .unknown

  public var lteRssi: Int32 {
    get {return _lteRssi ?? 0}
    set {_lteRssi = newValue}
  }
  /// Returns true if `lteRssi` has been explicitly set.
  public var hasLteRssi: Bool {return self._lteRssi != nil}
  /// Clears the value of `lteRssi`. Subsequent reads from it will return its default value.
  public mutating func clearLteRssi() {self._lteRssi = nil}

  public var wifiRssi: Int32 {
    get {return _wifiRssi ?? 0}
    set {_wifiRssi = newValue}
  }
  /// Returns true if `wifiRssi` has been explicitly set.
  public var hasWifiRssi: Bool {return self._wifiRssi != nil}
  /// Clears the value of `wifiRssi`. Subsequent reads from it will return its default value.
  public mutating func clearWifiRssi() {self._wifiRssi = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lteRssi: Int32? = nil
  fileprivate var _wifiRssi: Int32? = nil
}

public struct Mobilegateway_Protos_FaultState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mpbFaultStatus: Mobilegateway_Protos_MpbFaultStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_Notifications: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var powertrainMessage: Mobilegateway_Protos_PowertrainMessage = .unknown

  public var powertrainNotifyStatus: Mobilegateway_Protos_PowertrainNotifyStatus = .powertrainNotifyUnknown

  public var chargingGeneralStatus: Mobilegateway_Protos_GeneralChargeStatus = .generalChargeUnknown

  public var batteryChargeStatus: Mobilegateway_Protos_GeneralChargeStatus = .generalChargeUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_MultiplexValues: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SentryState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enablementState: Mobilegateway_Protos_EnablementState = .unknown

  public var threatLevel: Mobilegateway_Protos_SentryThreat = .levelUnknown

  public var multiplexValues: Mobilegateway_Protos_MultiplexValues {
    get {return _multiplexValues ?? Mobilegateway_Protos_MultiplexValues()}
    set {_multiplexValues = newValue}
  }
  /// Returns true if `multiplexValues` has been explicitly set.
  public var hasMultiplexValues: Bool {return self._multiplexValues != nil}
  /// Clears the value of `multiplexValues`. Subsequent reads from it will return its default value.
  public mutating func clearMultiplexValues() {self._multiplexValues = nil}

  public var usbDriveStatus: Mobilegateway_Protos_SentryUsbDriveStatus = .unknownSentryUsbDriveStatus

  public var enhancedDeterrenceState: Mobilegateway_Protos_EnhancedDeterrenceState = .unknown

  public var rangeCostPerDay: UInt32 = 0

  public var remoteAlarmState: Mobilegateway_Protos_SentryRemoteAlarmState = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _multiplexValues: Mobilegateway_Protos_MultiplexValues? = nil
}

public struct Mobilegateway_Protos_VehicleState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var battery: Mobilegateway_Protos_BatteryState {
    get {return _storage._battery ?? Mobilegateway_Protos_BatteryState()}
    set {_uniqueStorage()._battery = newValue}
  }
  /// Returns true if `battery` has been explicitly set.
  public var hasBattery: Bool {return _storage._battery != nil}
  /// Clears the value of `battery`. Subsequent reads from it will return its default value.
  public mutating func clearBattery() {_uniqueStorage()._battery = nil}

  public var power: Mobilegateway_Protos_PowerState {
    get {return _storage._power}
    set {_uniqueStorage()._power = newValue}
  }

  public var cabin: Mobilegateway_Protos_CabinState {
    get {return _storage._cabin ?? Mobilegateway_Protos_CabinState()}
    set {_uniqueStorage()._cabin = newValue}
  }
  /// Returns true if `cabin` has been explicitly set.
  public var hasCabin: Bool {return _storage._cabin != nil}
  /// Clears the value of `cabin`. Subsequent reads from it will return its default value.
  public mutating func clearCabin() {_uniqueStorage()._cabin = nil}

  public var body: Mobilegateway_Protos_BodyState {
    get {return _storage._body ?? Mobilegateway_Protos_BodyState()}
    set {_uniqueStorage()._body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  public var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  public mutating func clearBody() {_uniqueStorage()._body = nil}

  public var lastUpdatedMs: UInt64 {
    get {return _storage._lastUpdatedMs}
    set {_uniqueStorage()._lastUpdatedMs = newValue}
  }

  public var chassis: Mobilegateway_Protos_ChassisState {
    get {return _storage._chassis ?? Mobilegateway_Protos_ChassisState()}
    set {_uniqueStorage()._chassis = newValue}
  }
  /// Returns true if `chassis` has been explicitly set.
  public var hasChassis: Bool {return _storage._chassis != nil}
  /// Clears the value of `chassis`. Subsequent reads from it will return its default value.
  public mutating func clearChassis() {_uniqueStorage()._chassis = nil}

  public var charging: Mobilegateway_Protos_ChargingState {
    get {return _storage._charging ?? Mobilegateway_Protos_ChargingState()}
    set {_uniqueStorage()._charging = newValue}
  }
  /// Returns true if `charging` has been explicitly set.
  public var hasCharging: Bool {return _storage._charging != nil}
  /// Clears the value of `charging`. Subsequent reads from it will return its default value.
  public mutating func clearCharging() {_uniqueStorage()._charging = nil}

  public var gps: Mobilegateway_Protos_Gps {
    get {return _storage._gps ?? Mobilegateway_Protos_Gps()}
    set {_uniqueStorage()._gps = newValue}
  }
  /// Returns true if `gps` has been explicitly set.
  public var hasGps: Bool {return _storage._gps != nil}
  /// Clears the value of `gps`. Subsequent reads from it will return its default value.
  public mutating func clearGps() {_uniqueStorage()._gps = nil}

  public var softwareUpdate: Mobilegateway_Protos_SoftwareUpdate {
    get {return _storage._softwareUpdate ?? Mobilegateway_Protos_SoftwareUpdate()}
    set {_uniqueStorage()._softwareUpdate = newValue}
  }
  /// Returns true if `softwareUpdate` has been explicitly set.
  public var hasSoftwareUpdate: Bool {return _storage._softwareUpdate != nil}
  /// Clears the value of `softwareUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearSoftwareUpdate() {_uniqueStorage()._softwareUpdate = nil}

  public var alarm: Mobilegateway_Protos_AlarmState {
    get {return _storage._alarm ?? Mobilegateway_Protos_AlarmState()}
    set {_uniqueStorage()._alarm = newValue}
  }
  /// Returns true if `alarm` has been explicitly set.
  public var hasAlarm: Bool {return _storage._alarm != nil}
  /// Clears the value of `alarm`. Subsequent reads from it will return its default value.
  public mutating func clearAlarm() {_uniqueStorage()._alarm = nil}

  public var cloudConnection: Mobilegateway_Protos_CloudConnectionState {
    get {return _storage._cloudConnection}
    set {_uniqueStorage()._cloudConnection = newValue}
  }

  public var keylessDriving: Mobilegateway_Protos_KeylessDrivingState {
    get {return _storage._keylessDriving}
    set {_uniqueStorage()._keylessDriving = newValue}
  }

  public var hvac: Mobilegateway_Protos_HvacState {
    get {return _storage._hvac ?? Mobilegateway_Protos_HvacState()}
    set {_uniqueStorage()._hvac = newValue}
  }
  /// Returns true if `hvac` has been explicitly set.
  public var hasHvac: Bool {return _storage._hvac != nil}
  /// Clears the value of `hvac`. Subsequent reads from it will return its default value.
  public mutating func clearHvac() {_uniqueStorage()._hvac = nil}

  public var driveMode: Mobilegateway_Protos_DriveMode {
    get {return _storage._driveMode}
    set {_uniqueStorage()._driveMode = newValue}
  }

  public var privacyMode: Mobilegateway_Protos_PrivacyMode {
    get {return _storage._privacyMode}
    set {_uniqueStorage()._privacyMode = newValue}
  }

  public var gearPosition: Mobilegateway_Protos_GearPosition {
    get {return _storage._gearPosition}
    set {_uniqueStorage()._gearPosition = newValue}
  }

  public var mobileAppRequest: Mobilegateway_Protos_MobileAppReqState {
    get {return _storage._mobileAppRequest ?? Mobilegateway_Protos_MobileAppReqState()}
    set {_uniqueStorage()._mobileAppRequest = newValue}
  }
  /// Returns true if `mobileAppRequest` has been explicitly set.
  public var hasMobileAppRequest: Bool {return _storage._mobileAppRequest != nil}
  /// Clears the value of `mobileAppRequest`. Subsequent reads from it will return its default value.
  public mutating func clearMobileAppRequest() {_uniqueStorage()._mobileAppRequest = nil}

  public var tcu: Mobilegateway_Protos_TcuState {
    get {return _storage._tcu}
    set {_uniqueStorage()._tcu = newValue}
  }

  public var tcuInternet: Mobilegateway_Protos_TcuInternetState {
    get {return _storage._tcuInternet ?? Mobilegateway_Protos_TcuInternetState()}
    set {_uniqueStorage()._tcuInternet = newValue}
  }
  /// Returns true if `tcuInternet` has been explicitly set.
  public var hasTcuInternet: Bool {return _storage._tcuInternet != nil}
  /// Clears the value of `tcuInternet`. Subsequent reads from it will return its default value.
  public mutating func clearTcuInternet() {_uniqueStorage()._tcuInternet = nil}

  public var sentryState: Mobilegateway_Protos_SentryState {
    get {return _storage._sentryState ?? Mobilegateway_Protos_SentryState()}
    set {_uniqueStorage()._sentryState = newValue}
  }
  /// Returns true if `sentryState` has been explicitly set.
  public var hasSentryState: Bool {return _storage._sentryState != nil}
  /// Clears the value of `sentryState`. Subsequent reads from it will return its default value.
  public mutating func clearSentryState() {_uniqueStorage()._sentryState = nil}

  public var faultState: Mobilegateway_Protos_FaultState {
    get {return _storage._faultState ?? Mobilegateway_Protos_FaultState()}
    set {_uniqueStorage()._faultState = newValue}
  }
  /// Returns true if `faultState` has been explicitly set.
  public var hasFaultState: Bool {return _storage._faultState != nil}
  /// Clears the value of `faultState`. Subsequent reads from it will return its default value.
  public mutating func clearFaultState() {_uniqueStorage()._faultState = nil}

  public var notifications: Mobilegateway_Protos_Notifications {
    get {return _storage._notifications ?? Mobilegateway_Protos_Notifications()}
    set {_uniqueStorage()._notifications = newValue}
  }
  /// Returns true if `notifications` has been explicitly set.
  public var hasNotifications: Bool {return _storage._notifications != nil}
  /// Clears the value of `notifications`. Subsequent reads from it will return its default value.
  public mutating func clearNotifications() {_uniqueStorage()._notifications = nil}

  public var lowPowerModeStatus: Mobilegateway_Protos_LowPowerModeStatus {
    get {return _storage._lowPowerModeStatus}
    set {_uniqueStorage()._lowPowerModeStatus = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Mobilegateway_Protos_Vehicle: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var accessLevel: Mobilegateway_Protos_AccessLevel = .unknown

  public var config: Mobilegateway_Protos_VehicleConfig {
    get {return _config ?? Mobilegateway_Protos_VehicleConfig()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {self._config = nil}

  public var state: Mobilegateway_Protos_VehicleState {
    get {return _state ?? Mobilegateway_Protos_VehicleState()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _config: Mobilegateway_Protos_VehicleConfig? = nil
  fileprivate var _state: Mobilegateway_Protos_VehicleState? = nil
}

public struct Mobilegateway_Protos_ApplySoftwareUpdateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ApplySoftwareUpdateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_CancelScheduledUpdateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_CancelScheduledUpdateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ChargeControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: Mobilegateway_Protos_ChargeAction = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ChargeControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ControlChargePortRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var closureState: Mobilegateway_Protos_DoorState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_ControlChargePortResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DoorLocksControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var doorLocation: [Int32] = []

  public var lockState: Mobilegateway_Protos_LockState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DoorLocksControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_FrontCargoControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var closureState: Mobilegateway_Protos_DoorState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_FrontCargoControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DocumentInfoUnknown: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timestamp: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DocumentInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Mobilegateway_Protos_DocumentType = .unknown

  public var version: String = String()

  public var description_p: String = String()

  public var unknown: Mobilegateway_Protos_DocumentInfoUnknown {
    get {return _unknown ?? Mobilegateway_Protos_DocumentInfoUnknown()}
    set {_unknown = newValue}
  }
  /// Returns true if `unknown` has been explicitly set.
  public var hasUnknown: Bool {return self._unknown != nil}
  /// Clears the value of `unknown`. Subsequent reads from it will return its default value.
  public mutating func clearUnknown() {self._unknown = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _unknown: Mobilegateway_Protos_DocumentInfoUnknown? = nil
}

public struct Mobilegateway_Protos_GetDocumentInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: String = String()

  public var documentType: Mobilegateway_Protos_DocumentType = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_GetDocumentInfoResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var info: Mobilegateway_Protos_DocumentInfo {
    get {return _info ?? Mobilegateway_Protos_DocumentInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Mobilegateway_Protos_DocumentInfo? = nil
}

public struct Mobilegateway_Protos_GetVehicleStateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_GetVehicleStateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var state: Mobilegateway_Protos_VehicleState {
    get {return _state ?? Mobilegateway_Protos_VehicleState()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _state: Mobilegateway_Protos_VehicleState? = nil
}

public struct Mobilegateway_Protos_HonkHornRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_HonkHornResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_HvacDefrostControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var hvacDefrost: Mobilegateway_Protos_DefrostState = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_HvacDefrostControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_LightsControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: Mobilegateway_Protos_LightAction = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_LightsControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_RearCargoControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var closureState: Mobilegateway_Protos_DoorState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_RearCargoControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SecurityAlarmControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mode: Mobilegateway_Protos_AlarmMode = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SecurityAlarmControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetCabinTemperatureRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var temperature: Double = 0

  public var state: Mobilegateway_Protos_HvacPower = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetCabinTemperatureResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetChargeLimitRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var limitPercent: UInt32 = 0

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetChargeLimitResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_WakeupVehicleRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_WakeupVehicleResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetBatteryPreconRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var status: Mobilegateway_Protos_BatteryPreconStatus = .batteryPreconUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetBatteryPreconResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetDischargeSoeLimitRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dischargeSoeLimit: UInt32 = 0

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetDischargeSoeLimitResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DischargeControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dischargeCommand: Mobilegateway_Protos_DischargeCommand = .dischargeUnknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_DischargeControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_AllWindowControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: Mobilegateway_Protos_WindowSwitchState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_AllWindowControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SeatClimateControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var driverHeatBackrestZone1: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatBackrestZone3: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatCushionZone2: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverHeatCushionZone4: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverVentBackrest: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var driverVentCushion: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatBackrestZone1: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatBackrestZone3: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatCushionZone2: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerHeatCushionZone4: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerVentBackrest: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var frontPassengerVentCushion: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatLeft: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatCenter: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var rearPassengerHeatRight: Mobilegateway_Protos_SeatClimateMode = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SeatClimateControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetMaxACRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: Mobilegateway_Protos_MaxACState = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetMaxACResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SteeringWheelHeaterRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var level: Mobilegateway_Protos_SteeringWheelHeaterLevel = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SteeringWheelHeaterResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetCreatureComfortModeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mode: Mobilegateway_Protos_CreatureComfortMode = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_SetCreatureComfortModeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_WelcomeControlRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: Mobilegateway_Protos_WelcomeAction = .unknown

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_WelcomeControlResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mobilegateway.protos"

extension Mobilegateway_Protos_AccessLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCESS_LEVEL_UNKNOWN"),
    1: .same(proto: "ACCESS_LEVEL_PREDELIVERY_OWNER"),
    2: .same(proto: "ACCESS_LEVEL_PRIMARY_OWNER"),
    3: .same(proto: "ACCESS_LEVEL_SECONDARY_OWNER"),
    4: .same(proto: "ACCESS_LEVEL_DELIVERY_TEAM"),
    5: .same(proto: "ACCESS_LEVEL_SERVICE_TEAM"),
    6: .same(proto: "ACCESS_LEVEL_CUSTOMER_SUPPORT_TEAM"),
    7: .same(proto: "ACCESS_LEVEL_READ_ONLY"),
  ]
}

extension Mobilegateway_Protos_Model: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODEL_UNKNOWN"),
    1: .same(proto: "MODEL_AIR"),
    2: .same(proto: "MODEL_GRAVITY"),
  ]
}

extension Mobilegateway_Protos_ModelVariant: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODEL_VARIANT_UNKNOWN"),
    1: .same(proto: "MODEL_VARIANT_DREAM_EDITION"),
    2: .same(proto: "MODEL_VARIANT_GRAND_TOURING"),
    3: .same(proto: "MODEL_VARIANT_TOURING"),
    4: .same(proto: "MODEL_VARIANT_PURE"),
    5: .same(proto: "MODEL_VARIANT_SAPPHIRE"),
    6: .same(proto: "MODEL_VARIANT_HYPER"),
    7: .same(proto: "MODEL_VARIANT_EXECUTIVE"),
  ]
}

extension Mobilegateway_Protos_PaintColor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAINT_COLOR_UNKNOWN"),
    1: .same(proto: "PAINT_COLOR_EUREKA_GOLD"),
    2: .same(proto: "PAINT_COLOR_STELLAR_WHITE"),
    3: .same(proto: "PAINT_COLOR_INFINITE_BLACK"),
    4: .same(proto: "PAINT_COLOR_COSMOS_SILVER"),
    5: .same(proto: "PAINT_COLOR_QUANTUM_GREY"),
    6: .same(proto: "PAINT_COLOR_ZENITH_RED"),
    7: .same(proto: "PAINT_COLOR_FATHOM_BLUE"),
    8: .same(proto: "PAINT_COLOR_CUSTOM"),
    9: .same(proto: "PAINT_COLOR_SAPPHIRE_BLUE"),
    10: .same(proto: "PAINT_COLOR_LUNAR_TITANIUM"),
    11: .same(proto: "PAINT_COLOR_AURORA_GREEN"),
    12: .same(proto: "PAINT_COLOR_SUPERNOVA_BRONZE"),
    13: .same(proto: "PAINT_COLOR_GLOSS_BLACK_PRIMARY"),
  ]
}

extension Mobilegateway_Protos_Look: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOOK_UNKNOWN"),
    1: .same(proto: "LOOK_PLATINUM"),
    2: .same(proto: "LOOK_STEALTH"),
    3: .same(proto: "LOOK_SAPPHIRE"),
    4: .same(proto: "LOOK_SURFRIDER"),
    5: .same(proto: "LOOK_BASE"),
  ]
}

extension Mobilegateway_Protos_Wheels: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WHEELS_UNKNOWN"),
    1: .same(proto: "WHEELS_DREAM"),
    2: .same(proto: "WHEELS_BLADE"),
    3: .same(proto: "WHEELS_LITE"),
    4: .same(proto: "WHEELS_RANGE"),
    5: .same(proto: "WHEELS_SPORT"),
    6: .same(proto: "WHEELS_SPORT_STEALTH"),
    7: .same(proto: "WHEELS_BLADE_GRAPHITE"),
    8: .same(proto: "WHEELS_LITE_STEALTH"),
    9: .same(proto: "WHEELS_SPORT_LUSTER"),
    10: .same(proto: "WHEELS_SAPPHIRE_PACKAGE"),
    11: .same(proto: "WHEELS_RANGE_STEALTH"),
  ]
}

extension Mobilegateway_Protos_SubscriptionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUBSCRIPTION_STATUS_UNKNOWN"),
    1: .same(proto: "SUBSCRIPTION_STATUS_CURRENT"),
  ]
}

extension Mobilegateway_Protos_ChargingAccountStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGING_ACCOUNT_STATUS_UNKNOWN"),
    1: .same(proto: "CHARGING_ACCOUNT_STATUS_DISABLED"),
    2: .same(proto: "CHARGING_ACCOUNT_STATUS_ENROLLED"),
  ]
}

extension Mobilegateway_Protos_ChargingVendor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGING_VENDOR_UNKNOWN"),
    1: .same(proto: "CHARGING_VENDOR_ELECTRIFY_AMERICA"),
    3: .same(proto: "CHARGING_VENDOR_BOSCH"),
  ]
}

extension Mobilegateway_Protos_Edition: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EDITION_UNKNOWN"),
    1: .same(proto: "EDITION_PERFORMANCE"),
    2: .same(proto: "EDITION_RANGE"),
    3: .same(proto: "EDITION_STANDARD"),
  ]
}

extension Mobilegateway_Protos_BatteryType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BATTERY_TYPE_UNKNOWN"),
    1: .same(proto: "BATTERY_TYPE_01"),
    2: .same(proto: "BATTERY_TYPE_02"),
    3: .same(proto: "BATTERY_TYPE_03"),
    4: .same(proto: "BATTERY_TYPE_04"),
    5: .same(proto: "BATTERY_TYPE_05"),
    6: .same(proto: "BATTERY_TYPE_06"),
    7: .same(proto: "BATTERY_TYPE_07"),
    8: .same(proto: "BATTERY_TYPE_08"),
    9: .same(proto: "BATTERY_TYPE_09"),
    25: .same(proto: "BATTERY_TYPE_25"),
  ]
}

extension Mobilegateway_Protos_Interior: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTERIOR_UNKNOWN"),
    1: .same(proto: "INTERIOR_SANTA_CRUZ"),
    2: .same(proto: "INTERIOR_TAHOE"),
    3: .same(proto: "INTERIOR_MOJAVE"),
    5: .same(proto: "INTERIOR_SANTA_MONICA"),
  ]
}

extension Mobilegateway_Protos_StrutType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STRUT_TYPE_UNKNOWN"),
    1: .same(proto: "STRUT_TYPE_GAS"),
    2: .same(proto: "STRUT_TYPE_POWER"),
  ]
}

extension Mobilegateway_Protos_RoofType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROOF_TYPE_UNKNOWN"),
    1: .same(proto: "ROOF_TYPE_GLASS_CANOPY"),
    2: .same(proto: "ROOF_TYPE_METAL"),
    3: .same(proto: "ROOF_TYPE_CARBON_FIBER"),
  ]
}

extension Mobilegateway_Protos_FrontSeatsVentilationAvailability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FRONT_SEATS_VENTILATION_UNKNOWN"),
    1: .same(proto: "FRONT_SEATS_VENTILATION_UNAVAILABLE"),
    2: .same(proto: "FRONT_SEATS_VENTILATION_AVAILABLE"),
  ]
}

extension Mobilegateway_Protos_FrontSeatsHeatingAvailability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FRONT_SEATS_HEATING_UNKNOWN"),
    1: .same(proto: "FRONT_SEATS_HEATING_UNAVAILABLE"),
    2: .same(proto: "FRONT_SEATS_HEATING_AVAILABLE"),
  ]
}

extension Mobilegateway_Protos_SecondRowHeatedSeatsAvailability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SECOND_ROW_HEATED_SEATS_UNKNOWN"),
    1: .same(proto: "SECOND_ROW_HEATED_SEATS_UNAVAILABLE"),
    2: .same(proto: "SECOND_ROW_HEATED_SEATS_AVAILABLE"),
  ]
}

extension Mobilegateway_Protos_HeatedSteeringWheelAvailability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEATED_STEERING_WHEEL_UNKNOWN"),
    1: .same(proto: "HEATED_STEERING_WHEEL_UNAVAILABLE"),
    2: .same(proto: "HEATED_STEERING_WHEEL_AVAILABLE"),
  ]
}

extension Mobilegateway_Protos_RearSeatConfig: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REAR_SEAT_CONFIG_UNKNOWN"),
    1: .same(proto: "REAR_SEAT_CONFIG_5_SEAT"),
    2: .same(proto: "REAR_SEAT_CONFIG_6_SEAT"),
    3: .same(proto: "REAR_SEAT_CONFIG_7_SEAT"),
  ]
}

extension Mobilegateway_Protos_WarningState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WARNING_UNKNOWN"),
    1: .same(proto: "WARNING_OFF"),
    2: .same(proto: "WARNING_ON"),
  ]
}

extension Mobilegateway_Protos_BatteryPreconStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BATTERY_PRECON_UNKNOWN"),
    1: .same(proto: "BATTERY_PRECON_OFF"),
    2: .same(proto: "BATTERY_PRECON_ON"),
    3: .same(proto: "BATTERY_PRECON_UNAVAILABLE"),
  ]
}

extension Mobilegateway_Protos_BatteryCellType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BATTERY_CELL_TYPE_UNKNOWN"),
    1: .same(proto: "BATTERY_CELL_TYPE_LG_M48"),
    2: .same(proto: "BATTERY_CELL_TYPE_SDI_50G"),
    3: .same(proto: "BATTERY_CELL_TYPE_PANA_2170M"),
    4: .same(proto: "BATTERY_CELL_TYPE_SDI_50GV2"),
  ]
}

extension Mobilegateway_Protos_BatteryPackType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BATTERY_PACK_TYPE_UNKNOWN"),
    1: .same(proto: "BATTERY_PACK_TYPE_AIR_22"),
    2: .same(proto: "BATTERY_PACK_TYPE_AIR_18"),
    3: .same(proto: "BATTERY_PACK_TYPE_AIR_16"),
  ]
}

extension Mobilegateway_Protos_PowerState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWER_STATE_UNKNOWN"),
    1: .same(proto: "POWER_STATE_SLEEP"),
    2: .same(proto: "POWER_STATE_WINK"),
    3: .same(proto: "POWER_STATE_ACCESSORY"),
    4: .same(proto: "POWER_STATE_DRIVE"),
    5: .same(proto: "POWER_STATE_LIVE_CHARGE"),
    6: .same(proto: "POWER_STATE_SLEEP_CHARGE"),
    7: .same(proto: "POWER_STATE_LIVE_UPDATE"),
    10: .same(proto: "POWER_STATE_CLOUD_2"),
    11: .same(proto: "POWER_STATE_MONITOR"),
  ]
}

extension Mobilegateway_Protos_LockState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCK_STATE_UNKNOWN"),
    1: .same(proto: "LOCK_STATE_UNLOCKED"),
    2: .same(proto: "LOCK_STATE_LOCKED"),
  ]
}

extension Mobilegateway_Protos_DoorState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOOR_STATE_UNKNOWN"),
    1: .same(proto: "DOOR_STATE_OPEN"),
    2: .same(proto: "DOOR_STATE_CLOSED"),
    3: .same(proto: "DOOR_STATE_AJAR"),
  ]
}

extension Mobilegateway_Protos_WalkawayState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WALKAWAY_UNKNOWN"),
    2: .same(proto: "WALKAWAY_ACTIVE"),
    3: .same(proto: "WALKAWAY_DISABLE"),
  ]
}

extension Mobilegateway_Protos_AccessRequest: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCESS_REQUEST_UNKNOWN"),
    1: .same(proto: "ACCESS_REQUEST_ACTIVE"),
    2: .same(proto: "ACCESS_REQUEST_PASSIVE"),
    3: .same(proto: "ACCESS_REQUEST_PASSIVE_DRIVER"),
    4: .same(proto: "ACCESS_REQUEST_PASSIVE_TEMP_DISABLED"),
  ]
}

extension Mobilegateway_Protos_KeyfobBatteryStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEYFOB_BATTERY_STATUS_UNKNOWN"),
    1: .same(proto: "KEYFOB_BATTERY_STATUS_LOW"),
    2: .same(proto: "KEYFOB_BATTERY_STATUS_SUFFICIENT"),
  ]
}

extension Mobilegateway_Protos_AllWindowPosition: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALL_WINDOW_POSITION_UNKNOWN"),
    1: .same(proto: "ALL_WINDOW_POSITION_IDLE"),
    2: .same(proto: "ALL_WINDOW_POSITION_OPEN"),
    3: .same(proto: "ALL_WINDOW_POSITION_CLOSED"),
    4: .same(proto: "ALL_WINDOW_POSITION_ERROR"),
  ]
}

extension Mobilegateway_Protos_WindowPositionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WINDOW_POSITION_STATUS_UNKNOWN"),
    1: .same(proto: "WINDOW_POSITION_STATUS_FULLY_CLOSED"),
    2: .same(proto: "WINDOW_POSITION_STATUS_ABOVE_SHORT_DROP_POSITION"),
    3: .same(proto: "WINDOW_POSITION_STATUS_SHORT_DROP_POSITION"),
    4: .same(proto: "WINDOW_POSITION_STATUS_BELOW_SHORT_DROP_POSITION"),
    5: .same(proto: "WINDOW_POSITION_STATUS_FULLY_OPEN"),
    6: .same(proto: "WINDOW_POSITION_STATUS_UNKNOWN_DE_INITIALIZED"),
    7: .same(proto: "WINDOW_POSITION_STATUS_ATP_REVERSE_POSITION"),
    9: .same(proto: "WINDOW_POSITION_STATUS_HARD_STOP_UP"),
    10: .same(proto: "WINDOW_POSITION_STATUS_HARD_STOP_DOWN"),
    11: .same(proto: "WINDOW_POSITION_STATUS_LONG_DROP_POSITION"),
    12: .same(proto: "WINDOW_POSITION_STATUS_VENT_DROP_POSITION"),
    13: .same(proto: "WINDOW_POSITION_STATUS_BETWEEN_FULLY_CLOSED_AND_SHORT_DROP_DOWN"),
    14: .same(proto: "WINDOW_POSITION_STATUS_BETWEEN_SHORT_DROP_DOWN_AND_FULLY_OPEN"),
  ]
}

extension Mobilegateway_Protos_MirrorFoldState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MIRROR_FOLD_STATE_UNKNOWN"),
    1: .same(proto: "MIRROR_FOLD_STATE_IDLE"),
    2: .same(proto: "MIRROR_FOLD_STATE_FOLDED_OUT"),
    3: .same(proto: "MIRROR_FOLD_STATE_FOLDED_IN"),
  ]
}

extension Mobilegateway_Protos_LivingObjectDetectionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_UNKNOWN"),
    1: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_DISABLED"),
    2: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_NOT_ACTIVE"),
    3: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_LEVEL_1_WARNING"),
    4: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_LEVEL_2_WARNING"),
    5: .same(proto: "LIVING_OBJECT_DETECTION_STATUS_LEVEL_3_WARNING"),
  ]
}

extension Mobilegateway_Protos_LightState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIGHT_STATE_REALLY_UNKNOWN"),
    1: .same(proto: "LIGHT_STATE_OFF"),
    2: .same(proto: "LIGHT_STATE_ON"),
    3: .same(proto: "LIGHT_STATE_UNKNOWN"),
  ]
}

extension Mobilegateway_Protos_LightAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIGHT_ACTION_UNKNOWN"),
    1: .same(proto: "LIGHT_ACTION_FLASH"),
    2: .same(proto: "LIGHT_ACTION_ON"),
    3: .same(proto: "LIGHT_ACTION_OFF"),
    4: .same(proto: "LIGHT_ACTION_HAZARD_ON"),
    5: .same(proto: "LIGHT_ACTION_HAZARD_OFF"),
  ]
}

extension Mobilegateway_Protos_WelcomeAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WELCOME_ACTION_UNKNOWN"),
    1: .same(proto: "WELCOME_ACTION_UNLOCK"),
    2: .same(proto: "WELCOME_ACTION_DEPARTURE"),
    3: .same(proto: "WELCOME_ACTION_LIGHTS"),
    4: .same(proto: "WELCOME_ACTION_BLINKERS"),
  ]
}

extension Mobilegateway_Protos_TirePressureSensorDefective: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIRE_PRESSURE_SENSOR_DEFECTIVE_UNKNOWN"),
    1: .same(proto: "TIRE_PRESSURE_SENSOR_DEFECTIVE_OFF"),
    2: .same(proto: "TIRE_PRESSURE_SENSOR_DEFECTIVE_ON"),
  ]
}

extension Mobilegateway_Protos_ChargeState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGE_STATE_UNKNOWN"),
    1: .same(proto: "CHARGE_STATE_NOT_CONNECTED"),
    2: .same(proto: "CHARGE_STATE_CABLE_CONNECTED"),
    3: .same(proto: "CHARGE_STATE_ESTABLISHING_SESSION"),
    4: .same(proto: "CHARGE_STATE_AUTHORIZING_PNC"),
    5: .same(proto: "CHARGE_STATE_AUTHORIZING_EXTERNAL"),
    6: .same(proto: "CHARGE_STATE_AUTHORIZED"),
    7: .same(proto: "CHARGE_STATE_CHARGER_PREPARATION"),
    8: .same(proto: "CHARGE_STATE_CHARGING"),
    9: .same(proto: "CHARGE_STATE_CHARGING_END_OK"),
    10: .same(proto: "CHARGE_STATE_CHARGING_STOPPED"),
    11: .same(proto: "CHARGE_STATE_EVSE_MALFUNCTION"),
    19: .same(proto: "CHARGE_STATE_DISCHARGING"),
    20: .same(proto: "CHARGE_STATE_DISCHARGING_COMPLETED"),
    21: .same(proto: "CHARGE_STATE_DISCHARGING_STOPPED"),
    22: .same(proto: "CHARGE_STATE_DISCHARGING_FAULT"),
    23: .same(proto: "CHARGE_STATE_DISCHARGING_UNAVAILABLE"),
  ]
}

extension Mobilegateway_Protos_ScheduledChargeState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCHEDULED_CHARGE_STATE_UNKNOWN"),
    1: .same(proto: "SCHEDULED_CHARGE_STATE_IDLE"),
    2: .same(proto: "SCHEDULED_CHARGE_STATE_SCHEDULED_TO_CHARGE"),
    3: .same(proto: "SCHEDULED_CHARGE_STATE_REQUEST_TO_CHARGE"),
  ]
}

extension Mobilegateway_Protos_ScheduledChargeUnavailableState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCHEDULED_CHARGE_UNAVAILABLE_UNKNOWN"),
    1: .same(proto: "SCHEDULED_CHARGE_UNAVAILABLE_NO_REQUEST"),
  ]
}

extension Mobilegateway_Protos_EnergyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENERGY_TYPE_UNKNOWN"),
    1: .same(proto: "ENERGY_TYPE_AC"),
    2: .same(proto: "ENERGY_TYPE_DC"),
    4: .same(proto: "ENERGY_TYPE_V2V"),
  ]
}

extension Mobilegateway_Protos_MobileDischargingCommand: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOBILE_DISCHARGING_COMMAND_UNKNOWN"),
    1: .same(proto: "MOBILE_DISCHARGING_COMMAND_START_DISCHARGING"),
  ]
}

extension Mobilegateway_Protos_ChargingSessionRestartAllowed: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGING_SESSION_RESTART_ALLOWED_STATUS_UNKNOWN"),
    1: .same(proto: "CHARGING_SESSION_RESTART_ALLOWED_STATUS_IDLE"),
    2: .same(proto: "CHARGING_SESSION_RESTART_ALLOWED_STATUS_NOT_ALLOWED"),
    3: .same(proto: "CHARGING_SESSION_RESTART_ALLOWED_STATUS_ALLOWED"),
  ]
}

extension Mobilegateway_Protos_EaPncStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EA_PNC_STATUS_UNKNOWN"),
    1: .same(proto: "EA_PNC_STATUS_IDLE"),
    2: .same(proto: "EA_PNC_STATUS_ENABLE"),
    3: .same(proto: "EA_PNC_STATUS_DISABLE"),
    4: .same(proto: "EA_PNC_STATUS_NO_NOTIFICATION"),
  ]
}

extension Mobilegateway_Protos_AcOutletUnavailableReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_UNKNOWN"),
    1: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_NONE"),
    2: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_WARNING_FAULT"),
    3: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_CRITICAL_FAULT"),
    4: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_CHARGING"),
    5: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_LOW_VEH_RANGE"),
    6: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_WARNING_FAULT_CAMP"),
    7: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_CRITICAL_FAULT_CAMP"),
    8: .same(proto: "AC_OUTLET_UNAVAILABLE_REASON_LOW_VEH_RANGE_CAMP"),
  ]
}

extension Mobilegateway_Protos_UpdateState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UPDATE_STATE_UNKNOWN"),
    1: .same(proto: "UPDATE_STATE_IN_PROGRESS"),
    2: .same(proto: "UPDATE_STATE_SUCCESS"),
    3: .same(proto: "UPDATE_STATE_FAILED"),
    4: .same(proto: "UPDATE_STATE_WAITING_ON_BCM"),
    5: .same(proto: "UPDATE_FAILED_DRIVE_ALLOWED"),
    6: .same(proto: "UPDATE_FAILED_NO_ACTION"),
    7: .same(proto: "UPDATE_SUCCESS_WITH_WARNINGS"),
    8: .same(proto: "UPDATE_NOTSTARTED_WITH_WARNINGS"),
  ]
}

extension Mobilegateway_Protos_UpdateAvailability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UPDATE_AVAILABILITY_UNKNOWN"),
    1: .same(proto: "UPDATE_AVAILABLE"),
  ]
}

extension Mobilegateway_Protos_TcuDownloadStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_UNKNOWN"),
    1: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_IDLE"),
    2: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_DOWNLOADING"),
    3: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_PAUSED"),
    4: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_COMPLETE"),
    5: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_FAILED"),
    6: .same(proto: "TCU_SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_CANCELED"),
  ]
}

extension Mobilegateway_Protos_SoftwareDownloadStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_UNKNOWN"),
    1: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_IDLE"),
    2: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_DOWNLOADING"),
    3: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_PAUSED"),
    4: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_COMPLETE"),
    5: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_FAILED"),
    6: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_DOWNLOAD_CANCELED"),
    7: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_WAITING_ON_WIFI"),
    8: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_WAITING_ON_LTE"),
    9: .same(proto: "SOFTWARE_DOWNLOAD_STATUS_PAUSED_WAITING_ON_WIFI"),
  ]
}

extension Mobilegateway_Protos_SoftwareDownloadInterface: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOFTWARE_DOWNLOAD_INTERFACE_UNKNOWN"),
    1: .same(proto: "SOFTWARE_DOWNLOAD_INTERFACE_IDLE"),
    2: .same(proto: "SOFTWARE_DOWNLOAD_INTERFACE_WIFI_ONLY"),
    3: .same(proto: "SOFTWARE_DOWNLOAD_INTERFACE_LTE"),
    4: .same(proto: "SOFTWARE_DOWNLOAD_INTERFACE_ANY"),
  ]
}

extension Mobilegateway_Protos_AlarmStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALARM_STATUS_UNKNOWN"),
    1: .same(proto: "ALARM_STATUS_DISARMED"),
    2: .same(proto: "ALARM_STATUS_ARMED"),
  ]
}

extension Mobilegateway_Protos_AlarmMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALARM_MODE_UNKNOWN"),
    1: .same(proto: "ALARM_MODE_OFF"),
    2: .same(proto: "ALARM_MODE_ON"),
    3: .same(proto: "ALARM_MODE_SILENT"),
  ]
}

extension Mobilegateway_Protos_CloudConnectionState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLOUD_CONNECTION_UNKNOWN"),
    1: .same(proto: "CLOUD_CONNECTION_CONNECTED"),
    2: .same(proto: "CLOUD_CONNECTION_DISCONNECTED"),
  ]
}

extension Mobilegateway_Protos_KeylessDrivingState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEYLESS_DRIVING_UNKNOWN"),
    1: .same(proto: "KEYLESS_DRIVING_ON"),
    2: .same(proto: "KEYLESS_DRIVING_OFF"),
  ]
}

extension Mobilegateway_Protos_HvacPower: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HVAC_POWER_UNKNOWN"),
    1: .same(proto: "HVAC_ON"),
    2: .same(proto: "HVAC_OFF"),
    3: .same(proto: "HVAC_PRECONDITION"),
    6: .same(proto: "HVAC_KEEP_TEMP"),
  ]
}

extension Mobilegateway_Protos_DefrostState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFROST_STATE_UNKNOWN"),
    1: .same(proto: "DEFROST_ON"),
    2: .same(proto: "DEFROST_OFF"),
  ]
}

extension Mobilegateway_Protos_HvacPreconditionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HVAC_PRECONDITION_STATUS_UNKNOWN"),
    1: .same(proto: "HVAC_PRECONDITION_STATUS_STILL_ACTIVE"),
    2: .same(proto: "HVAC_PRECONDITION_STATUS_TEMP_REACHED"),
    3: .same(proto: "HVAC_PRECONDITION_STATUS_TIMEOUT"),
    4: .same(proto: "HVAC_PRECONDITION_STATUS_USER_INPUT"),
    6: .same(proto: "HVAC_PRECONDITION_STATUS_NOT_ACTIVE_PRECONDITION"),
  ]
}

extension Mobilegateway_Protos_KeepClimateStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEEP_CLIMATE_STATUS_UNKNOWN"),
    1: .same(proto: "KEEP_CLIMATE_STATUS_INACTIVE"),
    2: .same(proto: "KEEP_CLIMATE_STATUS_ENABLED"),
    3: .same(proto: "KEEP_CLIMATE_STATUS_CANCELED"),
    4: .same(proto: "KEEP_CLIMATE_STATUS_PET_MODE_ON"),
  ]
}

extension Mobilegateway_Protos_KeepClimateCondition: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEEP_CLIMATE_CONDITION_UNKNOWN"),
  ]
}

extension Mobilegateway_Protos_SeatClimateMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEAT_CLIMATE_MODE_UNKNOWN"),
    2: .same(proto: "SEAT_CLIMATE_MODE_OFF"),
    3: .same(proto: "SEAT_CLIMATE_MODE_LOW"),
    4: .same(proto: "SEAT_CLIMATE_MODE_MEDIUM"),
    5: .same(proto: "SEAT_CLIMATE_MODE_HIGH"),
  ]
}

extension Mobilegateway_Protos_SteeringHeaterStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STEERING_HEATER_STATUS_UNKNOWN"),
    1: .same(proto: "STEERING_HEATER_STATUS_OFF"),
    2: .same(proto: "STEERING_HEATER_STATUS_ON"),
  ]
}

extension Mobilegateway_Protos_SyncSet: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SYNC_SET_UNKNOWN"),
    1: .same(proto: "SYNC_SET_OFF"),
    2: .same(proto: "SYNC_SET_ON"),
  ]
}

extension Mobilegateway_Protos_RearWindowHeatingStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REAR_WINDOW_HEATING_STATUS_UNKNOWN"),
    1: .same(proto: "REAR_WINDOW_HEATING_STATUS_OFF"),
    2: .same(proto: "REAR_WINDOW_HEATING_STATUS_ON"),
    3: .same(proto: "REAR_WINDOW_HEATING_STATUS_OFF_LOST_COMM_WITH_DCM"),
    4: .same(proto: "REAR_WINDOW_HEATING_STATUS_ON_LOST_COMM_WITH_DCM"),
  ]
}

extension Mobilegateway_Protos_HvacLimited: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HVAC_LIMITED_UNKNOWN"),
    1: .same(proto: "HVAC_LIMITED_OFF"),
    2: .same(proto: "HVAC_LIMITED_ON"),
  ]
}

extension Mobilegateway_Protos_DriveMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DRIVE_MODE_UNKNOWN"),
    1: .same(proto: "DRIVE_MODE_COMFORT"),
    2: .same(proto: "DRIVE_MODE_SWIFT"),
    3: .same(proto: "DRIVE_MODE_WINTER"),
    4: .same(proto: "DRIVE_MODE_VALET"),
    5: .same(proto: "DRIVE_MODE_SPORT_PLUS"),
    6: .same(proto: "DRIVE_MODE_RESERVED_1"),
    7: .same(proto: "DRIVE_MODE_RESERVED_2"),
    8: .same(proto: "DRIVE_MODE_SERVICE"),
    9: .same(proto: "DRIVE_MODE_LAUNCH"),
    10: .same(proto: "DRIVE_MODE_FACTORY"),
    11: .same(proto: "DRIVE_MODE_DEV1"),
    12: .same(proto: "DRIVE_MODE_DEV2"),
    13: .same(proto: "DRIVE_MODE_TRANSPORT"),
    14: .same(proto: "DRIVE_MODE_SHOWROOM"),
    15: .same(proto: "DRIVE_MODE_TOW"),
    16: .same(proto: "DRIVE_MODE_TEST_DRIVE"),
    17: .same(proto: "DRIVE_MODE_RESERVED_3"),
  ]
}

extension Mobilegateway_Protos_PrivacyMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVACY_MODE_UNKNOWN"),
    1: .same(proto: "PRIVACY_MODE_CONNECTIVITY_ENABLED"),
    2: .same(proto: "PRIVACY_MODE_CONNECTIVITY_DISABLED"),
  ]
}

extension Mobilegateway_Protos_GearPosition: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GEAR_UNKNOWN"),
    1: .same(proto: "GEAR_PARK"),
    2: .same(proto: "GEAR_REVERSE"),
    3: .same(proto: "GEAR_NEUTRAL"),
    4: .same(proto: "GEAR_DRIVE"),
  ]
}

extension Mobilegateway_Protos_SharedTripState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SHARED_TRIP_UNKNOWN"),
    1: .same(proto: "SHARED_TRIP_AVAILABLE"),
    3: .same(proto: "SHARED_TRIP_PROFILE_UPDATED"),
  ]
}

extension Mobilegateway_Protos_PanicState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PANIC_ALARM_UNKNOWN"),
    1: .same(proto: "PANIC_ALARM_ON"),
  ]
}

extension Mobilegateway_Protos_TcuState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TCU_UNKNOWN"),
    1: .same(proto: "TCU_SLEEP"),
    2: .same(proto: "TCU_DROWSY"),
    4: .same(proto: "TCU_FULL"),
    5: .same(proto: "TCU_FACTORY"),
    6: .same(proto: "TCU_POWER"),
    7: .same(proto: "TCU_OFF"),
  ]
}

extension Mobilegateway_Protos_LteType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LTE_TYPE_UNKNOWN"),
    1: .same(proto: "LTE_TYPE_3G"),
    2: .same(proto: "LTE_TYPE_4G"),
  ]
}

extension Mobilegateway_Protos_InternetStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTERNET_STATUS_UNKNOWN"),
    1: .same(proto: "INTERNET_DISCONNECTED"),
    2: .same(proto: "INTERNET_CONNECTED"),
  ]
}

extension Mobilegateway_Protos_MpbFaultStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MPB_FAULT_STATUS_UNKNOWN"),
    1: .same(proto: "MPB_FAULT_STATUS_NORMAL"),
    3: .same(proto: "MPB_FAULT_STATUS_CRITICAL"),
  ]
}

extension Mobilegateway_Protos_PowertrainMessage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWERTRAIN_MESSAGE_UNKNOWN"),
    1: .same(proto: "POWERTRAIN_MESSAGE_BLANK_NO_MESSAGE"),
  ]
}

extension Mobilegateway_Protos_PowertrainNotifyStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWERTRAIN_NOTIFY_UNKNOWN"),
    1: .same(proto: "POWERTRAIN_NOTIFY_NONE"),
  ]
}

extension Mobilegateway_Protos_GeneralChargeStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERAL_CHARGE_UNKNOWN"),
    1: .same(proto: "GENERAL_CHARGE_DEFAULT"),
    4: .same(proto: "GENERAL_CHARGE_DERATED_CHARGING_POWER"),
    5: .same(proto: "GENERAL_CHARGE_SAVETIME_TEMP_PRECON"),
  ]
}

extension Mobilegateway_Protos_EnablementState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENABLEMENT_STATE_UNKNOWN"),
    3: .same(proto: "ENABLEMENT_STATE_IDLE"),
  ]
}

extension Mobilegateway_Protos_SentryThreat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENTRY_THREAT_LEVEL_UNKNOWN"),
    1: .same(proto: "SENTRY_THREAT_IDLE"),
    2: .same(proto: "SENTRY_THREAT_LEVEL_ONE"),
    3: .same(proto: "SENTRY_THREAT_LEVEL_TWO"),
    4: .same(proto: "SENTRY_THREAT_LEVEL_THREE"),
    5: .same(proto: "SENTRY_THREAT_NO_THREAT"),
  ]
}

extension Mobilegateway_Protos_SentryUsbDriveStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_SENTRY_USB_DRIVE_STATUS"),
    1: .same(proto: "SENTRY_USB_DRIVE_IDLE"),
    2: .same(proto: "SENTRY_USB_DRIVE_CONNECTED"),
    3: .same(proto: "SENTRY_USB_DRIVE_NOT_CONNECTED"),
  ]
}

extension Mobilegateway_Protos_EnhancedDeterrenceState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENHANCED_DETERRENCE_STATE_UNKNOWN"),
    1: .same(proto: "ENHANCED_DETERRENCE_ENABLED"),
    2: .same(proto: "ENHANCED_DETERRENCE_DISABLED"),
    3: .same(proto: "ENHANCED_DETERRENCE_IDLE"),
  ]
}

extension Mobilegateway_Protos_SentryRemoteAlarmState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENTRY_REMOTE_ALARM_STATE_UNKNOWN"),
    1: .same(proto: "SENTRY_REMOTE_ALARM_IDLE"),
    2: .same(proto: "SENTRY_REMOTE_ALARM_ON"),
    3: .same(proto: "SENTRY_REMOTE_ALARM_OFF"),
  ]
}

extension Mobilegateway_Protos_LowPowerModeStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOW_POWER_MODE_STATUS_UNKNOWN"),
    1: .same(proto: "LOW_POWER_MODE_STATUS_INACTIVE"),
    2: .same(proto: "LOW_POWER_MODE_STATUS_ACTIVE"),
  ]
}

extension Mobilegateway_Protos_ChargeAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARGE_ACTION_UNKNOWN"),
    1: .same(proto: "CHARGE_ACTION_START"),
    2: .same(proto: "CHARGE_ACTION_STOP"),
  ]
}

extension Mobilegateway_Protos_DocumentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOCUMENT_TYPE_UNKNOWN"),
    1: .same(proto: "DOCUMENT_TYPE_RELEASE_NOTES_PRE"),
    2: .same(proto: "DOCUMENT_TYPE_RELEASE_NOTES_POST"),
    3: .same(proto: "DOCUMENT_TYPE_OWNERS_MANUAL"),
  ]
}

extension Mobilegateway_Protos_DischargeCommand: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISCHARGE_UNKNOWN"),
  ]
}

extension Mobilegateway_Protos_WindowSwitchState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WINDOW_SWITCH_STATE_UNKNOWN"),
    1: .same(proto: "WINDOW_SWITCH_STATE_IDLE"),
    2: .same(proto: "WINDOW_SWITCH_STATE_AUTO_UP_ALL"),
    3: .same(proto: "WINDOW_SWITCH_STATE_VENT_ALL"),
    4: .same(proto: "WINDOW_SWITCH_STATE_AUTO_DOWN_ALL"),
    5: .same(proto: "WINDOW_SWITCH_STATE_ERROR"),
  ]
}

extension Mobilegateway_Protos_MaxACState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAX_AC_STATE_UNKNOWN"),
    1: .same(proto: "MAX_AC_STATE_OFF"),
    2: .same(proto: "MAX_AC_STATE_ON"),
  ]
}

extension Mobilegateway_Protos_SteeringWheelHeaterLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STEERING_WHEEL_HEATER_LEVEL_UNKNOWN"),
    1: .same(proto: "STEERING_WHEEL_HEATER_LEVEL_OFF"),
    2: .same(proto: "STEERING_WHEEL_HEATER_LEVEL_1"),
    3: .same(proto: "STEERING_WHEEL_HEATER_LEVEL_2"),
    4: .same(proto: "STEERING_WHEEL_HEATER_LEVEL_3"),
  ]
}

extension Mobilegateway_Protos_CreatureComfortMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATURE_COMFORT_MODE_UNKNOWN"),
    1: .same(proto: "CREATURE_COMFORT_MODE_OFF"),
    2: .same(proto: "CREATURE_COMFORT_MODE_ON"),
  ]
}

extension Mobilegateway_Protos_ChargingSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargingSubscription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "expiration_date"),
    3: .standard(proto: "start_date"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.expirationDate) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.startDate) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.expirationDate != 0 {
      try visitor.visitSingularUInt64Field(value: self.expirationDate, fieldNumber: 2)
    }
    if self.startDate != 0 {
      try visitor.visitSingularUInt64Field(value: self.startDate, fieldNumber: 3)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChargingSubscription, rhs: Mobilegateway_Protos_ChargingSubscription) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.expirationDate != rhs.expirationDate {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ChargingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargingAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ema_id"),
    2: .standard(proto: "vehicle_id"),
    3: .same(proto: "status"),
    4: .standard(proto: "created_at_epoch_sec"),
    5: .standard(proto: "expiry_on_epoch_sec"),
    6: .standard(proto: "vendor_name"),
    7: .standard(proto: "valid_payment_method"),
    8: .standard(proto: "plan_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emaID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.createdAtEpochSec) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.expiryOnEpochSec) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.vendorName) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.validPaymentMethod) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.planID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emaID.isEmpty {
      try visitor.visitSingularStringField(value: self.emaID, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.createdAtEpochSec != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAtEpochSec, fieldNumber: 4)
    }
    if self.expiryOnEpochSec != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiryOnEpochSec, fieldNumber: 5)
    }
    if self.vendorName != .unknown {
      try visitor.visitSingularEnumField(value: self.vendorName, fieldNumber: 6)
    }
    if self.validPaymentMethod != false {
      try visitor.visitSingularBoolField(value: self.validPaymentMethod, fieldNumber: 7)
    }
    if !self.planID.isEmpty {
      try visitor.visitSingularStringField(value: self.planID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChargingAccount, rhs: Mobilegateway_Protos_ChargingAccount) -> Bool {
    if lhs.emaID != rhs.emaID {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.createdAtEpochSec != rhs.createdAtEpochSec {return false}
    if lhs.expiryOnEpochSec != rhs.expiryOnEpochSec {return false}
    if lhs.vendorName != rhs.vendorName {return false}
    if lhs.validPaymentMethod != rhs.validPaymentMethod {return false}
    if lhs.planID != rhs.planID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SpecialIdentifiers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpecialIdentifiers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "door_plate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.doorPlate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.doorPlate.isEmpty {
      try visitor.visitSingularStringField(value: self.doorPlate, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SpecialIdentifiers, rhs: Mobilegateway_Protos_SpecialIdentifiers) -> Bool {
    if lhs.doorPlate != rhs.doorPlate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Reservation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reservation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.date) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.date != 0 {
      try visitor.visitSingularUInt64Field(value: self.date, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Reservation, rhs: Mobilegateway_Protos_Reservation) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_VehicleConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vin"),
    2: .same(proto: "model"),
    3: .same(proto: "variant"),
    5: .same(proto: "nickname"),
    6: .standard(proto: "paint_color"),
    7: .standard(proto: "ema_id"),
    8: .same(proto: "wheels"),
    9: .standard(proto: "ea_subscription"),
    10: .standard(proto: "charging_accounts"),
    11: .standard(proto: "country_code"),
    12: .standard(proto: "region_code"),
    13: .same(proto: "edition"),
    14: .same(proto: "battery"),
    15: .same(proto: "interior"),
    16: .standard(proto: "special_identifiers"),
    17: .same(proto: "look"),
    18: .standard(proto: "exterior_color_code"),
    19: .standard(proto: "interior_color_code"),
    20: .standard(proto: "frunk_strut"),
    21: .same(proto: "reservation"),
    22: .same(proto: "roof"),
    23: .standard(proto: "front_seats_heating"),
    24: .standard(proto: "front_seats_ventilation"),
    25: .standard(proto: "second_row_heated_seats"),
    26: .standard(proto: "rear_seat_config"),
    27: .standard(proto: "heated_steering_wheel"),
  ]

  fileprivate class _StorageClass {
    var _vin: String = String()
    var _model: Mobilegateway_Protos_Model = .unknown
    var _variant: Mobilegateway_Protos_ModelVariant = .unknown
    var _nickname: String = String()
    var _paintColor: Mobilegateway_Protos_PaintColor = .unknown
    var _emaID: String = String()
    var _wheels: Mobilegateway_Protos_Wheels = .unknown
    var _eaSubscription: Mobilegateway_Protos_ChargingSubscription? = nil
    var _chargingAccounts: [Mobilegateway_Protos_ChargingAccount] = []
    var _countryCode: String = String()
    var _regionCode: String = String()
    var _edition: Mobilegateway_Protos_Edition = .unknown
    var _battery: Mobilegateway_Protos_BatteryType = .unknown
    var _interior: Mobilegateway_Protos_Interior = .unknown
    var _specialIdentifiers: Mobilegateway_Protos_SpecialIdentifiers? = nil
    var _look: Mobilegateway_Protos_Look = .unknown
    var _exteriorColorCode: String = String()
    var _interiorColorCode: String = String()
    var _frunkStrut: Mobilegateway_Protos_StrutType = .unknown
    var _reservation: Mobilegateway_Protos_Reservation? = nil
    var _roof: Mobilegateway_Protos_RoofType = .unknown
    var _frontSeatsHeating: Mobilegateway_Protos_FrontSeatsHeatingAvailability = .frontSeatsHeatingUnknown
    var _frontSeatsVentilation: Mobilegateway_Protos_FrontSeatsVentilationAvailability = .frontSeatsVentilationUnknown
    var _secondRowHeatedSeats: Mobilegateway_Protos_SecondRowHeatedSeatsAvailability = .secondRowHeatedSeatsUnknown
    var _rearSeatConfig: Mobilegateway_Protos_RearSeatConfig = .unknown
    var _heatedSteeringWheel: Mobilegateway_Protos_HeatedSteeringWheelAvailability = .heatedSteeringWheelUnknown

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _vin = source._vin
      _model = source._model
      _variant = source._variant
      _nickname = source._nickname
      _paintColor = source._paintColor
      _emaID = source._emaID
      _wheels = source._wheels
      _eaSubscription = source._eaSubscription
      _chargingAccounts = source._chargingAccounts
      _countryCode = source._countryCode
      _regionCode = source._regionCode
      _edition = source._edition
      _battery = source._battery
      _interior = source._interior
      _specialIdentifiers = source._specialIdentifiers
      _look = source._look
      _exteriorColorCode = source._exteriorColorCode
      _interiorColorCode = source._interiorColorCode
      _frunkStrut = source._frunkStrut
      _reservation = source._reservation
      _roof = source._roof
      _frontSeatsHeating = source._frontSeatsHeating
      _frontSeatsVentilation = source._frontSeatsVentilation
      _secondRowHeatedSeats = source._secondRowHeatedSeats
      _rearSeatConfig = source._rearSeatConfig
      _heatedSteeringWheel = source._heatedSteeringWheel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._vin) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._model) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._variant) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._paintColor) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._emaID) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._wheels) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._eaSubscription) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._chargingAccounts) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._countryCode) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._regionCode) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._edition) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._battery) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._interior) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._specialIdentifiers) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._look) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._exteriorColorCode) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._interiorColorCode) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._frunkStrut) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._reservation) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._roof) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._frontSeatsHeating) }()
        case 24: try { try decoder.decodeSingularEnumField(value: &_storage._frontSeatsVentilation) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._secondRowHeatedSeats) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._rearSeatConfig) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._heatedSteeringWheel) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._vin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vin, fieldNumber: 1)
      }
      if _storage._model != .unknown {
        try visitor.visitSingularEnumField(value: _storage._model, fieldNumber: 2)
      }
      if _storage._variant != .unknown {
        try visitor.visitSingularEnumField(value: _storage._variant, fieldNumber: 3)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 5)
      }
      if _storage._paintColor != .unknown {
        try visitor.visitSingularEnumField(value: _storage._paintColor, fieldNumber: 6)
      }
      if !_storage._emaID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._emaID, fieldNumber: 7)
      }
      if _storage._wheels != .unknown {
        try visitor.visitSingularEnumField(value: _storage._wheels, fieldNumber: 8)
      }
      try { if let v = _storage._eaSubscription {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._chargingAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chargingAccounts, fieldNumber: 10)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 11)
      }
      if !_storage._regionCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._regionCode, fieldNumber: 12)
      }
      if _storage._edition != .unknown {
        try visitor.visitSingularEnumField(value: _storage._edition, fieldNumber: 13)
      }
      if _storage._battery != .unknown {
        try visitor.visitSingularEnumField(value: _storage._battery, fieldNumber: 14)
      }
      if _storage._interior != .unknown {
        try visitor.visitSingularEnumField(value: _storage._interior, fieldNumber: 15)
      }
      try { if let v = _storage._specialIdentifiers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if _storage._look != .unknown {
        try visitor.visitSingularEnumField(value: _storage._look, fieldNumber: 17)
      }
      if !_storage._exteriorColorCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exteriorColorCode, fieldNumber: 18)
      }
      if !_storage._interiorColorCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interiorColorCode, fieldNumber: 19)
      }
      if _storage._frunkStrut != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frunkStrut, fieldNumber: 20)
      }
      try { if let v = _storage._reservation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._roof != .unknown {
        try visitor.visitSingularEnumField(value: _storage._roof, fieldNumber: 22)
      }
      if _storage._frontSeatsHeating != .frontSeatsHeatingUnknown {
        try visitor.visitSingularEnumField(value: _storage._frontSeatsHeating, fieldNumber: 23)
      }
      if _storage._frontSeatsVentilation != .frontSeatsVentilationUnknown {
        try visitor.visitSingularEnumField(value: _storage._frontSeatsVentilation, fieldNumber: 24)
      }
      if _storage._secondRowHeatedSeats != .secondRowHeatedSeatsUnknown {
        try visitor.visitSingularEnumField(value: _storage._secondRowHeatedSeats, fieldNumber: 25)
      }
      if _storage._rearSeatConfig != .unknown {
        try visitor.visitSingularEnumField(value: _storage._rearSeatConfig, fieldNumber: 26)
      }
      if _storage._heatedSteeringWheel != .heatedSteeringWheelUnknown {
        try visitor.visitSingularEnumField(value: _storage._heatedSteeringWheel, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_VehicleConfig, rhs: Mobilegateway_Protos_VehicleConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._vin != rhs_storage._vin {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._variant != rhs_storage._variant {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._paintColor != rhs_storage._paintColor {return false}
        if _storage._emaID != rhs_storage._emaID {return false}
        if _storage._wheels != rhs_storage._wheels {return false}
        if _storage._eaSubscription != rhs_storage._eaSubscription {return false}
        if _storage._chargingAccounts != rhs_storage._chargingAccounts {return false}
        if _storage._countryCode != rhs_storage._countryCode {return false}
        if _storage._regionCode != rhs_storage._regionCode {return false}
        if _storage._edition != rhs_storage._edition {return false}
        if _storage._battery != rhs_storage._battery {return false}
        if _storage._interior != rhs_storage._interior {return false}
        if _storage._specialIdentifiers != rhs_storage._specialIdentifiers {return false}
        if _storage._look != rhs_storage._look {return false}
        if _storage._exteriorColorCode != rhs_storage._exteriorColorCode {return false}
        if _storage._interiorColorCode != rhs_storage._interiorColorCode {return false}
        if _storage._frunkStrut != rhs_storage._frunkStrut {return false}
        if _storage._reservation != rhs_storage._reservation {return false}
        if _storage._roof != rhs_storage._roof {return false}
        if _storage._frontSeatsHeating != rhs_storage._frontSeatsHeating {return false}
        if _storage._frontSeatsVentilation != rhs_storage._frontSeatsVentilation {return false}
        if _storage._secondRowHeatedSeats != rhs_storage._secondRowHeatedSeats {return false}
        if _storage._rearSeatConfig != rhs_storage._rearSeatConfig {return false}
        if _storage._heatedSteeringWheel != rhs_storage._heatedSteeringWheel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_BatteryState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BatteryState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remaining_range"),
    2: .standard(proto: "charge_percent"),
    3: .same(proto: "kwhr"),
    4: .standard(proto: "capacity_kwhr"),
    5: .standard(proto: "battery_health"),
    6: .standard(proto: "low_charge_level"),
    7: .standard(proto: "critical_charge_level"),
    8: .standard(proto: "unavailable_range"),
    9: .standard(proto: "preconditioning_status"),
    10: .standard(proto: "preconditioning_time_remaining"),
    11: .standard(proto: "battery_health_level"),
    13: .standard(proto: "bmu_software_version_major"),
    14: .standard(proto: "bmu_software_version_minor"),
    15: .standard(proto: "bmu_software_version_micro"),
    16: .standard(proto: "battery_cell_type"),
    17: .standard(proto: "battery_pack_type"),
    18: .standard(proto: "max_cell_temp"),
    19: .standard(proto: "min_cell_temp"),
  ]

  fileprivate class _StorageClass {
    var _remainingRange: Double = 0
    var _chargePercent: Double = 0
    var _kwhr: Double = 0
    var _capacityKwhr: Double = 0
    var _batteryHealth: Mobilegateway_Protos_WarningState = .warningUnknown
    var _lowChargeLevel: Mobilegateway_Protos_WarningState = .warningUnknown
    var _criticalChargeLevel: Mobilegateway_Protos_WarningState = .warningUnknown
    var _unavailableRange: Double = 0
    var _preconditioningStatus: Mobilegateway_Protos_BatteryPreconStatus = .batteryPreconUnknown
    var _preconditioningTimeRemaining: UInt32 = 0
    var _batteryHealthLevel: Double = 0
    var _bmuSoftwareVersionMajor: UInt32 = 0
    var _bmuSoftwareVersionMinor: UInt32 = 0
    var _bmuSoftwareVersionMicro: UInt32 = 0
    var _batteryCellType: Mobilegateway_Protos_BatteryCellType = .unknown
    var _batteryPackType: Mobilegateway_Protos_BatteryPackType = .unknown
    var _maxCellTemp: Double = 0
    var _minCellTemp: Double = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _remainingRange = source._remainingRange
      _chargePercent = source._chargePercent
      _kwhr = source._kwhr
      _capacityKwhr = source._capacityKwhr
      _batteryHealth = source._batteryHealth
      _lowChargeLevel = source._lowChargeLevel
      _criticalChargeLevel = source._criticalChargeLevel
      _unavailableRange = source._unavailableRange
      _preconditioningStatus = source._preconditioningStatus
      _preconditioningTimeRemaining = source._preconditioningTimeRemaining
      _batteryHealthLevel = source._batteryHealthLevel
      _bmuSoftwareVersionMajor = source._bmuSoftwareVersionMajor
      _bmuSoftwareVersionMinor = source._bmuSoftwareVersionMinor
      _bmuSoftwareVersionMicro = source._bmuSoftwareVersionMicro
      _batteryCellType = source._batteryCellType
      _batteryPackType = source._batteryPackType
      _maxCellTemp = source._maxCellTemp
      _minCellTemp = source._minCellTemp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._remainingRange) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._chargePercent) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._kwhr) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._capacityKwhr) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._batteryHealth) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._lowChargeLevel) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._criticalChargeLevel) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._unavailableRange) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._preconditioningStatus) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._preconditioningTimeRemaining) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._batteryHealthLevel) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._bmuSoftwareVersionMajor) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._bmuSoftwareVersionMinor) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._bmuSoftwareVersionMicro) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._batteryCellType) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._batteryPackType) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._maxCellTemp) }()
        case 19: try { try decoder.decodeSingularDoubleField(value: &_storage._minCellTemp) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._remainingRange.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._remainingRange, fieldNumber: 1)
      }
      if _storage._chargePercent.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargePercent, fieldNumber: 2)
      }
      if _storage._kwhr.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._kwhr, fieldNumber: 3)
      }
      if _storage._capacityKwhr.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._capacityKwhr, fieldNumber: 4)
      }
      if _storage._batteryHealth != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._batteryHealth, fieldNumber: 5)
      }
      if _storage._lowChargeLevel != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._lowChargeLevel, fieldNumber: 6)
      }
      if _storage._criticalChargeLevel != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._criticalChargeLevel, fieldNumber: 7)
      }
      if _storage._unavailableRange.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._unavailableRange, fieldNumber: 8)
      }
      if _storage._preconditioningStatus != .batteryPreconUnknown {
        try visitor.visitSingularEnumField(value: _storage._preconditioningStatus, fieldNumber: 9)
      }
      if _storage._preconditioningTimeRemaining != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._preconditioningTimeRemaining, fieldNumber: 10)
      }
      if _storage._batteryHealthLevel.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._batteryHealthLevel, fieldNumber: 11)
      }
      if _storage._bmuSoftwareVersionMajor != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._bmuSoftwareVersionMajor, fieldNumber: 13)
      }
      if _storage._bmuSoftwareVersionMinor != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._bmuSoftwareVersionMinor, fieldNumber: 14)
      }
      if _storage._bmuSoftwareVersionMicro != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._bmuSoftwareVersionMicro, fieldNumber: 15)
      }
      if _storage._batteryCellType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._batteryCellType, fieldNumber: 16)
      }
      if _storage._batteryPackType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._batteryPackType, fieldNumber: 17)
      }
      if _storage._maxCellTemp.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxCellTemp, fieldNumber: 18)
      }
      if _storage._minCellTemp.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minCellTemp, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_BatteryState, rhs: Mobilegateway_Protos_BatteryState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._remainingRange != rhs_storage._remainingRange {return false}
        if _storage._chargePercent != rhs_storage._chargePercent {return false}
        if _storage._kwhr != rhs_storage._kwhr {return false}
        if _storage._capacityKwhr != rhs_storage._capacityKwhr {return false}
        if _storage._batteryHealth != rhs_storage._batteryHealth {return false}
        if _storage._lowChargeLevel != rhs_storage._lowChargeLevel {return false}
        if _storage._criticalChargeLevel != rhs_storage._criticalChargeLevel {return false}
        if _storage._unavailableRange != rhs_storage._unavailableRange {return false}
        if _storage._preconditioningStatus != rhs_storage._preconditioningStatus {return false}
        if _storage._preconditioningTimeRemaining != rhs_storage._preconditioningTimeRemaining {return false}
        if _storage._batteryHealthLevel != rhs_storage._batteryHealthLevel {return false}
        if _storage._bmuSoftwareVersionMajor != rhs_storage._bmuSoftwareVersionMajor {return false}
        if _storage._bmuSoftwareVersionMinor != rhs_storage._bmuSoftwareVersionMinor {return false}
        if _storage._bmuSoftwareVersionMicro != rhs_storage._bmuSoftwareVersionMicro {return false}
        if _storage._batteryCellType != rhs_storage._batteryCellType {return false}
        if _storage._batteryPackType != rhs_storage._batteryPackType {return false}
        if _storage._maxCellTemp != rhs_storage._maxCellTemp {return false}
        if _storage._minCellTemp != rhs_storage._minCellTemp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_CabinState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CabinState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interior_temp"),
    2: .standard(proto: "exterior_temp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.interiorTemp) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.exteriorTemp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.interiorTemp.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.interiorTemp, fieldNumber: 1)
    }
    if self.exteriorTemp.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.exteriorTemp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_CabinState, rhs: Mobilegateway_Protos_CabinState) -> Bool {
    if lhs.interiorTemp != rhs.interiorTemp {return false}
    if lhs.exteriorTemp != rhs.exteriorTemp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_WindowPositionState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WindowPositionState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "left_front"),
    2: .standard(proto: "left_rear"),
    3: .standard(proto: "right_front"),
    4: .standard(proto: "right_rear"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.leftFront) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.leftRear) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.rightFront) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.rightRear) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.leftFront != .unknown {
      try visitor.visitSingularEnumField(value: self.leftFront, fieldNumber: 1)
    }
    if self.leftRear != .unknown {
      try visitor.visitSingularEnumField(value: self.leftRear, fieldNumber: 2)
    }
    if self.rightFront != .unknown {
      try visitor.visitSingularEnumField(value: self.rightFront, fieldNumber: 3)
    }
    if self.rightRear != .unknown {
      try visitor.visitSingularEnumField(value: self.rightRear, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_WindowPositionState, rhs: Mobilegateway_Protos_WindowPositionState) -> Bool {
    if lhs.leftFront != rhs.leftFront {return false}
    if lhs.leftRear != rhs.leftRear {return false}
    if lhs.rightFront != rhs.rightFront {return false}
    if lhs.rightRear != rhs.rightRear {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_BodyState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BodyState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "door_locks"),
    2: .standard(proto: "front_cargo"),
    3: .standard(proto: "rear_cargo"),
    4: .standard(proto: "front_left_door"),
    5: .standard(proto: "front_right_door"),
    6: .standard(proto: "rear_left_door"),
    7: .standard(proto: "rear_right_door"),
    8: .standard(proto: "charge_port"),
    9: .standard(proto: "walkaway_lock"),
    10: .standard(proto: "access_type_status"),
    11: .standard(proto: "keyfob_battery_status"),
    12: .standard(proto: "front_left_mirror_fold_state"),
    13: .standard(proto: "front_right_mirror_fold_state"),
    14: .standard(proto: "all_windows_position"),
    15: .standard(proto: "living_object_detection_status"),
    16: .standard(proto: "window_position"),
  ]

  fileprivate class _StorageClass {
    var _doorLocks: Mobilegateway_Protos_LockState = .unknown
    var _frontCargo: Mobilegateway_Protos_DoorState = .unknown
    var _rearCargo: Mobilegateway_Protos_DoorState = .unknown
    var _frontLeftDoor: Mobilegateway_Protos_DoorState = .unknown
    var _frontRightDoor: Mobilegateway_Protos_DoorState = .unknown
    var _rearLeftDoor: Mobilegateway_Protos_DoorState = .unknown
    var _rearRightDoor: Mobilegateway_Protos_DoorState = .unknown
    var _chargePort: Mobilegateway_Protos_DoorState = .unknown
    var _walkawayLock: Mobilegateway_Protos_WalkawayState = .walkawayUnknown
    var _accessTypeStatus: Mobilegateway_Protos_AccessRequest = .unknown
    var _keyfobBatteryStatus: Mobilegateway_Protos_KeyfobBatteryStatus = .unknown
    var _frontLeftMirrorFoldState: Mobilegateway_Protos_MirrorFoldState = .unknown
    var _frontRightMirrorFoldState: Mobilegateway_Protos_MirrorFoldState = .unknown
    var _allWindowsPosition: Mobilegateway_Protos_AllWindowPosition = .unknown
    var _livingObjectDetectionStatus: Mobilegateway_Protos_LivingObjectDetectionStatus = .unknown
    var _windowPosition: Mobilegateway_Protos_WindowPositionState? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _doorLocks = source._doorLocks
      _frontCargo = source._frontCargo
      _rearCargo = source._rearCargo
      _frontLeftDoor = source._frontLeftDoor
      _frontRightDoor = source._frontRightDoor
      _rearLeftDoor = source._rearLeftDoor
      _rearRightDoor = source._rearRightDoor
      _chargePort = source._chargePort
      _walkawayLock = source._walkawayLock
      _accessTypeStatus = source._accessTypeStatus
      _keyfobBatteryStatus = source._keyfobBatteryStatus
      _frontLeftMirrorFoldState = source._frontLeftMirrorFoldState
      _frontRightMirrorFoldState = source._frontRightMirrorFoldState
      _allWindowsPosition = source._allWindowsPosition
      _livingObjectDetectionStatus = source._livingObjectDetectionStatus
      _windowPosition = source._windowPosition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._doorLocks) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._frontCargo) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._rearCargo) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._frontLeftDoor) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._frontRightDoor) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._rearLeftDoor) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._rearRightDoor) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._chargePort) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._walkawayLock) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._accessTypeStatus) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._keyfobBatteryStatus) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._frontLeftMirrorFoldState) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._frontRightMirrorFoldState) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._allWindowsPosition) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._livingObjectDetectionStatus) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._windowPosition) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._doorLocks != .unknown {
        try visitor.visitSingularEnumField(value: _storage._doorLocks, fieldNumber: 1)
      }
      if _storage._frontCargo != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frontCargo, fieldNumber: 2)
      }
      if _storage._rearCargo != .unknown {
        try visitor.visitSingularEnumField(value: _storage._rearCargo, fieldNumber: 3)
      }
      if _storage._frontLeftDoor != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frontLeftDoor, fieldNumber: 4)
      }
      if _storage._frontRightDoor != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frontRightDoor, fieldNumber: 5)
      }
      if _storage._rearLeftDoor != .unknown {
        try visitor.visitSingularEnumField(value: _storage._rearLeftDoor, fieldNumber: 6)
      }
      if _storage._rearRightDoor != .unknown {
        try visitor.visitSingularEnumField(value: _storage._rearRightDoor, fieldNumber: 7)
      }
      if _storage._chargePort != .unknown {
        try visitor.visitSingularEnumField(value: _storage._chargePort, fieldNumber: 8)
      }
      if _storage._walkawayLock != .walkawayUnknown {
        try visitor.visitSingularEnumField(value: _storage._walkawayLock, fieldNumber: 9)
      }
      if _storage._accessTypeStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._accessTypeStatus, fieldNumber: 10)
      }
      if _storage._keyfobBatteryStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._keyfobBatteryStatus, fieldNumber: 11)
      }
      if _storage._frontLeftMirrorFoldState != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frontLeftMirrorFoldState, fieldNumber: 12)
      }
      if _storage._frontRightMirrorFoldState != .unknown {
        try visitor.visitSingularEnumField(value: _storage._frontRightMirrorFoldState, fieldNumber: 13)
      }
      if _storage._allWindowsPosition != .unknown {
        try visitor.visitSingularEnumField(value: _storage._allWindowsPosition, fieldNumber: 14)
      }
      if _storage._livingObjectDetectionStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._livingObjectDetectionStatus, fieldNumber: 15)
      }
      try { if let v = _storage._windowPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_BodyState, rhs: Mobilegateway_Protos_BodyState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._doorLocks != rhs_storage._doorLocks {return false}
        if _storage._frontCargo != rhs_storage._frontCargo {return false}
        if _storage._rearCargo != rhs_storage._rearCargo {return false}
        if _storage._frontLeftDoor != rhs_storage._frontLeftDoor {return false}
        if _storage._frontRightDoor != rhs_storage._frontRightDoor {return false}
        if _storage._rearLeftDoor != rhs_storage._rearLeftDoor {return false}
        if _storage._rearRightDoor != rhs_storage._rearRightDoor {return false}
        if _storage._chargePort != rhs_storage._chargePort {return false}
        if _storage._walkawayLock != rhs_storage._walkawayLock {return false}
        if _storage._accessTypeStatus != rhs_storage._accessTypeStatus {return false}
        if _storage._keyfobBatteryStatus != rhs_storage._keyfobBatteryStatus {return false}
        if _storage._frontLeftMirrorFoldState != rhs_storage._frontLeftMirrorFoldState {return false}
        if _storage._frontRightMirrorFoldState != rhs_storage._frontRightMirrorFoldState {return false}
        if _storage._allWindowsPosition != rhs_storage._allWindowsPosition {return false}
        if _storage._livingObjectDetectionStatus != rhs_storage._livingObjectDetectionStatus {return false}
        if _storage._windowPosition != rhs_storage._windowPosition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ChassisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChassisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "odometer_km"),
    2: .standard(proto: "front_left_tire_pressure_bar"),
    3: .standard(proto: "front_right_tire_pressure_bar"),
    4: .standard(proto: "rear_left_tire_pressure_bar"),
    5: .standard(proto: "rear_right_tire_pressure_bar"),
    6: .same(proto: "headlights"),
    8: .standard(proto: "hard_warn_left_front"),
    9: .standard(proto: "hard_warn_left_rear"),
    10: .standard(proto: "hard_warn_right_front"),
    11: .standard(proto: "hard_warn_right_rear"),
    12: .standard(proto: "soft_warn_left_front"),
    13: .standard(proto: "soft_warn_left_rear"),
    14: .standard(proto: "soft_warn_right_front"),
    15: .standard(proto: "soft_warn_right_rear"),
    16: .standard(proto: "software_version"),
    29: .same(proto: "speed"),
    30: .standard(proto: "sensor_defective_left_front"),
    31: .standard(proto: "sensor_defective_left_rear"),
    32: .standard(proto: "sensor_defective_right_front"),
    33: .standard(proto: "sensor_defective_right_rear"),
    34: .standard(proto: "tire_pressure_last_updated"),
  ]

  fileprivate class _StorageClass {
    var _odometerKm: Double = 0
    var _frontLeftTirePressureBar: Double = 0
    var _frontRightTirePressureBar: Double = 0
    var _rearLeftTirePressureBar: Double = 0
    var _rearRightTirePressureBar: Double = 0
    var _headlights: Mobilegateway_Protos_LightState = .reallyUnknown
    var _hardWarnLeftFront: Mobilegateway_Protos_WarningState = .warningUnknown
    var _hardWarnLeftRear: Mobilegateway_Protos_WarningState = .warningUnknown
    var _hardWarnRightFront: Mobilegateway_Protos_WarningState = .warningUnknown
    var _hardWarnRightRear: Mobilegateway_Protos_WarningState = .warningUnknown
    var _softWarnLeftFront: Mobilegateway_Protos_WarningState = .warningUnknown
    var _softWarnLeftRear: Mobilegateway_Protos_WarningState = .warningUnknown
    var _softWarnRightFront: Mobilegateway_Protos_WarningState = .warningUnknown
    var _softWarnRightRear: Mobilegateway_Protos_WarningState = .warningUnknown
    var _softwareVersion: String = String()
    var _speed: Double = 0
    var _sensorDefectiveLeftFront: Mobilegateway_Protos_TirePressureSensorDefective = .unknown
    var _sensorDefectiveLeftRear: Mobilegateway_Protos_TirePressureSensorDefective = .unknown
    var _sensorDefectiveRightFront: Mobilegateway_Protos_TirePressureSensorDefective = .unknown
    var _sensorDefectiveRightRear: Mobilegateway_Protos_TirePressureSensorDefective = .unknown
    var _tirePressureLastUpdated: UInt64 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _odometerKm = source._odometerKm
      _frontLeftTirePressureBar = source._frontLeftTirePressureBar
      _frontRightTirePressureBar = source._frontRightTirePressureBar
      _rearLeftTirePressureBar = source._rearLeftTirePressureBar
      _rearRightTirePressureBar = source._rearRightTirePressureBar
      _headlights = source._headlights
      _hardWarnLeftFront = source._hardWarnLeftFront
      _hardWarnLeftRear = source._hardWarnLeftRear
      _hardWarnRightFront = source._hardWarnRightFront
      _hardWarnRightRear = source._hardWarnRightRear
      _softWarnLeftFront = source._softWarnLeftFront
      _softWarnLeftRear = source._softWarnLeftRear
      _softWarnRightFront = source._softWarnRightFront
      _softWarnRightRear = source._softWarnRightRear
      _softwareVersion = source._softwareVersion
      _speed = source._speed
      _sensorDefectiveLeftFront = source._sensorDefectiveLeftFront
      _sensorDefectiveLeftRear = source._sensorDefectiveLeftRear
      _sensorDefectiveRightFront = source._sensorDefectiveRightFront
      _sensorDefectiveRightRear = source._sensorDefectiveRightRear
      _tirePressureLastUpdated = source._tirePressureLastUpdated
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._odometerKm) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._frontLeftTirePressureBar) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._frontRightTirePressureBar) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._rearLeftTirePressureBar) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._rearRightTirePressureBar) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._headlights) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._hardWarnLeftFront) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._hardWarnLeftRear) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._hardWarnRightFront) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._hardWarnRightRear) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._softWarnLeftFront) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._softWarnLeftRear) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._softWarnRightFront) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._softWarnRightRear) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._softwareVersion) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._speed) }()
        case 30: try { try decoder.decodeSingularEnumField(value: &_storage._sensorDefectiveLeftFront) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._sensorDefectiveLeftRear) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._sensorDefectiveRightFront) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._sensorDefectiveRightRear) }()
        case 34: try { try decoder.decodeSingularUInt64Field(value: &_storage._tirePressureLastUpdated) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._odometerKm.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._odometerKm, fieldNumber: 1)
      }
      if _storage._frontLeftTirePressureBar.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._frontLeftTirePressureBar, fieldNumber: 2)
      }
      if _storage._frontRightTirePressureBar.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._frontRightTirePressureBar, fieldNumber: 3)
      }
      if _storage._rearLeftTirePressureBar.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rearLeftTirePressureBar, fieldNumber: 4)
      }
      if _storage._rearRightTirePressureBar.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rearRightTirePressureBar, fieldNumber: 5)
      }
      if _storage._headlights != .reallyUnknown {
        try visitor.visitSingularEnumField(value: _storage._headlights, fieldNumber: 6)
      }
      if _storage._hardWarnLeftFront != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._hardWarnLeftFront, fieldNumber: 8)
      }
      if _storage._hardWarnLeftRear != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._hardWarnLeftRear, fieldNumber: 9)
      }
      if _storage._hardWarnRightFront != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._hardWarnRightFront, fieldNumber: 10)
      }
      if _storage._hardWarnRightRear != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._hardWarnRightRear, fieldNumber: 11)
      }
      if _storage._softWarnLeftFront != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._softWarnLeftFront, fieldNumber: 12)
      }
      if _storage._softWarnLeftRear != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._softWarnLeftRear, fieldNumber: 13)
      }
      if _storage._softWarnRightFront != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._softWarnRightFront, fieldNumber: 14)
      }
      if _storage._softWarnRightRear != .warningUnknown {
        try visitor.visitSingularEnumField(value: _storage._softWarnRightRear, fieldNumber: 15)
      }
      if !_storage._softwareVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._softwareVersion, fieldNumber: 16)
      }
      if _storage._speed.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speed, fieldNumber: 29)
      }
      if _storage._sensorDefectiveLeftFront != .unknown {
        try visitor.visitSingularEnumField(value: _storage._sensorDefectiveLeftFront, fieldNumber: 30)
      }
      if _storage._sensorDefectiveLeftRear != .unknown {
        try visitor.visitSingularEnumField(value: _storage._sensorDefectiveLeftRear, fieldNumber: 31)
      }
      if _storage._sensorDefectiveRightFront != .unknown {
        try visitor.visitSingularEnumField(value: _storage._sensorDefectiveRightFront, fieldNumber: 32)
      }
      if _storage._sensorDefectiveRightRear != .unknown {
        try visitor.visitSingularEnumField(value: _storage._sensorDefectiveRightRear, fieldNumber: 33)
      }
      if _storage._tirePressureLastUpdated != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._tirePressureLastUpdated, fieldNumber: 34)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChassisState, rhs: Mobilegateway_Protos_ChassisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._odometerKm != rhs_storage._odometerKm {return false}
        if _storage._frontLeftTirePressureBar != rhs_storage._frontLeftTirePressureBar {return false}
        if _storage._frontRightTirePressureBar != rhs_storage._frontRightTirePressureBar {return false}
        if _storage._rearLeftTirePressureBar != rhs_storage._rearLeftTirePressureBar {return false}
        if _storage._rearRightTirePressureBar != rhs_storage._rearRightTirePressureBar {return false}
        if _storage._headlights != rhs_storage._headlights {return false}
        if _storage._hardWarnLeftFront != rhs_storage._hardWarnLeftFront {return false}
        if _storage._hardWarnLeftRear != rhs_storage._hardWarnLeftRear {return false}
        if _storage._hardWarnRightFront != rhs_storage._hardWarnRightFront {return false}
        if _storage._hardWarnRightRear != rhs_storage._hardWarnRightRear {return false}
        if _storage._softWarnLeftFront != rhs_storage._softWarnLeftFront {return false}
        if _storage._softWarnLeftRear != rhs_storage._softWarnLeftRear {return false}
        if _storage._softWarnRightFront != rhs_storage._softWarnRightFront {return false}
        if _storage._softWarnRightRear != rhs_storage._softWarnRightRear {return false}
        if _storage._softwareVersion != rhs_storage._softwareVersion {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._sensorDefectiveLeftFront != rhs_storage._sensorDefectiveLeftFront {return false}
        if _storage._sensorDefectiveLeftRear != rhs_storage._sensorDefectiveLeftRear {return false}
        if _storage._sensorDefectiveRightFront != rhs_storage._sensorDefectiveRightFront {return false}
        if _storage._sensorDefectiveRightRear != rhs_storage._sensorDefectiveRightRear {return false}
        if _storage._tirePressureLastUpdated != rhs_storage._tirePressureLastUpdated {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ChargingState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargingState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "charge_state"),
    2: .standard(proto: "energy_type"),
    5: .standard(proto: "charge_session_mi"),
    6: .standard(proto: "charge_session_kwh"),
    7: .standard(proto: "session_minutes_remaining"),
    8: .standard(proto: "charge_limit"),
    10: .standard(proto: "cable_lock"),
    11: .standard(proto: "charge_rate_kwh_precise"),
    12: .standard(proto: "charge_rate_mph_precise"),
    13: .standard(proto: "charge_rate_miles_min_precise"),
    14: .standard(proto: "charge_limit_percent"),
    16: .standard(proto: "charge_scheduled_time"),
    17: .standard(proto: "scheduled_charge"),
    18: .standard(proto: "scheduled_charge_unavailable"),
    19: .standard(proto: "port_power"),
    22: .standard(proto: "ac_outlet_unavailable_reason"),
    24: .standard(proto: "discharge_command"),
    25: .standard(proto: "discharge_soe_limit"),
    26: .standard(proto: "discharge_target_soe"),
    27: .standard(proto: "discharge_energy"),
    29: .standard(proto: "active_session_ac_current_limit"),
    30: .standard(proto: "energy_ac_current_limit"),
    31: .standard(proto: "ea_pnc_status"),
    32: .standard(proto: "charging_session_restart_allowed"),
  ]

  fileprivate class _StorageClass {
    var _chargeState: Mobilegateway_Protos_ChargeState = .unknown
    var _energyType: Mobilegateway_Protos_EnergyType = .unknown
    var _chargeSessionMi: Double = 0
    var _chargeSessionKwh: Double = 0
    var _sessionMinutesRemaining: UInt32 = 0
    var _chargeLimit: UInt32 = 0
    var _cableLock: Mobilegateway_Protos_LockState = .unknown
    var _chargeRateKwhPrecise: Double = 0
    var _chargeRateMphPrecise: Double = 0
    var _chargeRateMilesMinPrecise: Double = 0
    var _chargeLimitPercent: Double = 0
    var _chargeScheduledTime: UInt32 = 0
    var _scheduledCharge: Mobilegateway_Protos_ScheduledChargeState = .unknown
    var _scheduledChargeUnavailable: Mobilegateway_Protos_ScheduledChargeUnavailableState = .scheduledChargeUnavailableUnknown
    var _portPower: Double = 0
    var _acOutletUnavailableReason: Mobilegateway_Protos_AcOutletUnavailableReason = .unknown
    var _dischargeCommand: Mobilegateway_Protos_MobileDischargingCommand = .unknown
    var _dischargeSoeLimit: UInt32 = 0
    var _dischargeTargetSoe: UInt32 = 0
    var _dischargeEnergy: Double = 0
    var _activeSessionAcCurrentLimit: UInt32 = 0
    var _energyAcCurrentLimit: UInt32 = 0
    var _eaPncStatus: Mobilegateway_Protos_EaPncStatus = .unknown
    var _chargingSessionRestartAllowed: Mobilegateway_Protos_ChargingSessionRestartAllowed = .statusUnknown

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _chargeState = source._chargeState
      _energyType = source._energyType
      _chargeSessionMi = source._chargeSessionMi
      _chargeSessionKwh = source._chargeSessionKwh
      _sessionMinutesRemaining = source._sessionMinutesRemaining
      _chargeLimit = source._chargeLimit
      _cableLock = source._cableLock
      _chargeRateKwhPrecise = source._chargeRateKwhPrecise
      _chargeRateMphPrecise = source._chargeRateMphPrecise
      _chargeRateMilesMinPrecise = source._chargeRateMilesMinPrecise
      _chargeLimitPercent = source._chargeLimitPercent
      _chargeScheduledTime = source._chargeScheduledTime
      _scheduledCharge = source._scheduledCharge
      _scheduledChargeUnavailable = source._scheduledChargeUnavailable
      _portPower = source._portPower
      _acOutletUnavailableReason = source._acOutletUnavailableReason
      _dischargeCommand = source._dischargeCommand
      _dischargeSoeLimit = source._dischargeSoeLimit
      _dischargeTargetSoe = source._dischargeTargetSoe
      _dischargeEnergy = source._dischargeEnergy
      _activeSessionAcCurrentLimit = source._activeSessionAcCurrentLimit
      _energyAcCurrentLimit = source._energyAcCurrentLimit
      _eaPncStatus = source._eaPncStatus
      _chargingSessionRestartAllowed = source._chargingSessionRestartAllowed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._chargeState) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._energyType) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeSessionMi) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeSessionKwh) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._sessionMinutesRemaining) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._chargeLimit) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._cableLock) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeRateKwhPrecise) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeRateMphPrecise) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeRateMilesMinPrecise) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._chargeLimitPercent) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._chargeScheduledTime) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._scheduledCharge) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._scheduledChargeUnavailable) }()
        case 19: try { try decoder.decodeSingularDoubleField(value: &_storage._portPower) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._acOutletUnavailableReason) }()
        case 24: try { try decoder.decodeSingularEnumField(value: &_storage._dischargeCommand) }()
        case 25: try { try decoder.decodeSingularUInt32Field(value: &_storage._dischargeSoeLimit) }()
        case 26: try { try decoder.decodeSingularUInt32Field(value: &_storage._dischargeTargetSoe) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._dischargeEnergy) }()
        case 29: try { try decoder.decodeSingularUInt32Field(value: &_storage._activeSessionAcCurrentLimit) }()
        case 30: try { try decoder.decodeSingularUInt32Field(value: &_storage._energyAcCurrentLimit) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._eaPncStatus) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._chargingSessionRestartAllowed) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._chargeState != .unknown {
        try visitor.visitSingularEnumField(value: _storage._chargeState, fieldNumber: 1)
      }
      if _storage._energyType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._energyType, fieldNumber: 2)
      }
      if _storage._chargeSessionMi.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeSessionMi, fieldNumber: 5)
      }
      if _storage._chargeSessionKwh.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeSessionKwh, fieldNumber: 6)
      }
      if _storage._sessionMinutesRemaining != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sessionMinutesRemaining, fieldNumber: 7)
      }
      if _storage._chargeLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._chargeLimit, fieldNumber: 8)
      }
      if _storage._cableLock != .unknown {
        try visitor.visitSingularEnumField(value: _storage._cableLock, fieldNumber: 10)
      }
      if _storage._chargeRateKwhPrecise.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeRateKwhPrecise, fieldNumber: 11)
      }
      if _storage._chargeRateMphPrecise.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeRateMphPrecise, fieldNumber: 12)
      }
      if _storage._chargeRateMilesMinPrecise.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeRateMilesMinPrecise, fieldNumber: 13)
      }
      if _storage._chargeLimitPercent.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._chargeLimitPercent, fieldNumber: 14)
      }
      if _storage._chargeScheduledTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._chargeScheduledTime, fieldNumber: 16)
      }
      if _storage._scheduledCharge != .unknown {
        try visitor.visitSingularEnumField(value: _storage._scheduledCharge, fieldNumber: 17)
      }
      if _storage._scheduledChargeUnavailable != .scheduledChargeUnavailableUnknown {
        try visitor.visitSingularEnumField(value: _storage._scheduledChargeUnavailable, fieldNumber: 18)
      }
      if _storage._portPower.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._portPower, fieldNumber: 19)
      }
      if _storage._acOutletUnavailableReason != .unknown {
        try visitor.visitSingularEnumField(value: _storage._acOutletUnavailableReason, fieldNumber: 22)
      }
      if _storage._dischargeCommand != .unknown {
        try visitor.visitSingularEnumField(value: _storage._dischargeCommand, fieldNumber: 24)
      }
      if _storage._dischargeSoeLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._dischargeSoeLimit, fieldNumber: 25)
      }
      if _storage._dischargeTargetSoe != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._dischargeTargetSoe, fieldNumber: 26)
      }
      if _storage._dischargeEnergy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._dischargeEnergy, fieldNumber: 27)
      }
      if _storage._activeSessionAcCurrentLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._activeSessionAcCurrentLimit, fieldNumber: 29)
      }
      if _storage._energyAcCurrentLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._energyAcCurrentLimit, fieldNumber: 30)
      }
      if _storage._eaPncStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._eaPncStatus, fieldNumber: 31)
      }
      if _storage._chargingSessionRestartAllowed != .statusUnknown {
        try visitor.visitSingularEnumField(value: _storage._chargingSessionRestartAllowed, fieldNumber: 32)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChargingState, rhs: Mobilegateway_Protos_ChargingState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chargeState != rhs_storage._chargeState {return false}
        if _storage._energyType != rhs_storage._energyType {return false}
        if _storage._chargeSessionMi != rhs_storage._chargeSessionMi {return false}
        if _storage._chargeSessionKwh != rhs_storage._chargeSessionKwh {return false}
        if _storage._sessionMinutesRemaining != rhs_storage._sessionMinutesRemaining {return false}
        if _storage._chargeLimit != rhs_storage._chargeLimit {return false}
        if _storage._cableLock != rhs_storage._cableLock {return false}
        if _storage._chargeRateKwhPrecise != rhs_storage._chargeRateKwhPrecise {return false}
        if _storage._chargeRateMphPrecise != rhs_storage._chargeRateMphPrecise {return false}
        if _storage._chargeRateMilesMinPrecise != rhs_storage._chargeRateMilesMinPrecise {return false}
        if _storage._chargeLimitPercent != rhs_storage._chargeLimitPercent {return false}
        if _storage._chargeScheduledTime != rhs_storage._chargeScheduledTime {return false}
        if _storage._scheduledCharge != rhs_storage._scheduledCharge {return false}
        if _storage._scheduledChargeUnavailable != rhs_storage._scheduledChargeUnavailable {return false}
        if _storage._portPower != rhs_storage._portPower {return false}
        if _storage._acOutletUnavailableReason != rhs_storage._acOutletUnavailableReason {return false}
        if _storage._dischargeCommand != rhs_storage._dischargeCommand {return false}
        if _storage._dischargeSoeLimit != rhs_storage._dischargeSoeLimit {return false}
        if _storage._dischargeTargetSoe != rhs_storage._dischargeTargetSoe {return false}
        if _storage._dischargeEnergy != rhs_storage._dischargeEnergy {return false}
        if _storage._activeSessionAcCurrentLimit != rhs_storage._activeSessionAcCurrentLimit {return false}
        if _storage._energyAcCurrentLimit != rhs_storage._energyAcCurrentLimit {return false}
        if _storage._eaPncStatus != rhs_storage._eaPncStatus {return false}
        if _storage._chargingSessionRestartAllowed != rhs_storage._chargingSessionRestartAllowed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Location"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Location, rhs: Mobilegateway_Protos_Location) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Gps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Gps"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "elevation"),
    4: .standard(proto: "position_time"),
    5: .standard(proto: "heading_precise"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.elevation) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.positionTime) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.headingPrecise) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.elevation != 0 {
      try visitor.visitSingularInt32Field(value: self.elevation, fieldNumber: 2)
    }
    if self.positionTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionTime, fieldNumber: 4)
    }
    if self.headingPrecise.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.headingPrecise, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Gps, rhs: Mobilegateway_Protos_Gps) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs.elevation != rhs.elevation {return false}
    if lhs.positionTime != rhs.positionTime {return false}
    if lhs.headingPrecise != rhs.headingPrecise {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SoftwareUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SoftwareUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_available"),
    2: .standard(proto: "install_duration_minutes"),
    4: .standard(proto: "percent_complete"),
    5: .same(proto: "state"),
    8: .standard(proto: "version_available_raw"),
    9: .standard(proto: "update_available"),
    10: .standard(proto: "scheduled_start_time_sec"),
    15: .standard(proto: "download_status"),
    16: .standard(proto: "download_interface"),
    17: .standard(proto: "tcu_download_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.versionAvailable) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.installDurationMinutes) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.percentComplete) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.versionAvailableRaw) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.updateAvailable) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.scheduledStartTimeSec) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.downloadStatus) }()
      case 16: try { try decoder.decodeSingularEnumField(value: &self.downloadInterface) }()
      case 17: try { try decoder.decodeSingularEnumField(value: &self.tcuDownloadStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.versionAvailable.isEmpty {
      try visitor.visitSingularStringField(value: self.versionAvailable, fieldNumber: 1)
    }
    if self.installDurationMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.installDurationMinutes, fieldNumber: 2)
    }
    if self.percentComplete != 0 {
      try visitor.visitSingularUInt32Field(value: self.percentComplete, fieldNumber: 4)
    }
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    if self.versionAvailableRaw != 0 {
      try visitor.visitSingularUInt32Field(value: self.versionAvailableRaw, fieldNumber: 8)
    }
    if self.updateAvailable != .unknown {
      try visitor.visitSingularEnumField(value: self.updateAvailable, fieldNumber: 9)
    }
    if self.scheduledStartTimeSec != 0 {
      try visitor.visitSingularUInt64Field(value: self.scheduledStartTimeSec, fieldNumber: 10)
    }
    if self.downloadStatus != .unknown {
      try visitor.visitSingularEnumField(value: self.downloadStatus, fieldNumber: 15)
    }
    if self.downloadInterface != .unknown {
      try visitor.visitSingularEnumField(value: self.downloadInterface, fieldNumber: 16)
    }
    if self.tcuDownloadStatus != .tcuSoftwareDownloadStatusUnknown {
      try visitor.visitSingularEnumField(value: self.tcuDownloadStatus, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SoftwareUpdate, rhs: Mobilegateway_Protos_SoftwareUpdate) -> Bool {
    if lhs.versionAvailable != rhs.versionAvailable {return false}
    if lhs.installDurationMinutes != rhs.installDurationMinutes {return false}
    if lhs.percentComplete != rhs.percentComplete {return false}
    if lhs.state != rhs.state {return false}
    if lhs.versionAvailableRaw != rhs.versionAvailableRaw {return false}
    if lhs.updateAvailable != rhs.updateAvailable {return false}
    if lhs.scheduledStartTimeSec != rhs.scheduledStartTimeSec {return false}
    if lhs.downloadStatus != rhs.downloadStatus {return false}
    if lhs.downloadInterface != rhs.downloadInterface {return false}
    if lhs.tcuDownloadStatus != rhs.tcuDownloadStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_AlarmState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AlarmState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.mode != .unknown {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_AlarmState, rhs: Mobilegateway_Protos_AlarmState) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SeatClimateState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeatClimateState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "driver_heat_backrest_zone1"),
    2: .standard(proto: "driver_heat_backrest_zone3"),
    3: .standard(proto: "driver_heat_cushion_zone2"),
    4: .standard(proto: "driver_heat_cushion_zone4"),
    5: .standard(proto: "driver_vent_backrest"),
    6: .standard(proto: "driver_vent_cushion"),
    7: .standard(proto: "front_passenger_heat_backrest_zone1"),
    8: .standard(proto: "front_passenger_heat_backrest_zone3"),
    9: .standard(proto: "front_passenger_heat_cushion_zone2"),
    10: .standard(proto: "front_passenger_heat_cushion_zone4"),
    11: .standard(proto: "front_passenger_vent_backrest"),
    12: .standard(proto: "front_passenger_vent_cushion"),
    13: .standard(proto: "rear_passenger_heat_left"),
    14: .standard(proto: "rear_passenger_heat_center"),
    15: .standard(proto: "rear_passenger_heat_right"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.driverHeatBackrestZone1) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.driverHeatBackrestZone3) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.driverHeatCushionZone2) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.driverHeatCushionZone4) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.driverVentBackrest) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.driverVentCushion) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatBackrestZone1) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatBackrestZone3) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatCushionZone2) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatCushionZone4) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerVentBackrest) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerVentCushion) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatLeft) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatCenter) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatRight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.driverHeatBackrestZone1 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatBackrestZone1, fieldNumber: 1)
    }
    if self.driverHeatBackrestZone3 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatBackrestZone3, fieldNumber: 2)
    }
    if self.driverHeatCushionZone2 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatCushionZone2, fieldNumber: 3)
    }
    if self.driverHeatCushionZone4 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatCushionZone4, fieldNumber: 4)
    }
    if self.driverVentBackrest != .unknown {
      try visitor.visitSingularEnumField(value: self.driverVentBackrest, fieldNumber: 5)
    }
    if self.driverVentCushion != .unknown {
      try visitor.visitSingularEnumField(value: self.driverVentCushion, fieldNumber: 6)
    }
    if self.frontPassengerHeatBackrestZone1 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatBackrestZone1, fieldNumber: 7)
    }
    if self.frontPassengerHeatBackrestZone3 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatBackrestZone3, fieldNumber: 8)
    }
    if self.frontPassengerHeatCushionZone2 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatCushionZone2, fieldNumber: 9)
    }
    if self.frontPassengerHeatCushionZone4 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatCushionZone4, fieldNumber: 10)
    }
    if self.frontPassengerVentBackrest != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerVentBackrest, fieldNumber: 11)
    }
    if self.frontPassengerVentCushion != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerVentCushion, fieldNumber: 12)
    }
    if self.rearPassengerHeatLeft != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatLeft, fieldNumber: 13)
    }
    if self.rearPassengerHeatCenter != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatCenter, fieldNumber: 14)
    }
    if self.rearPassengerHeatRight != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatRight, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SeatClimateState, rhs: Mobilegateway_Protos_SeatClimateState) -> Bool {
    if lhs.driverHeatBackrestZone1 != rhs.driverHeatBackrestZone1 {return false}
    if lhs.driverHeatBackrestZone3 != rhs.driverHeatBackrestZone3 {return false}
    if lhs.driverHeatCushionZone2 != rhs.driverHeatCushionZone2 {return false}
    if lhs.driverHeatCushionZone4 != rhs.driverHeatCushionZone4 {return false}
    if lhs.driverVentBackrest != rhs.driverVentBackrest {return false}
    if lhs.driverVentCushion != rhs.driverVentCushion {return false}
    if lhs.frontPassengerHeatBackrestZone1 != rhs.frontPassengerHeatBackrestZone1 {return false}
    if lhs.frontPassengerHeatBackrestZone3 != rhs.frontPassengerHeatBackrestZone3 {return false}
    if lhs.frontPassengerHeatCushionZone2 != rhs.frontPassengerHeatCushionZone2 {return false}
    if lhs.frontPassengerHeatCushionZone4 != rhs.frontPassengerHeatCushionZone4 {return false}
    if lhs.frontPassengerVentBackrest != rhs.frontPassengerVentBackrest {return false}
    if lhs.frontPassengerVentCushion != rhs.frontPassengerVentCushion {return false}
    if lhs.rearPassengerHeatLeft != rhs.rearPassengerHeatLeft {return false}
    if lhs.rearPassengerHeatCenter != rhs.rearPassengerHeatCenter {return false}
    if lhs.rearPassengerHeatRight != rhs.rearPassengerHeatRight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_HvacState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HvacState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "power"),
    2: .same(proto: "defrost"),
    3: .standard(proto: "precondition_status"),
    5: .standard(proto: "keep_climate_status"),
    7: .standard(proto: "max_ac_status"),
    8: .same(proto: "seats"),
    9: .standard(proto: "sync_set"),
    10: .standard(proto: "rear_window_heating_status"),
    11: .standard(proto: "steering_heater"),
    12: .standard(proto: "steering_heater_level"),
    13: .standard(proto: "front_left_set_temperature"),
    14: .standard(proto: "hvac_limited"),
  ]

  fileprivate class _StorageClass {
    var _power: Mobilegateway_Protos_HvacPower = .unknown
    var _defrost: Mobilegateway_Protos_DefrostState = .unknown
    var _preconditionStatus: Mobilegateway_Protos_HvacPreconditionStatus = .unknown
    var _keepClimateStatus: Mobilegateway_Protos_KeepClimateStatus = .unknown
    var _maxAcStatus: Mobilegateway_Protos_MaxACState = .unknown
    var _seats: Mobilegateway_Protos_SeatClimateState? = nil
    var _syncSet: Mobilegateway_Protos_SyncSet = .unknown
    var _rearWindowHeatingStatus: Mobilegateway_Protos_RearWindowHeatingStatus = .unknown
    var _steeringHeater: Mobilegateway_Protos_SteeringHeaterStatus = .unknown
    var _steeringHeaterLevel: Mobilegateway_Protos_SteeringWheelHeaterLevel = .unknown
    var _frontLeftSetTemperature: Double = 0
    var _hvacLimited: Mobilegateway_Protos_HvacLimited = .unknown

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _power = source._power
      _defrost = source._defrost
      _preconditionStatus = source._preconditionStatus
      _keepClimateStatus = source._keepClimateStatus
      _maxAcStatus = source._maxAcStatus
      _seats = source._seats
      _syncSet = source._syncSet
      _rearWindowHeatingStatus = source._rearWindowHeatingStatus
      _steeringHeater = source._steeringHeater
      _steeringHeaterLevel = source._steeringHeaterLevel
      _frontLeftSetTemperature = source._frontLeftSetTemperature
      _hvacLimited = source._hvacLimited
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._power) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._defrost) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._preconditionStatus) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._keepClimateStatus) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._maxAcStatus) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._seats) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._syncSet) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._rearWindowHeatingStatus) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._steeringHeater) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._steeringHeaterLevel) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._frontLeftSetTemperature) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._hvacLimited) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._power != .unknown {
        try visitor.visitSingularEnumField(value: _storage._power, fieldNumber: 1)
      }
      if _storage._defrost != .unknown {
        try visitor.visitSingularEnumField(value: _storage._defrost, fieldNumber: 2)
      }
      if _storage._preconditionStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._preconditionStatus, fieldNumber: 3)
      }
      if _storage._keepClimateStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._keepClimateStatus, fieldNumber: 5)
      }
      if _storage._maxAcStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._maxAcStatus, fieldNumber: 7)
      }
      try { if let v = _storage._seats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._syncSet != .unknown {
        try visitor.visitSingularEnumField(value: _storage._syncSet, fieldNumber: 9)
      }
      if _storage._rearWindowHeatingStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._rearWindowHeatingStatus, fieldNumber: 10)
      }
      if _storage._steeringHeater != .unknown {
        try visitor.visitSingularEnumField(value: _storage._steeringHeater, fieldNumber: 11)
      }
      if _storage._steeringHeaterLevel != .unknown {
        try visitor.visitSingularEnumField(value: _storage._steeringHeaterLevel, fieldNumber: 12)
      }
      if _storage._frontLeftSetTemperature.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._frontLeftSetTemperature, fieldNumber: 13)
      }
      if _storage._hvacLimited != .unknown {
        try visitor.visitSingularEnumField(value: _storage._hvacLimited, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_HvacState, rhs: Mobilegateway_Protos_HvacState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._power != rhs_storage._power {return false}
        if _storage._defrost != rhs_storage._defrost {return false}
        if _storage._preconditionStatus != rhs_storage._preconditionStatus {return false}
        if _storage._keepClimateStatus != rhs_storage._keepClimateStatus {return false}
        if _storage._maxAcStatus != rhs_storage._maxAcStatus {return false}
        if _storage._seats != rhs_storage._seats {return false}
        if _storage._syncSet != rhs_storage._syncSet {return false}
        if _storage._rearWindowHeatingStatus != rhs_storage._rearWindowHeatingStatus {return false}
        if _storage._steeringHeater != rhs_storage._steeringHeater {return false}
        if _storage._steeringHeaterLevel != rhs_storage._steeringHeaterLevel {return false}
        if _storage._frontLeftSetTemperature != rhs_storage._frontLeftSetTemperature {return false}
        if _storage._hvacLimited != rhs_storage._hvacLimited {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_MobileAppReqState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MobileAppReqState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "alarm_set_request"),
    2: .standard(proto: "charge_port_request"),
    9: .standard(proto: "frunk_cargo_request"),
    10: .standard(proto: "horn_request"),
    11: .standard(proto: "hvac_defrost"),
    12: .standard(proto: "hvac_precondition"),
    13: .standard(proto: "light_request"),
    14: .standard(proto: "panic_request"),
    15: .standard(proto: "shared_trip_request"),
    16: .standard(proto: "trunk_cargo_request"),
    17: .standard(proto: "vehicle_unlock_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.alarmSetRequest) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.chargePortRequest) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.frunkCargoRequest) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.hornRequest) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.hvacDefrost) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.hvacPrecondition) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.lightRequest) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.panicRequest) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.sharedTripRequest) }()
      case 16: try { try decoder.decodeSingularEnumField(value: &self.trunkCargoRequest) }()
      case 17: try { try decoder.decodeSingularEnumField(value: &self.vehicleUnlockRequest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.alarmSetRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.alarmSetRequest, fieldNumber: 1)
    }
    if self.chargePortRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.chargePortRequest, fieldNumber: 2)
    }
    if self.frunkCargoRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.frunkCargoRequest, fieldNumber: 9)
    }
    if self.hornRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.hornRequest, fieldNumber: 10)
    }
    if self.hvacDefrost != .unknown {
      try visitor.visitSingularEnumField(value: self.hvacDefrost, fieldNumber: 11)
    }
    if self.hvacPrecondition != .unknown {
      try visitor.visitSingularEnumField(value: self.hvacPrecondition, fieldNumber: 12)
    }
    if self.lightRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.lightRequest, fieldNumber: 13)
    }
    if self.panicRequest != .panicAlarmUnknown {
      try visitor.visitSingularEnumField(value: self.panicRequest, fieldNumber: 14)
    }
    if self.sharedTripRequest != .sharedTripUnknown {
      try visitor.visitSingularEnumField(value: self.sharedTripRequest, fieldNumber: 15)
    }
    if self.trunkCargoRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.trunkCargoRequest, fieldNumber: 16)
    }
    if self.vehicleUnlockRequest != .unknown {
      try visitor.visitSingularEnumField(value: self.vehicleUnlockRequest, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_MobileAppReqState, rhs: Mobilegateway_Protos_MobileAppReqState) -> Bool {
    if lhs.alarmSetRequest != rhs.alarmSetRequest {return false}
    if lhs.chargePortRequest != rhs.chargePortRequest {return false}
    if lhs.frunkCargoRequest != rhs.frunkCargoRequest {return false}
    if lhs.hornRequest != rhs.hornRequest {return false}
    if lhs.hvacDefrost != rhs.hvacDefrost {return false}
    if lhs.hvacPrecondition != rhs.hvacPrecondition {return false}
    if lhs.lightRequest != rhs.lightRequest {return false}
    if lhs.panicRequest != rhs.panicRequest {return false}
    if lhs.sharedTripRequest != rhs.sharedTripRequest {return false}
    if lhs.trunkCargoRequest != rhs.trunkCargoRequest {return false}
    if lhs.vehicleUnlockRequest != rhs.vehicleUnlockRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_TcuInternetState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TcuInternetState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lte_type"),
    2: .standard(proto: "lte_status"),
    3: .standard(proto: "wifi_status"),
    4: .standard(proto: "lte_rssi"),
    5: .standard(proto: "wifi_rssi"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.lteType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.lteStatus) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.wifiStatus) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._lteRssi) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._wifiRssi) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.lteType != .unknown {
      try visitor.visitSingularEnumField(value: self.lteType, fieldNumber: 1)
    }
    if self.lteStatus != .unknown {
      try visitor.visitSingularEnumField(value: self.lteStatus, fieldNumber: 2)
    }
    if self.wifiStatus != .unknown {
      try visitor.visitSingularEnumField(value: self.wifiStatus, fieldNumber: 3)
    }
    try { if let v = self._lteRssi {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._wifiRssi {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_TcuInternetState, rhs: Mobilegateway_Protos_TcuInternetState) -> Bool {
    if lhs.lteType != rhs.lteType {return false}
    if lhs.lteStatus != rhs.lteStatus {return false}
    if lhs.wifiStatus != rhs.wifiStatus {return false}
    if lhs._lteRssi != rhs._lteRssi {return false}
    if lhs._wifiRssi != rhs._wifiRssi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_FaultState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FaultState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "mpb_fault_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 7: try { try decoder.decodeSingularEnumField(value: &self.mpbFaultStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mpbFaultStatus != .unknown {
      try visitor.visitSingularEnumField(value: self.mpbFaultStatus, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_FaultState, rhs: Mobilegateway_Protos_FaultState) -> Bool {
    if lhs.mpbFaultStatus != rhs.mpbFaultStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Notifications: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Notifications"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "powertrain_message"),
    4: .standard(proto: "powertrain_notify_status"),
    5: .standard(proto: "charging_general_status"),
    6: .standard(proto: "battery_charge_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.powertrainMessage) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.powertrainNotifyStatus) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.chargingGeneralStatus) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.batteryChargeStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.powertrainMessage != .unknown {
      try visitor.visitSingularEnumField(value: self.powertrainMessage, fieldNumber: 1)
    }
    if self.powertrainNotifyStatus != .powertrainNotifyUnknown {
      try visitor.visitSingularEnumField(value: self.powertrainNotifyStatus, fieldNumber: 4)
    }
    if self.chargingGeneralStatus != .generalChargeUnknown {
      try visitor.visitSingularEnumField(value: self.chargingGeneralStatus, fieldNumber: 5)
    }
    if self.batteryChargeStatus != .generalChargeUnknown {
      try visitor.visitSingularEnumField(value: self.batteryChargeStatus, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Notifications, rhs: Mobilegateway_Protos_Notifications) -> Bool {
    if lhs.powertrainMessage != rhs.powertrainMessage {return false}
    if lhs.powertrainNotifyStatus != rhs.powertrainNotifyStatus {return false}
    if lhs.chargingGeneralStatus != rhs.chargingGeneralStatus {return false}
    if lhs.batteryChargeStatus != rhs.batteryChargeStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_MultiplexValues: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiplexValues"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_MultiplexValues, rhs: Mobilegateway_Protos_MultiplexValues) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SentryState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SentryState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enablement_state"),
    2: .standard(proto: "threat_level"),
    3: .standard(proto: "multiplex_values"),
    4: .standard(proto: "usb_drive_status"),
    5: .standard(proto: "enhanced_deterrence_state"),
    6: .standard(proto: "range_cost_per_day"),
    7: .standard(proto: "remote_alarm_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.enablementState) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.threatLevel) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._multiplexValues) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.usbDriveStatus) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.enhancedDeterrenceState) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.rangeCostPerDay) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.remoteAlarmState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.enablementState != .unknown {
      try visitor.visitSingularEnumField(value: self.enablementState, fieldNumber: 1)
    }
    if self.threatLevel != .levelUnknown {
      try visitor.visitSingularEnumField(value: self.threatLevel, fieldNumber: 2)
    }
    try { if let v = self._multiplexValues {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.usbDriveStatus != .unknownSentryUsbDriveStatus {
      try visitor.visitSingularEnumField(value: self.usbDriveStatus, fieldNumber: 4)
    }
    if self.enhancedDeterrenceState != .unknown {
      try visitor.visitSingularEnumField(value: self.enhancedDeterrenceState, fieldNumber: 5)
    }
    if self.rangeCostPerDay != 0 {
      try visitor.visitSingularUInt32Field(value: self.rangeCostPerDay, fieldNumber: 6)
    }
    if self.remoteAlarmState != .unknown {
      try visitor.visitSingularEnumField(value: self.remoteAlarmState, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SentryState, rhs: Mobilegateway_Protos_SentryState) -> Bool {
    if lhs.enablementState != rhs.enablementState {return false}
    if lhs.threatLevel != rhs.threatLevel {return false}
    if lhs._multiplexValues != rhs._multiplexValues {return false}
    if lhs.usbDriveStatus != rhs.usbDriveStatus {return false}
    if lhs.enhancedDeterrenceState != rhs.enhancedDeterrenceState {return false}
    if lhs.rangeCostPerDay != rhs.rangeCostPerDay {return false}
    if lhs.remoteAlarmState != rhs.remoteAlarmState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_VehicleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "battery"),
    2: .same(proto: "power"),
    3: .same(proto: "cabin"),
    4: .same(proto: "body"),
    5: .standard(proto: "last_updated_ms"),
    6: .same(proto: "chassis"),
    8: .same(proto: "charging"),
    11: .same(proto: "gps"),
    12: .standard(proto: "software_update"),
    13: .same(proto: "alarm"),
    15: .standard(proto: "cloud_connection"),
    16: .standard(proto: "keyless_driving"),
    17: .same(proto: "hvac"),
    18: .standard(proto: "drive_mode"),
    19: .standard(proto: "privacy_mode"),
    20: .standard(proto: "gear_position"),
    21: .standard(proto: "mobile_app_request"),
    22: .same(proto: "tcu"),
    23: .standard(proto: "tcu_internet"),
    24: .standard(proto: "sentry_state"),
    25: .standard(proto: "fault_state"),
    26: .same(proto: "notifications"),
    28: .standard(proto: "low_power_mode_status"),
  ]

  fileprivate class _StorageClass {
    var _battery: Mobilegateway_Protos_BatteryState? = nil
    var _power: Mobilegateway_Protos_PowerState = .unknown
    var _cabin: Mobilegateway_Protos_CabinState? = nil
    var _body: Mobilegateway_Protos_BodyState? = nil
    var _lastUpdatedMs: UInt64 = 0
    var _chassis: Mobilegateway_Protos_ChassisState? = nil
    var _charging: Mobilegateway_Protos_ChargingState? = nil
    var _gps: Mobilegateway_Protos_Gps? = nil
    var _softwareUpdate: Mobilegateway_Protos_SoftwareUpdate? = nil
    var _alarm: Mobilegateway_Protos_AlarmState? = nil
    var _cloudConnection: Mobilegateway_Protos_CloudConnectionState = .cloudConnectionUnknown
    var _keylessDriving: Mobilegateway_Protos_KeylessDrivingState = .keylessDrivingUnknown
    var _hvac: Mobilegateway_Protos_HvacState? = nil
    var _driveMode: Mobilegateway_Protos_DriveMode = .unknown
    var _privacyMode: Mobilegateway_Protos_PrivacyMode = .unknown
    var _gearPosition: Mobilegateway_Protos_GearPosition = .gearUnknown
    var _mobileAppRequest: Mobilegateway_Protos_MobileAppReqState? = nil
    var _tcu: Mobilegateway_Protos_TcuState = .tcuUnknown
    var _tcuInternet: Mobilegateway_Protos_TcuInternetState? = nil
    var _sentryState: Mobilegateway_Protos_SentryState? = nil
    var _faultState: Mobilegateway_Protos_FaultState? = nil
    var _notifications: Mobilegateway_Protos_Notifications? = nil
    var _lowPowerModeStatus: Mobilegateway_Protos_LowPowerModeStatus = .unknown

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _battery = source._battery
      _power = source._power
      _cabin = source._cabin
      _body = source._body
      _lastUpdatedMs = source._lastUpdatedMs
      _chassis = source._chassis
      _charging = source._charging
      _gps = source._gps
      _softwareUpdate = source._softwareUpdate
      _alarm = source._alarm
      _cloudConnection = source._cloudConnection
      _keylessDriving = source._keylessDriving
      _hvac = source._hvac
      _driveMode = source._driveMode
      _privacyMode = source._privacyMode
      _gearPosition = source._gearPosition
      _mobileAppRequest = source._mobileAppRequest
      _tcu = source._tcu
      _tcuInternet = source._tcuInternet
      _sentryState = source._sentryState
      _faultState = source._faultState
      _notifications = source._notifications
      _lowPowerModeStatus = source._lowPowerModeStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._battery) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._power) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._cabin) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._body) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._lastUpdatedMs) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._chassis) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._charging) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._gps) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._softwareUpdate) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._alarm) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._cloudConnection) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._keylessDriving) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._hvac) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._driveMode) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._privacyMode) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._gearPosition) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._mobileAppRequest) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._tcu) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._tcuInternet) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._sentryState) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._faultState) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._notifications) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._lowPowerModeStatus) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._battery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._power != .unknown {
        try visitor.visitSingularEnumField(value: _storage._power, fieldNumber: 2)
      }
      try { if let v = _storage._cabin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._body {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._lastUpdatedMs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._lastUpdatedMs, fieldNumber: 5)
      }
      try { if let v = _storage._chassis {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._charging {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._gps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._softwareUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._alarm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if _storage._cloudConnection != .cloudConnectionUnknown {
        try visitor.visitSingularEnumField(value: _storage._cloudConnection, fieldNumber: 15)
      }
      if _storage._keylessDriving != .keylessDrivingUnknown {
        try visitor.visitSingularEnumField(value: _storage._keylessDriving, fieldNumber: 16)
      }
      try { if let v = _storage._hvac {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._driveMode != .unknown {
        try visitor.visitSingularEnumField(value: _storage._driveMode, fieldNumber: 18)
      }
      if _storage._privacyMode != .unknown {
        try visitor.visitSingularEnumField(value: _storage._privacyMode, fieldNumber: 19)
      }
      if _storage._gearPosition != .gearUnknown {
        try visitor.visitSingularEnumField(value: _storage._gearPosition, fieldNumber: 20)
      }
      try { if let v = _storage._mobileAppRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._tcu != .tcuUnknown {
        try visitor.visitSingularEnumField(value: _storage._tcu, fieldNumber: 22)
      }
      try { if let v = _storage._tcuInternet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._sentryState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._faultState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._notifications {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      if _storage._lowPowerModeStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._lowPowerModeStatus, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_VehicleState, rhs: Mobilegateway_Protos_VehicleState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._battery != rhs_storage._battery {return false}
        if _storage._power != rhs_storage._power {return false}
        if _storage._cabin != rhs_storage._cabin {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._lastUpdatedMs != rhs_storage._lastUpdatedMs {return false}
        if _storage._chassis != rhs_storage._chassis {return false}
        if _storage._charging != rhs_storage._charging {return false}
        if _storage._gps != rhs_storage._gps {return false}
        if _storage._softwareUpdate != rhs_storage._softwareUpdate {return false}
        if _storage._alarm != rhs_storage._alarm {return false}
        if _storage._cloudConnection != rhs_storage._cloudConnection {return false}
        if _storage._keylessDriving != rhs_storage._keylessDriving {return false}
        if _storage._hvac != rhs_storage._hvac {return false}
        if _storage._driveMode != rhs_storage._driveMode {return false}
        if _storage._privacyMode != rhs_storage._privacyMode {return false}
        if _storage._gearPosition != rhs_storage._gearPosition {return false}
        if _storage._mobileAppRequest != rhs_storage._mobileAppRequest {return false}
        if _storage._tcu != rhs_storage._tcu {return false}
        if _storage._tcuInternet != rhs_storage._tcuInternet {return false}
        if _storage._sentryState != rhs_storage._sentryState {return false}
        if _storage._faultState != rhs_storage._faultState {return false}
        if _storage._notifications != rhs_storage._notifications {return false}
        if _storage._lowPowerModeStatus != rhs_storage._lowPowerModeStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Vehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "access_level"),
    3: .same(proto: "config"),
    4: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.accessLevel) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.accessLevel != .unknown {
      try visitor.visitSingularEnumField(value: self.accessLevel, fieldNumber: 2)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Vehicle, rhs: Mobilegateway_Protos_Vehicle) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.accessLevel != rhs.accessLevel {return false}
    if lhs._config != rhs._config {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ApplySoftwareUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplySoftwareUpdateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ApplySoftwareUpdateRequest, rhs: Mobilegateway_Protos_ApplySoftwareUpdateRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ApplySoftwareUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplySoftwareUpdateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ApplySoftwareUpdateResponse, rhs: Mobilegateway_Protos_ApplySoftwareUpdateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_CancelScheduledUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelScheduledUpdateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_CancelScheduledUpdateRequest, rhs: Mobilegateway_Protos_CancelScheduledUpdateRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_CancelScheduledUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelScheduledUpdateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_CancelScheduledUpdateResponse, rhs: Mobilegateway_Protos_CancelScheduledUpdateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ChargeControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargeControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChargeControlRequest, rhs: Mobilegateway_Protos_ChargeControlRequest) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ChargeControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChargeControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ChargeControlResponse, rhs: Mobilegateway_Protos_ChargeControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ControlChargePortRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControlChargePortRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "closure_state"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.closureState) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.closureState != .unknown {
      try visitor.visitSingularEnumField(value: self.closureState, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ControlChargePortRequest, rhs: Mobilegateway_Protos_ControlChargePortRequest) -> Bool {
    if lhs.closureState != rhs.closureState {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ControlChargePortResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControlChargePortResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ControlChargePortResponse, rhs: Mobilegateway_Protos_ControlChargePortResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DoorLocksControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DoorLocksControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "door_location"),
    2: .standard(proto: "lock_state"),
    3: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.doorLocation) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.lockState) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.doorLocation.isEmpty {
      try visitor.visitPackedInt32Field(value: self.doorLocation, fieldNumber: 1)
    }
    if self.lockState != .unknown {
      try visitor.visitSingularEnumField(value: self.lockState, fieldNumber: 2)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DoorLocksControlRequest, rhs: Mobilegateway_Protos_DoorLocksControlRequest) -> Bool {
    if lhs.doorLocation != rhs.doorLocation {return false}
    if lhs.lockState != rhs.lockState {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DoorLocksControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DoorLocksControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DoorLocksControlResponse, rhs: Mobilegateway_Protos_DoorLocksControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_FrontCargoControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrontCargoControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "closure_state"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.closureState) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.closureState != .unknown {
      try visitor.visitSingularEnumField(value: self.closureState, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_FrontCargoControlRequest, rhs: Mobilegateway_Protos_FrontCargoControlRequest) -> Bool {
    if lhs.closureState != rhs.closureState {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_FrontCargoControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrontCargoControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_FrontCargoControlResponse, rhs: Mobilegateway_Protos_FrontCargoControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DocumentInfoUnknown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DocumentInfoUnknown"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DocumentInfoUnknown, rhs: Mobilegateway_Protos_DocumentInfoUnknown) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DocumentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DocumentInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "version"),
    4: .same(proto: "description"),
    5: .same(proto: "unknown"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._unknown) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try { if let v = self._unknown {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DocumentInfo, rhs: Mobilegateway_Protos_DocumentInfo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.version != rhs.version {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._unknown != rhs._unknown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_GetDocumentInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDocumentInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "version"),
    4: .standard(proto: "document_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.documentType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if self.documentType != .unknown {
      try visitor.visitSingularEnumField(value: self.documentType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_GetDocumentInfoRequest, rhs: Mobilegateway_Protos_GetDocumentInfoRequest) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.documentType != rhs.documentType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_GetDocumentInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDocumentInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_GetDocumentInfoResponse, rhs: Mobilegateway_Protos_GetDocumentInfoResponse) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_GetVehicleStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_GetVehicleStateRequest, rhs: Mobilegateway_Protos_GetVehicleStateRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_GetVehicleStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleStateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_GetVehicleStateResponse, rhs: Mobilegateway_Protos_GetVehicleStateResponse) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_HonkHornRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HonkHornRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_HonkHornRequest, rhs: Mobilegateway_Protos_HonkHornRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_HonkHornResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HonkHornResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_HonkHornResponse, rhs: Mobilegateway_Protos_HonkHornResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_HvacDefrostControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HvacDefrostControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "hvac_defrost"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.hvacDefrost) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.hvacDefrost != .unknown {
      try visitor.visitSingularEnumField(value: self.hvacDefrost, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_HvacDefrostControlRequest, rhs: Mobilegateway_Protos_HvacDefrostControlRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.hvacDefrost != rhs.hvacDefrost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_HvacDefrostControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HvacDefrostControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_HvacDefrostControlResponse, rhs: Mobilegateway_Protos_HvacDefrostControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_LightsControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LightsControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_LightsControlRequest, rhs: Mobilegateway_Protos_LightsControlRequest) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_LightsControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LightsControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_LightsControlResponse, rhs: Mobilegateway_Protos_LightsControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_RearCargoControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RearCargoControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "closure_state"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.closureState) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.closureState != .unknown {
      try visitor.visitSingularEnumField(value: self.closureState, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_RearCargoControlRequest, rhs: Mobilegateway_Protos_RearCargoControlRequest) -> Bool {
    if lhs.closureState != rhs.closureState {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_RearCargoControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RearCargoControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_RearCargoControlResponse, rhs: Mobilegateway_Protos_RearCargoControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SecurityAlarmControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecurityAlarmControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .unknown {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SecurityAlarmControlRequest, rhs: Mobilegateway_Protos_SecurityAlarmControlRequest) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SecurityAlarmControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecurityAlarmControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SecurityAlarmControlResponse, rhs: Mobilegateway_Protos_SecurityAlarmControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetCabinTemperatureRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCabinTemperatureRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "temperature"),
    2: .same(proto: "state"),
    3: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.temperature) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.temperature.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.temperature, fieldNumber: 1)
    }
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetCabinTemperatureRequest, rhs: Mobilegateway_Protos_SetCabinTemperatureRequest) -> Bool {
    if lhs.temperature != rhs.temperature {return false}
    if lhs.state != rhs.state {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetCabinTemperatureResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCabinTemperatureResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetCabinTemperatureResponse, rhs: Mobilegateway_Protos_SetCabinTemperatureResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetChargeLimitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChargeLimitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "limit_percent"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.limitPercent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limitPercent != 0 {
      try visitor.visitSingularUInt32Field(value: self.limitPercent, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetChargeLimitRequest, rhs: Mobilegateway_Protos_SetChargeLimitRequest) -> Bool {
    if lhs.limitPercent != rhs.limitPercent {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetChargeLimitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChargeLimitResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetChargeLimitResponse, rhs: Mobilegateway_Protos_SetChargeLimitResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_WakeupVehicleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WakeupVehicleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_WakeupVehicleRequest, rhs: Mobilegateway_Protos_WakeupVehicleRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_WakeupVehicleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WakeupVehicleResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_WakeupVehicleResponse, rhs: Mobilegateway_Protos_WakeupVehicleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetBatteryPreconRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetBatteryPreconRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.status != .batteryPreconUnknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetBatteryPreconRequest, rhs: Mobilegateway_Protos_SetBatteryPreconRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetBatteryPreconResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetBatteryPreconResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetBatteryPreconResponse, rhs: Mobilegateway_Protos_SetBatteryPreconResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetDischargeSoeLimitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetDischargeSoeLimitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discharge_soe_limit"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.dischargeSoeLimit) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dischargeSoeLimit != 0 {
      try visitor.visitSingularUInt32Field(value: self.dischargeSoeLimit, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetDischargeSoeLimitRequest, rhs: Mobilegateway_Protos_SetDischargeSoeLimitRequest) -> Bool {
    if lhs.dischargeSoeLimit != rhs.dischargeSoeLimit {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetDischargeSoeLimitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetDischargeSoeLimitResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetDischargeSoeLimitResponse, rhs: Mobilegateway_Protos_SetDischargeSoeLimitResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DischargeControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DischargeControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discharge_command"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.dischargeCommand) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dischargeCommand != .dischargeUnknown {
      try visitor.visitSingularEnumField(value: self.dischargeCommand, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DischargeControlRequest, rhs: Mobilegateway_Protos_DischargeControlRequest) -> Bool {
    if lhs.dischargeCommand != rhs.dischargeCommand {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_DischargeControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DischargeControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_DischargeControlResponse, rhs: Mobilegateway_Protos_DischargeControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_AllWindowControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllWindowControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_AllWindowControlRequest, rhs: Mobilegateway_Protos_AllWindowControlRequest) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_AllWindowControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllWindowControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_AllWindowControlResponse, rhs: Mobilegateway_Protos_AllWindowControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SeatClimateControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeatClimateControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "driver_heat_backrest_zone1"),
    3: .standard(proto: "driver_heat_backrest_zone3"),
    4: .standard(proto: "driver_heat_cushion_zone2"),
    5: .standard(proto: "driver_heat_cushion_zone4"),
    6: .standard(proto: "driver_vent_backrest"),
    7: .standard(proto: "driver_vent_cushion"),
    8: .standard(proto: "front_passenger_heat_backrest_zone1"),
    9: .standard(proto: "front_passenger_heat_backrest_zone3"),
    10: .standard(proto: "front_passenger_heat_cushion_zone2"),
    11: .standard(proto: "front_passenger_heat_cushion_zone4"),
    12: .standard(proto: "front_passenger_vent_backrest"),
    13: .standard(proto: "front_passenger_vent_cushion"),
    14: .standard(proto: "rear_passenger_heat_left"),
    15: .standard(proto: "rear_passenger_heat_center"),
    16: .standard(proto: "rear_passenger_heat_right"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.driverHeatBackrestZone1) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.driverHeatBackrestZone3) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.driverHeatCushionZone2) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.driverHeatCushionZone4) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.driverVentBackrest) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.driverVentCushion) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatBackrestZone1) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatBackrestZone3) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatCushionZone2) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerHeatCushionZone4) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerVentBackrest) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.frontPassengerVentCushion) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatLeft) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatCenter) }()
      case 16: try { try decoder.decodeSingularEnumField(value: &self.rearPassengerHeatRight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.driverHeatBackrestZone1 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatBackrestZone1, fieldNumber: 2)
    }
    if self.driverHeatBackrestZone3 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatBackrestZone3, fieldNumber: 3)
    }
    if self.driverHeatCushionZone2 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatCushionZone2, fieldNumber: 4)
    }
    if self.driverHeatCushionZone4 != .unknown {
      try visitor.visitSingularEnumField(value: self.driverHeatCushionZone4, fieldNumber: 5)
    }
    if self.driverVentBackrest != .unknown {
      try visitor.visitSingularEnumField(value: self.driverVentBackrest, fieldNumber: 6)
    }
    if self.driverVentCushion != .unknown {
      try visitor.visitSingularEnumField(value: self.driverVentCushion, fieldNumber: 7)
    }
    if self.frontPassengerHeatBackrestZone1 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatBackrestZone1, fieldNumber: 8)
    }
    if self.frontPassengerHeatBackrestZone3 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatBackrestZone3, fieldNumber: 9)
    }
    if self.frontPassengerHeatCushionZone2 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatCushionZone2, fieldNumber: 10)
    }
    if self.frontPassengerHeatCushionZone4 != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerHeatCushionZone4, fieldNumber: 11)
    }
    if self.frontPassengerVentBackrest != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerVentBackrest, fieldNumber: 12)
    }
    if self.frontPassengerVentCushion != .unknown {
      try visitor.visitSingularEnumField(value: self.frontPassengerVentCushion, fieldNumber: 13)
    }
    if self.rearPassengerHeatLeft != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatLeft, fieldNumber: 14)
    }
    if self.rearPassengerHeatCenter != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatCenter, fieldNumber: 15)
    }
    if self.rearPassengerHeatRight != .unknown {
      try visitor.visitSingularEnumField(value: self.rearPassengerHeatRight, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SeatClimateControlRequest, rhs: Mobilegateway_Protos_SeatClimateControlRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.driverHeatBackrestZone1 != rhs.driverHeatBackrestZone1 {return false}
    if lhs.driverHeatBackrestZone3 != rhs.driverHeatBackrestZone3 {return false}
    if lhs.driverHeatCushionZone2 != rhs.driverHeatCushionZone2 {return false}
    if lhs.driverHeatCushionZone4 != rhs.driverHeatCushionZone4 {return false}
    if lhs.driverVentBackrest != rhs.driverVentBackrest {return false}
    if lhs.driverVentCushion != rhs.driverVentCushion {return false}
    if lhs.frontPassengerHeatBackrestZone1 != rhs.frontPassengerHeatBackrestZone1 {return false}
    if lhs.frontPassengerHeatBackrestZone3 != rhs.frontPassengerHeatBackrestZone3 {return false}
    if lhs.frontPassengerHeatCushionZone2 != rhs.frontPassengerHeatCushionZone2 {return false}
    if lhs.frontPassengerHeatCushionZone4 != rhs.frontPassengerHeatCushionZone4 {return false}
    if lhs.frontPassengerVentBackrest != rhs.frontPassengerVentBackrest {return false}
    if lhs.frontPassengerVentCushion != rhs.frontPassengerVentCushion {return false}
    if lhs.rearPassengerHeatLeft != rhs.rearPassengerHeatLeft {return false}
    if lhs.rearPassengerHeatCenter != rhs.rearPassengerHeatCenter {return false}
    if lhs.rearPassengerHeatRight != rhs.rearPassengerHeatRight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SeatClimateControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeatClimateControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SeatClimateControlResponse, rhs: Mobilegateway_Protos_SeatClimateControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetMaxACRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetMaxACRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetMaxACRequest, rhs: Mobilegateway_Protos_SetMaxACRequest) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetMaxACResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetMaxACResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetMaxACResponse, rhs: Mobilegateway_Protos_SetMaxACResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SteeringWheelHeaterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SteeringWheelHeaterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .same(proto: "level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.level != .unknown {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SteeringWheelHeaterRequest, rhs: Mobilegateway_Protos_SteeringWheelHeaterRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SteeringWheelHeaterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SteeringWheelHeaterResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SteeringWheelHeaterResponse, rhs: Mobilegateway_Protos_SteeringWheelHeaterResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetCreatureComfortModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCreatureComfortModeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .unknown {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetCreatureComfortModeRequest, rhs: Mobilegateway_Protos_SetCreatureComfortModeRequest) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_SetCreatureComfortModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetCreatureComfortModeResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_SetCreatureComfortModeResponse, rhs: Mobilegateway_Protos_SetCreatureComfortModeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_WelcomeControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WelcomeControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_WelcomeControlRequest, rhs: Mobilegateway_Protos_WelcomeControlRequest) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_WelcomeControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WelcomeControlResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_WelcomeControlResponse, rhs: Mobilegateway_Protos_WelcomeControlResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
