// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: trip_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Mobilegateway_Protos_WaypointType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case waypoint // = 1
  case evCharger // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .waypoint
    case 2: self = .evCharger
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .waypoint: return 1
    case .evCharger: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Mobilegateway_Protos_WaypointType] = [
    .unknown,
    .waypoint,
    .evCharger,
  ]

}

public struct Mobilegateway_Protos_Waypoint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latitude: Double = 0

  public var longitude: Double = 0

  public var address: String = String()

  public var waypointName: String = String()

  public var waypointType: Mobilegateway_Protos_WaypointType = .unknown

  public var arrivalChargePercent: Double = 0

  public var departureChargePercent: Double = 0

  public var chargeDurationSecs: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mobilegateway_Protos_Trip: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tripID: String = String()

  public var destinationName: String = String()

  public var distanceMeters: UInt64 {
    get {return _distanceMeters ?? 0}
    set {_distanceMeters = newValue}
  }
  /// Returns true if `distanceMeters` has been explicitly set.
  public var hasDistanceMeters: Bool {return self._distanceMeters != nil}
  /// Clears the value of `distanceMeters`. Subsequent reads from it will return its default value.
  public mutating func clearDistanceMeters() {self._distanceMeters = nil}

  public var elapsedTimeSec: UInt64 {
    get {return _elapsedTimeSec ?? 0}
    set {_elapsedTimeSec = newValue}
  }
  /// Returns true if `elapsedTimeSec` has been explicitly set.
  public var hasElapsedTimeSec: Bool {return self._elapsedTimeSec != nil}
  /// Clears the value of `elapsedTimeSec`. Subsequent reads from it will return its default value.
  public mutating func clearElapsedTimeSec() {self._elapsedTimeSec = nil}

  public var chargingStops: UInt32 {
    get {return _chargingStops ?? 0}
    set {_chargingStops = newValue}
  }
  /// Returns true if `chargingStops` has been explicitly set.
  public var hasChargingStops: Bool {return self._chargingStops != nil}
  /// Clears the value of `chargingStops`. Subsequent reads from it will return its default value.
  public mutating func clearChargingStops() {self._chargingStops = nil}

  public var createdTimeMs: UInt64 = 0

  public var waypoints: [Mobilegateway_Protos_Waypoint] = []

  public var sender: String {
    get {return _sender ?? String()}
    set {_sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  public var hasSender: Bool {return self._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  public mutating func clearSender() {self._sender = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _distanceMeters: UInt64? = nil
  fileprivate var _elapsedTimeSec: UInt64? = nil
  fileprivate var _chargingStops: UInt32? = nil
  fileprivate var _sender: String? = nil
}

public struct Mobilegateway_Protos_ShareTripRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var trip: Mobilegateway_Protos_Trip {
    get {return _trip ?? Mobilegateway_Protos_Trip()}
    set {_trip = newValue}
  }
  /// Returns true if `trip` has been explicitly set.
  public var hasTrip: Bool {return self._trip != nil}
  /// Clears the value of `trip`. Subsequent reads from it will return its default value.
  public mutating func clearTrip() {self._trip = nil}

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _trip: Mobilegateway_Protos_Trip? = nil
}

public struct Mobilegateway_Protos_ShareTripResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mobilegateway.protos"

extension Mobilegateway_Protos_WaypointType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WAYPOINT_TYPE_UNKNOWN"),
    1: .same(proto: "WAYPOINT_TYPE_WAYPOINT"),
    2: .same(proto: "WAYPOINT_TYPE_EV_CHARGER"),
  ]
}

extension Mobilegateway_Protos_Waypoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Waypoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .same(proto: "address"),
    4: .standard(proto: "waypoint_name"),
    5: .standard(proto: "waypoint_type"),
    6: .standard(proto: "arrival_charge_percent"),
    7: .standard(proto: "departure_charge_percent"),
    8: .standard(proto: "charge_duration_secs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.waypointName) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.waypointType) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.arrivalChargePercent) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.departureChargePercent) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.chargeDurationSecs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.waypointName.isEmpty {
      try visitor.visitSingularStringField(value: self.waypointName, fieldNumber: 4)
    }
    if self.waypointType != .unknown {
      try visitor.visitSingularEnumField(value: self.waypointType, fieldNumber: 5)
    }
    if self.arrivalChargePercent.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.arrivalChargePercent, fieldNumber: 6)
    }
    if self.departureChargePercent.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.departureChargePercent, fieldNumber: 7)
    }
    if self.chargeDurationSecs != 0 {
      try visitor.visitSingularUInt64Field(value: self.chargeDurationSecs, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Waypoint, rhs: Mobilegateway_Protos_Waypoint) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.address != rhs.address {return false}
    if lhs.waypointName != rhs.waypointName {return false}
    if lhs.waypointType != rhs.waypointType {return false}
    if lhs.arrivalChargePercent != rhs.arrivalChargePercent {return false}
    if lhs.departureChargePercent != rhs.departureChargePercent {return false}
    if lhs.chargeDurationSecs != rhs.chargeDurationSecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_Trip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Trip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trip_id"),
    2: .standard(proto: "destination_name"),
    3: .standard(proto: "distance_meters"),
    4: .standard(proto: "elapsed_time_sec"),
    5: .standard(proto: "charging_stops"),
    6: .standard(proto: "created_time_ms"),
    7: .same(proto: "waypoints"),
    8: .same(proto: "sender"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tripID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.destinationName) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._distanceMeters) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self._elapsedTimeSec) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._chargingStops) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.createdTimeMs) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.waypoints) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._sender) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.tripID.isEmpty {
      try visitor.visitSingularStringField(value: self.tripID, fieldNumber: 1)
    }
    if !self.destinationName.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationName, fieldNumber: 2)
    }
    try { if let v = self._distanceMeters {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._elapsedTimeSec {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._chargingStops {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    if self.createdTimeMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdTimeMs, fieldNumber: 6)
    }
    if !self.waypoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.waypoints, fieldNumber: 7)
    }
    try { if let v = self._sender {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_Trip, rhs: Mobilegateway_Protos_Trip) -> Bool {
    if lhs.tripID != rhs.tripID {return false}
    if lhs.destinationName != rhs.destinationName {return false}
    if lhs._distanceMeters != rhs._distanceMeters {return false}
    if lhs._elapsedTimeSec != rhs._elapsedTimeSec {return false}
    if lhs._chargingStops != rhs._chargingStops {return false}
    if lhs.createdTimeMs != rhs.createdTimeMs {return false}
    if lhs.waypoints != rhs.waypoints {return false}
    if lhs._sender != rhs._sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ShareTripRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShareTripRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "trip"),
    3: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._trip) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._trip {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ShareTripRequest, rhs: Mobilegateway_Protos_ShareTripRequest) -> Bool {
    if lhs._trip != rhs._trip {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobilegateway_Protos_ShareTripResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShareTripResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mobilegateway_Protos_ShareTripResponse, rhs: Mobilegateway_Protos_ShareTripResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
