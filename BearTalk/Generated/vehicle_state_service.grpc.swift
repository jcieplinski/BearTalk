// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: vehicle_state_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - mobilegateway.protos.VehicleStateService

/// Namespace containing generated types for the "mobilegateway.protos.VehicleStateService" service.
public enum Mobilegateway_Protos_VehicleStateService {
    /// Service descriptor for the "mobilegateway.protos.VehicleStateService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "ApplySoftwareUpdate" metadata.
        public enum ApplySoftwareUpdate {
            /// Request type for "ApplySoftwareUpdate".
            public typealias Input = Mobilegateway_Protos_ApplySoftwareUpdateRequest
            /// Response type for "ApplySoftwareUpdate".
            public typealias Output = Mobilegateway_Protos_ApplySoftwareUpdateResponse
            /// Descriptor for "ApplySoftwareUpdate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "ApplySoftwareUpdate"
            )
        }
        /// Namespace for "CancelScheduledUpdate" metadata.
        public enum CancelScheduledUpdate {
            /// Request type for "CancelScheduledUpdate".
            public typealias Input = Mobilegateway_Protos_CancelScheduledUpdateRequest
            /// Response type for "CancelScheduledUpdate".
            public typealias Output = Mobilegateway_Protos_CancelScheduledUpdateResponse
            /// Descriptor for "CancelScheduledUpdate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "CancelScheduledUpdate"
            )
        }
        /// Namespace for "ChargeControl" metadata.
        public enum ChargeControl {
            /// Request type for "ChargeControl".
            public typealias Input = Mobilegateway_Protos_ChargeControlRequest
            /// Response type for "ChargeControl".
            public typealias Output = Mobilegateway_Protos_ChargeControlResponse
            /// Descriptor for "ChargeControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "ChargeControl"
            )
        }
        /// Namespace for "ControlChargePort" metadata.
        public enum ControlChargePort {
            /// Request type for "ControlChargePort".
            public typealias Input = Mobilegateway_Protos_ControlChargePortRequest
            /// Response type for "ControlChargePort".
            public typealias Output = Mobilegateway_Protos_ControlChargePortResponse
            /// Descriptor for "ControlChargePort".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "ControlChargePort"
            )
        }
        /// Namespace for "DoorLocksControl" metadata.
        public enum DoorLocksControl {
            /// Request type for "DoorLocksControl".
            public typealias Input = Mobilegateway_Protos_DoorLocksControlRequest
            /// Response type for "DoorLocksControl".
            public typealias Output = Mobilegateway_Protos_DoorLocksControlResponse
            /// Descriptor for "DoorLocksControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "DoorLocksControl"
            )
        }
        /// Namespace for "FrontCargoControl" metadata.
        public enum FrontCargoControl {
            /// Request type for "FrontCargoControl".
            public typealias Input = Mobilegateway_Protos_FrontCargoControlRequest
            /// Response type for "FrontCargoControl".
            public typealias Output = Mobilegateway_Protos_FrontCargoControlResponse
            /// Descriptor for "FrontCargoControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "FrontCargoControl"
            )
        }
        /// Namespace for "GetDocumentInfo" metadata.
        public enum GetDocumentInfo {
            /// Request type for "GetDocumentInfo".
            public typealias Input = Mobilegateway_Protos_GetDocumentInfoRequest
            /// Response type for "GetDocumentInfo".
            public typealias Output = Mobilegateway_Protos_GetDocumentInfoResponse
            /// Descriptor for "GetDocumentInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "GetDocumentInfo"
            )
        }
        /// Namespace for "GetVehicleState" metadata.
        public enum GetVehicleState {
            /// Request type for "GetVehicleState".
            public typealias Input = Mobilegateway_Protos_GetVehicleStateRequest
            /// Response type for "GetVehicleState".
            public typealias Output = Mobilegateway_Protos_GetVehicleStateResponse
            /// Descriptor for "GetVehicleState".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "GetVehicleState"
            )
        }
        /// Namespace for "HonkHorn" metadata.
        public enum HonkHorn {
            /// Request type for "HonkHorn".
            public typealias Input = Mobilegateway_Protos_HonkHornRequest
            /// Response type for "HonkHorn".
            public typealias Output = Mobilegateway_Protos_HonkHornResponse
            /// Descriptor for "HonkHorn".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "HonkHorn"
            )
        }
        /// Namespace for "HvacDefrostControl" metadata.
        public enum HvacDefrostControl {
            /// Request type for "HvacDefrostControl".
            public typealias Input = Mobilegateway_Protos_HvacDefrostControlRequest
            /// Response type for "HvacDefrostControl".
            public typealias Output = Mobilegateway_Protos_HvacDefrostControlResponse
            /// Descriptor for "HvacDefrostControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "HvacDefrostControl"
            )
        }
        /// Namespace for "LightsControl" metadata.
        public enum LightsControl {
            /// Request type for "LightsControl".
            public typealias Input = Mobilegateway_Protos_LightsControlRequest
            /// Response type for "LightsControl".
            public typealias Output = Mobilegateway_Protos_LightsControlResponse
            /// Descriptor for "LightsControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "LightsControl"
            )
        }
        /// Namespace for "RearCargoControl" metadata.
        public enum RearCargoControl {
            /// Request type for "RearCargoControl".
            public typealias Input = Mobilegateway_Protos_RearCargoControlRequest
            /// Response type for "RearCargoControl".
            public typealias Output = Mobilegateway_Protos_RearCargoControlResponse
            /// Descriptor for "RearCargoControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "RearCargoControl"
            )
        }
        /// Namespace for "SecurityAlarmControl" metadata.
        public enum SecurityAlarmControl {
            /// Request type for "SecurityAlarmControl".
            public typealias Input = Mobilegateway_Protos_SecurityAlarmControlRequest
            /// Response type for "SecurityAlarmControl".
            public typealias Output = Mobilegateway_Protos_SecurityAlarmControlResponse
            /// Descriptor for "SecurityAlarmControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SecurityAlarmControl"
            )
        }
        /// Namespace for "SetCabinTemperature" metadata.
        public enum SetCabinTemperature {
            /// Request type for "SetCabinTemperature".
            public typealias Input = Mobilegateway_Protos_SetCabinTemperatureRequest
            /// Response type for "SetCabinTemperature".
            public typealias Output = Mobilegateway_Protos_SetCabinTemperatureResponse
            /// Descriptor for "SetCabinTemperature".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetCabinTemperature"
            )
        }
        /// Namespace for "SetChargeLimit" metadata.
        public enum SetChargeLimit {
            /// Request type for "SetChargeLimit".
            public typealias Input = Mobilegateway_Protos_SetChargeLimitRequest
            /// Response type for "SetChargeLimit".
            public typealias Output = Mobilegateway_Protos_SetChargeLimitResponse
            /// Descriptor for "SetChargeLimit".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetChargeLimit"
            )
        }
        /// Namespace for "WakeupVehicle" metadata.
        public enum WakeupVehicle {
            /// Request type for "WakeupVehicle".
            public typealias Input = Mobilegateway_Protos_WakeupVehicleRequest
            /// Response type for "WakeupVehicle".
            public typealias Output = Mobilegateway_Protos_WakeupVehicleResponse
            /// Descriptor for "WakeupVehicle".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "WakeupVehicle"
            )
        }
        /// Namespace for "SetBatteryPrecon" metadata.
        public enum SetBatteryPrecon {
            /// Request type for "SetBatteryPrecon".
            public typealias Input = Mobilegateway_Protos_SetBatteryPreconRequest
            /// Response type for "SetBatteryPrecon".
            public typealias Output = Mobilegateway_Protos_SetBatteryPreconResponse
            /// Descriptor for "SetBatteryPrecon".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetBatteryPrecon"
            )
        }
        /// Namespace for "SetDischargeSoeLimit" metadata.
        public enum SetDischargeSoeLimit {
            /// Request type for "SetDischargeSoeLimit".
            public typealias Input = Mobilegateway_Protos_SetDischargeSoeLimitRequest
            /// Response type for "SetDischargeSoeLimit".
            public typealias Output = Mobilegateway_Protos_SetDischargeSoeLimitResponse
            /// Descriptor for "SetDischargeSoeLimit".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetDischargeSoeLimit"
            )
        }
        /// Namespace for "DischargeControl" metadata.
        public enum DischargeControl {
            /// Request type for "DischargeControl".
            public typealias Input = Mobilegateway_Protos_DischargeControlRequest
            /// Response type for "DischargeControl".
            public typealias Output = Mobilegateway_Protos_DischargeControlResponse
            /// Descriptor for "DischargeControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "DischargeControl"
            )
        }
        /// Namespace for "AllWindowControl" metadata.
        public enum AllWindowControl {
            /// Request type for "AllWindowControl".
            public typealias Input = Mobilegateway_Protos_AllWindowControlRequest
            /// Response type for "AllWindowControl".
            public typealias Output = Mobilegateway_Protos_AllWindowControlResponse
            /// Descriptor for "AllWindowControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "AllWindowControl"
            )
        }
        /// Namespace for "SeatClimateControl" metadata.
        public enum SeatClimateControl {
            /// Request type for "SeatClimateControl".
            public typealias Input = Mobilegateway_Protos_SeatClimateControlRequest
            /// Response type for "SeatClimateControl".
            public typealias Output = Mobilegateway_Protos_SeatClimateControlResponse
            /// Descriptor for "SeatClimateControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SeatClimateControl"
            )
        }
        /// Namespace for "SetMaxAC" metadata.
        public enum SetMaxAC {
            /// Request type for "SetMaxAC".
            public typealias Input = Mobilegateway_Protos_SetMaxACRequest
            /// Response type for "SetMaxAC".
            public typealias Output = Mobilegateway_Protos_SetMaxACResponse
            /// Descriptor for "SetMaxAC".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetMaxAC"
            )
        }
        /// Namespace for "SteeringWheelHeater" metadata.
        public enum SteeringWheelHeater {
            /// Request type for "SteeringWheelHeater".
            public typealias Input = Mobilegateway_Protos_SteeringWheelHeaterRequest
            /// Response type for "SteeringWheelHeater".
            public typealias Output = Mobilegateway_Protos_SteeringWheelHeaterResponse
            /// Descriptor for "SteeringWheelHeater".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SteeringWheelHeater"
            )
        }
        /// Namespace for "SetCreatureComfortMode" metadata.
        public enum SetCreatureComfortMode {
            /// Request type for "SetCreatureComfortMode".
            public typealias Input = Mobilegateway_Protos_SetCreatureComfortModeRequest
            /// Response type for "SetCreatureComfortMode".
            public typealias Output = Mobilegateway_Protos_SetCreatureComfortModeResponse
            /// Descriptor for "SetCreatureComfortMode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "SetCreatureComfortMode"
            )
        }
        /// Namespace for "WelcomeControl" metadata.
        public enum WelcomeControl {
            /// Request type for "WelcomeControl".
            public typealias Input = Mobilegateway_Protos_WelcomeControlRequest
            /// Response type for "WelcomeControl".
            public typealias Output = Mobilegateway_Protos_WelcomeControlRequest
            /// Descriptor for "WelcomeControl".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService"),
                method: "WelcomeControl"
            )
        }
        /// Descriptors for all methods in the "mobilegateway.protos.VehicleStateService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            ApplySoftwareUpdate.descriptor,
            CancelScheduledUpdate.descriptor,
            ChargeControl.descriptor,
            ControlChargePort.descriptor,
            DoorLocksControl.descriptor,
            FrontCargoControl.descriptor,
            GetDocumentInfo.descriptor,
            GetVehicleState.descriptor,
            HonkHorn.descriptor,
            HvacDefrostControl.descriptor,
            LightsControl.descriptor,
            RearCargoControl.descriptor,
            SecurityAlarmControl.descriptor,
            SetCabinTemperature.descriptor,
            SetChargeLimit.descriptor,
            WakeupVehicle.descriptor,
            SetBatteryPrecon.descriptor,
            SetDischargeSoeLimit.descriptor,
            DischargeControl.descriptor,
            AllWindowControl.descriptor,
            SeatClimateControl.descriptor,
            SetMaxAC.descriptor,
            SteeringWheelHeater.descriptor,
            SetCreatureComfortMode.descriptor,
            WelcomeControl.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "mobilegateway.protos.VehicleStateService" service.
    public static let mobilegateway_protos_VehicleStateService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.VehicleStateService")
}

// MARK: mobilegateway.protos.VehicleStateService (server)

extension Mobilegateway_Protos_VehicleStateService {
    /// Streaming variant of the service protocol for the "mobilegateway.protos.VehicleStateService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ApplySoftwareUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_ApplySoftwareUpdateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_ApplySoftwareUpdateResponse` messages.
        func applySoftwareUpdate(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>

        /// Handle the "CancelScheduledUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_CancelScheduledUpdateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_CancelScheduledUpdateResponse` messages.
        func cancelScheduledUpdate(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>

        /// Handle the "ChargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_ChargeControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_ChargeControlResponse` messages.
        func chargeControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ChargeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ChargeControlResponse>

        /// Handle the "ControlChargePort" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_ControlChargePortRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_ControlChargePortResponse` messages.
        func controlChargePort(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ControlChargePortRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ControlChargePortResponse>

        /// Handle the "DoorLocksControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_DoorLocksControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_DoorLocksControlResponse` messages.
        func doorLocksControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_DoorLocksControlResponse>

        /// Handle the "FrontCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_FrontCargoControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_FrontCargoControlResponse` messages.
        func frontCargoControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_FrontCargoControlResponse>

        /// Handle the "GetDocumentInfo" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_GetDocumentInfoRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_GetDocumentInfoResponse` messages.
        func getDocumentInfo(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetDocumentInfoResponse>

        /// Handle the "GetVehicleState" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_GetVehicleStateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_GetVehicleStateResponse` messages.
        func getVehicleState(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetVehicleStateResponse>

        /// Handle the "HonkHorn" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_HonkHornRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_HonkHornResponse` messages.
        func honkHorn(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_HonkHornRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_HonkHornResponse>

        /// Handle the "HvacDefrostControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_HvacDefrostControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_HvacDefrostControlResponse` messages.
        func hvacDefrostControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_HvacDefrostControlResponse>

        /// Handle the "LightsControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_LightsControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_LightsControlResponse` messages.
        func lightsControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LightsControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LightsControlResponse>

        /// Handle the "RearCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_RearCargoControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_RearCargoControlResponse` messages.
        func rearCargoControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_RearCargoControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_RearCargoControlResponse>

        /// Handle the "SecurityAlarmControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SecurityAlarmControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SecurityAlarmControlResponse` messages.
        func securityAlarmControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>

        /// Handle the "SetCabinTemperature" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetCabinTemperatureRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetCabinTemperatureResponse` messages.
        func setCabinTemperature(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>

        /// Handle the "SetChargeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetChargeLimitRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetChargeLimitResponse` messages.
        func setChargeLimit(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetChargeLimitResponse>

        /// Handle the "WakeupVehicle" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_WakeupVehicleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_WakeupVehicleResponse` messages.
        func wakeupVehicle(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_WakeupVehicleResponse>

        /// Handle the "SetBatteryPrecon" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetBatteryPreconRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetBatteryPreconResponse` messages.
        func setBatteryPrecon(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetBatteryPreconResponse>

        /// Handle the "SetDischargeSoeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetDischargeSoeLimitRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetDischargeSoeLimitResponse` messages.
        func setDischargeSoeLimit(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>

        /// Handle the "DischargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_DischargeControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_DischargeControlResponse` messages.
        func dischargeControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_DischargeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_DischargeControlResponse>

        /// Handle the "AllWindowControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_AllWindowControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_AllWindowControlResponse` messages.
        func allWindowControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_AllWindowControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_AllWindowControlResponse>

        /// Handle the "SeatClimateControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SeatClimateControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SeatClimateControlResponse` messages.
        func seatClimateControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SeatClimateControlResponse>

        /// Handle the "SetMaxAC" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetMaxACRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetMaxACResponse` messages.
        func setMaxAC(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetMaxACRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetMaxACResponse>

        /// Handle the "SteeringWheelHeater" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SteeringWheelHeaterRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SteeringWheelHeaterResponse` messages.
        func steeringWheelHeater(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>

        /// Handle the "SetCreatureComfortMode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetCreatureComfortModeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetCreatureComfortModeResponse` messages.
        func setCreatureComfortMode(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>

        /// Handle the "WelcomeControl" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_WelcomeControlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_WelcomeControlRequest` messages.
        func welcomeControl(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_WelcomeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_WelcomeControlRequest>
    }

    /// Service protocol for the "mobilegateway.protos.VehicleStateService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Mobilegateway_Protos_VehicleStateService.StreamingServiceProtocol {
        /// Handle the "ApplySoftwareUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ApplySoftwareUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_ApplySoftwareUpdateResponse` message.
        func applySoftwareUpdate(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>

        /// Handle the "CancelScheduledUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_CancelScheduledUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_CancelScheduledUpdateResponse` message.
        func cancelScheduledUpdate(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>

        /// Handle the "ChargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ChargeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_ChargeControlResponse` message.
        func chargeControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_ChargeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ChargeControlResponse>

        /// Handle the "ControlChargePort" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ControlChargePortRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_ControlChargePortResponse` message.
        func controlChargePort(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_ControlChargePortRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ControlChargePortResponse>

        /// Handle the "DoorLocksControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DoorLocksControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_DoorLocksControlResponse` message.
        func doorLocksControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_DoorLocksControlResponse>

        /// Handle the "FrontCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_FrontCargoControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_FrontCargoControlResponse` message.
        func frontCargoControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_FrontCargoControlResponse>

        /// Handle the "GetDocumentInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetDocumentInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_GetDocumentInfoResponse` message.
        func getDocumentInfo(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetDocumentInfoResponse>

        /// Handle the "GetVehicleState" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetVehicleStateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_GetVehicleStateResponse` message.
        func getVehicleState(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetVehicleStateResponse>

        /// Handle the "HonkHorn" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HonkHornRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_HonkHornResponse` message.
        func honkHorn(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_HonkHornRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_HonkHornResponse>

        /// Handle the "HvacDefrostControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HvacDefrostControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_HvacDefrostControlResponse` message.
        func hvacDefrostControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_HvacDefrostControlResponse>

        /// Handle the "LightsControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LightsControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_LightsControlResponse` message.
        func lightsControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_LightsControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LightsControlResponse>

        /// Handle the "RearCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RearCargoControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_RearCargoControlResponse` message.
        func rearCargoControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_RearCargoControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_RearCargoControlResponse>

        /// Handle the "SecurityAlarmControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SecurityAlarmControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SecurityAlarmControlResponse` message.
        func securityAlarmControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>

        /// Handle the "SetCabinTemperature" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCabinTemperatureRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetCabinTemperatureResponse` message.
        func setCabinTemperature(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>

        /// Handle the "SetChargeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetChargeLimitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetChargeLimitResponse` message.
        func setChargeLimit(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetChargeLimitResponse>

        /// Handle the "WakeupVehicle" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WakeupVehicleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_WakeupVehicleResponse` message.
        func wakeupVehicle(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_WakeupVehicleResponse>

        /// Handle the "SetBatteryPrecon" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetBatteryPreconRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetBatteryPreconResponse` message.
        func setBatteryPrecon(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetBatteryPreconResponse>

        /// Handle the "SetDischargeSoeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetDischargeSoeLimitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetDischargeSoeLimitResponse` message.
        func setDischargeSoeLimit(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>

        /// Handle the "DischargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DischargeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_DischargeControlResponse` message.
        func dischargeControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_DischargeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_DischargeControlResponse>

        /// Handle the "AllWindowControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_AllWindowControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_AllWindowControlResponse` message.
        func allWindowControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_AllWindowControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_AllWindowControlResponse>

        /// Handle the "SeatClimateControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SeatClimateControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SeatClimateControlResponse` message.
        func seatClimateControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SeatClimateControlResponse>

        /// Handle the "SetMaxAC" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetMaxACRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetMaxACResponse` message.
        func setMaxAC(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetMaxACRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetMaxACResponse>

        /// Handle the "SteeringWheelHeater" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SteeringWheelHeaterRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SteeringWheelHeaterResponse` message.
        func steeringWheelHeater(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>

        /// Handle the "SetCreatureComfortMode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCreatureComfortModeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetCreatureComfortModeResponse` message.
        func setCreatureComfortMode(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>

        /// Handle the "WelcomeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WelcomeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_WelcomeControlRequest` message.
        func welcomeControl(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_WelcomeControlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_WelcomeControlRequest>
    }

    /// Simple service protocol for the "mobilegateway.protos.VehicleStateService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Mobilegateway_Protos_VehicleStateService.ServiceProtocol {
        /// Handle the "ApplySoftwareUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_ApplySoftwareUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_ApplySoftwareUpdateResponse` to respond with.
        func applySoftwareUpdate(
            request: Mobilegateway_Protos_ApplySoftwareUpdateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_ApplySoftwareUpdateResponse

        /// Handle the "CancelScheduledUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_CancelScheduledUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_CancelScheduledUpdateResponse` to respond with.
        func cancelScheduledUpdate(
            request: Mobilegateway_Protos_CancelScheduledUpdateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_CancelScheduledUpdateResponse

        /// Handle the "ChargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_ChargeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_ChargeControlResponse` to respond with.
        func chargeControl(
            request: Mobilegateway_Protos_ChargeControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_ChargeControlResponse

        /// Handle the "ControlChargePort" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_ControlChargePortRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_ControlChargePortResponse` to respond with.
        func controlChargePort(
            request: Mobilegateway_Protos_ControlChargePortRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_ControlChargePortResponse

        /// Handle the "DoorLocksControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_DoorLocksControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_DoorLocksControlResponse` to respond with.
        func doorLocksControl(
            request: Mobilegateway_Protos_DoorLocksControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_DoorLocksControlResponse

        /// Handle the "FrontCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_FrontCargoControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_FrontCargoControlResponse` to respond with.
        func frontCargoControl(
            request: Mobilegateway_Protos_FrontCargoControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_FrontCargoControlResponse

        /// Handle the "GetDocumentInfo" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_GetDocumentInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_GetDocumentInfoResponse` to respond with.
        func getDocumentInfo(
            request: Mobilegateway_Protos_GetDocumentInfoRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_GetDocumentInfoResponse

        /// Handle the "GetVehicleState" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_GetVehicleStateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_GetVehicleStateResponse` to respond with.
        func getVehicleState(
            request: Mobilegateway_Protos_GetVehicleStateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_GetVehicleStateResponse

        /// Handle the "HonkHorn" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_HonkHornRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_HonkHornResponse` to respond with.
        func honkHorn(
            request: Mobilegateway_Protos_HonkHornRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_HonkHornResponse

        /// Handle the "HvacDefrostControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_HvacDefrostControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_HvacDefrostControlResponse` to respond with.
        func hvacDefrostControl(
            request: Mobilegateway_Protos_HvacDefrostControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_HvacDefrostControlResponse

        /// Handle the "LightsControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_LightsControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_LightsControlResponse` to respond with.
        func lightsControl(
            request: Mobilegateway_Protos_LightsControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_LightsControlResponse

        /// Handle the "RearCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_RearCargoControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_RearCargoControlResponse` to respond with.
        func rearCargoControl(
            request: Mobilegateway_Protos_RearCargoControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_RearCargoControlResponse

        /// Handle the "SecurityAlarmControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SecurityAlarmControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SecurityAlarmControlResponse` to respond with.
        func securityAlarmControl(
            request: Mobilegateway_Protos_SecurityAlarmControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SecurityAlarmControlResponse

        /// Handle the "SetCabinTemperature" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetCabinTemperatureRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetCabinTemperatureResponse` to respond with.
        func setCabinTemperature(
            request: Mobilegateway_Protos_SetCabinTemperatureRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetCabinTemperatureResponse

        /// Handle the "SetChargeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetChargeLimitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetChargeLimitResponse` to respond with.
        func setChargeLimit(
            request: Mobilegateway_Protos_SetChargeLimitRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetChargeLimitResponse

        /// Handle the "WakeupVehicle" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_WakeupVehicleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_WakeupVehicleResponse` to respond with.
        func wakeupVehicle(
            request: Mobilegateway_Protos_WakeupVehicleRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_WakeupVehicleResponse

        /// Handle the "SetBatteryPrecon" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetBatteryPreconRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetBatteryPreconResponse` to respond with.
        func setBatteryPrecon(
            request: Mobilegateway_Protos_SetBatteryPreconRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetBatteryPreconResponse

        /// Handle the "SetDischargeSoeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetDischargeSoeLimitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetDischargeSoeLimitResponse` to respond with.
        func setDischargeSoeLimit(
            request: Mobilegateway_Protos_SetDischargeSoeLimitRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetDischargeSoeLimitResponse

        /// Handle the "DischargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_DischargeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_DischargeControlResponse` to respond with.
        func dischargeControl(
            request: Mobilegateway_Protos_DischargeControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_DischargeControlResponse

        /// Handle the "AllWindowControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_AllWindowControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_AllWindowControlResponse` to respond with.
        func allWindowControl(
            request: Mobilegateway_Protos_AllWindowControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_AllWindowControlResponse

        /// Handle the "SeatClimateControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SeatClimateControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SeatClimateControlResponse` to respond with.
        func seatClimateControl(
            request: Mobilegateway_Protos_SeatClimateControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SeatClimateControlResponse

        /// Handle the "SetMaxAC" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetMaxACRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetMaxACResponse` to respond with.
        func setMaxAC(
            request: Mobilegateway_Protos_SetMaxACRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetMaxACResponse

        /// Handle the "SteeringWheelHeater" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SteeringWheelHeaterRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SteeringWheelHeaterResponse` to respond with.
        func steeringWheelHeater(
            request: Mobilegateway_Protos_SteeringWheelHeaterRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SteeringWheelHeaterResponse

        /// Handle the "SetCreatureComfortMode" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetCreatureComfortModeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetCreatureComfortModeResponse` to respond with.
        func setCreatureComfortMode(
            request: Mobilegateway_Protos_SetCreatureComfortModeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetCreatureComfortModeResponse

        /// Handle the "WelcomeControl" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_WelcomeControlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_WelcomeControlRequest` to respond with.
        func welcomeControl(
            request: Mobilegateway_Protos_WelcomeControlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_WelcomeControlRequest
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Mobilegateway_Protos_VehicleStateService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.ApplySoftwareUpdate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ApplySoftwareUpdateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ApplySoftwareUpdateResponse>(),
            handler: { request, context in
                try await self.applySoftwareUpdate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.CancelScheduledUpdate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_CancelScheduledUpdateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_CancelScheduledUpdateResponse>(),
            handler: { request, context in
                try await self.cancelScheduledUpdate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.ChargeControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ChargeControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ChargeControlResponse>(),
            handler: { request, context in
                try await self.chargeControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.ControlChargePort.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ControlChargePortRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ControlChargePortResponse>(),
            handler: { request, context in
                try await self.controlChargePort(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.DoorLocksControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_DoorLocksControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_DoorLocksControlResponse>(),
            handler: { request, context in
                try await self.doorLocksControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.FrontCargoControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_FrontCargoControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_FrontCargoControlResponse>(),
            handler: { request, context in
                try await self.frontCargoControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.GetDocumentInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetDocumentInfoRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetDocumentInfoResponse>(),
            handler: { request, context in
                try await self.getDocumentInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.GetVehicleState.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetVehicleStateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetVehicleStateResponse>(),
            handler: { request, context in
                try await self.getVehicleState(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.HonkHorn.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_HonkHornRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_HonkHornResponse>(),
            handler: { request, context in
                try await self.honkHorn(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.HvacDefrostControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_HvacDefrostControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_HvacDefrostControlResponse>(),
            handler: { request, context in
                try await self.hvacDefrostControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.LightsControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LightsControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LightsControlResponse>(),
            handler: { request, context in
                try await self.lightsControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.RearCargoControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_RearCargoControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_RearCargoControlResponse>(),
            handler: { request, context in
                try await self.rearCargoControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SecurityAlarmControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SecurityAlarmControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SecurityAlarmControlResponse>(),
            handler: { request, context in
                try await self.securityAlarmControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetCabinTemperature.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetCabinTemperatureRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetCabinTemperatureResponse>(),
            handler: { request, context in
                try await self.setCabinTemperature(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetChargeLimit.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetChargeLimitRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetChargeLimitResponse>(),
            handler: { request, context in
                try await self.setChargeLimit(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.WakeupVehicle.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_WakeupVehicleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_WakeupVehicleResponse>(),
            handler: { request, context in
                try await self.wakeupVehicle(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetBatteryPrecon.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetBatteryPreconRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetBatteryPreconResponse>(),
            handler: { request, context in
                try await self.setBatteryPrecon(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetDischargeSoeLimit.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetDischargeSoeLimitRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetDischargeSoeLimitResponse>(),
            handler: { request, context in
                try await self.setDischargeSoeLimit(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.DischargeControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_DischargeControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_DischargeControlResponse>(),
            handler: { request, context in
                try await self.dischargeControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.AllWindowControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_AllWindowControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_AllWindowControlResponse>(),
            handler: { request, context in
                try await self.allWindowControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SeatClimateControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SeatClimateControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SeatClimateControlResponse>(),
            handler: { request, context in
                try await self.seatClimateControl(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetMaxAC.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetMaxACRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetMaxACResponse>(),
            handler: { request, context in
                try await self.setMaxAC(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SteeringWheelHeater.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SteeringWheelHeaterRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SteeringWheelHeaterResponse>(),
            handler: { request, context in
                try await self.steeringWheelHeater(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.SetCreatureComfortMode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetCreatureComfortModeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetCreatureComfortModeResponse>(),
            handler: { request, context in
                try await self.setCreatureComfortMode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_VehicleStateService.Method.WelcomeControl.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_WelcomeControlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_WelcomeControlRequest>(),
            handler: { request, context in
                try await self.welcomeControl(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Mobilegateway_Protos_VehicleStateService.ServiceProtocol {
    public func applySoftwareUpdate(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse> {
        let response = try await self.applySoftwareUpdate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cancelScheduledUpdate(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse> {
        let response = try await self.cancelScheduledUpdate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func chargeControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ChargeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ChargeControlResponse> {
        let response = try await self.chargeControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func controlChargePort(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ControlChargePortRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ControlChargePortResponse> {
        let response = try await self.controlChargePort(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func doorLocksControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_DoorLocksControlResponse> {
        let response = try await self.doorLocksControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func frontCargoControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_FrontCargoControlResponse> {
        let response = try await self.frontCargoControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getDocumentInfo(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetDocumentInfoResponse> {
        let response = try await self.getDocumentInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getVehicleState(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetVehicleStateResponse> {
        let response = try await self.getVehicleState(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func honkHorn(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_HonkHornRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_HonkHornResponse> {
        let response = try await self.honkHorn(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func hvacDefrostControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_HvacDefrostControlResponse> {
        let response = try await self.hvacDefrostControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func lightsControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LightsControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LightsControlResponse> {
        let response = try await self.lightsControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func rearCargoControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_RearCargoControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_RearCargoControlResponse> {
        let response = try await self.rearCargoControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func securityAlarmControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SecurityAlarmControlResponse> {
        let response = try await self.securityAlarmControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setCabinTemperature(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetCabinTemperatureResponse> {
        let response = try await self.setCabinTemperature(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setChargeLimit(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetChargeLimitResponse> {
        let response = try await self.setChargeLimit(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func wakeupVehicle(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_WakeupVehicleResponse> {
        let response = try await self.wakeupVehicle(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setBatteryPrecon(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetBatteryPreconResponse> {
        let response = try await self.setBatteryPrecon(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setDischargeSoeLimit(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse> {
        let response = try await self.setDischargeSoeLimit(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func dischargeControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_DischargeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_DischargeControlResponse> {
        let response = try await self.dischargeControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func allWindowControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_AllWindowControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_AllWindowControlResponse> {
        let response = try await self.allWindowControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func seatClimateControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SeatClimateControlResponse> {
        let response = try await self.seatClimateControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setMaxAC(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetMaxACRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetMaxACResponse> {
        let response = try await self.setMaxAC(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func steeringWheelHeater(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse> {
        let response = try await self.steeringWheelHeater(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setCreatureComfortMode(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse> {
        let response = try await self.setCreatureComfortMode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func welcomeControl(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_WelcomeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_WelcomeControlRequest> {
        let response = try await self.welcomeControl(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Mobilegateway_Protos_VehicleStateService.SimpleServiceProtocol {
    public func applySoftwareUpdate(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>(
            message: try await self.applySoftwareUpdate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cancelScheduledUpdate(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>(
            message: try await self.cancelScheduledUpdate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func chargeControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_ChargeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ChargeControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_ChargeControlResponse>(
            message: try await self.chargeControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func controlChargePort(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_ControlChargePortRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ControlChargePortResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_ControlChargePortResponse>(
            message: try await self.controlChargePort(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func doorLocksControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_DoorLocksControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_DoorLocksControlResponse>(
            message: try await self.doorLocksControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func frontCargoControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_FrontCargoControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_FrontCargoControlResponse>(
            message: try await self.frontCargoControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getDocumentInfo(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetDocumentInfoResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_GetDocumentInfoResponse>(
            message: try await self.getDocumentInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getVehicleState(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetVehicleStateResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_GetVehicleStateResponse>(
            message: try await self.getVehicleState(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func honkHorn(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_HonkHornRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_HonkHornResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_HonkHornResponse>(
            message: try await self.honkHorn(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func hvacDefrostControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_HvacDefrostControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_HvacDefrostControlResponse>(
            message: try await self.hvacDefrostControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func lightsControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_LightsControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LightsControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_LightsControlResponse>(
            message: try await self.lightsControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func rearCargoControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_RearCargoControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_RearCargoControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_RearCargoControlResponse>(
            message: try await self.rearCargoControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func securityAlarmControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SecurityAlarmControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>(
            message: try await self.securityAlarmControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setCabinTemperature(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetCabinTemperatureResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>(
            message: try await self.setCabinTemperature(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setChargeLimit(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetChargeLimitResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetChargeLimitResponse>(
            message: try await self.setChargeLimit(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func wakeupVehicle(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_WakeupVehicleResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_WakeupVehicleResponse>(
            message: try await self.wakeupVehicle(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setBatteryPrecon(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetBatteryPreconResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetBatteryPreconResponse>(
            message: try await self.setBatteryPrecon(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setDischargeSoeLimit(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>(
            message: try await self.setDischargeSoeLimit(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func dischargeControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_DischargeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_DischargeControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_DischargeControlResponse>(
            message: try await self.dischargeControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func allWindowControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_AllWindowControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_AllWindowControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_AllWindowControlResponse>(
            message: try await self.allWindowControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func seatClimateControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SeatClimateControlResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SeatClimateControlResponse>(
            message: try await self.seatClimateControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setMaxAC(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetMaxACRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetMaxACResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetMaxACResponse>(
            message: try await self.setMaxAC(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func steeringWheelHeater(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>(
            message: try await self.steeringWheelHeater(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setCreatureComfortMode(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>(
            message: try await self.setCreatureComfortMode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func welcomeControl(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_WelcomeControlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_WelcomeControlRequest> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_WelcomeControlRequest>(
            message: try await self.welcomeControl(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: mobilegateway.protos.VehicleStateService (client)

extension Mobilegateway_Protos_VehicleStateService {
    /// Generated client protocol for the "mobilegateway.protos.VehicleStateService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "ApplySoftwareUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ApplySoftwareUpdateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ApplySoftwareUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ApplySoftwareUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func applySoftwareUpdate<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ApplySoftwareUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CancelScheduledUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_CancelScheduledUpdateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_CancelScheduledUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_CancelScheduledUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cancelScheduledUpdate<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_CancelScheduledUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ChargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ChargeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ChargeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ChargeControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func chargeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ChargeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ChargeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ChargeControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ChargeControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ControlChargePort" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ControlChargePortRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ControlChargePortRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ControlChargePortResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func controlChargePort<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ControlChargePortRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ControlChargePortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ControlChargePortResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ControlChargePortResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DoorLocksControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DoorLocksControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_DoorLocksControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_DoorLocksControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func doorLocksControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_DoorLocksControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_DoorLocksControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DoorLocksControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FrontCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_FrontCargoControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_FrontCargoControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_FrontCargoControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func frontCargoControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_FrontCargoControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_FrontCargoControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_FrontCargoControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDocumentInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetDocumentInfoRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetDocumentInfoRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetDocumentInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDocumentInfo<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetDocumentInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetDocumentInfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetDocumentInfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetVehicleState" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetVehicleStateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetVehicleStateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetVehicleStateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getVehicleState<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetVehicleStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetVehicleStateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetVehicleStateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "HonkHorn" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HonkHornRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_HonkHornRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_HonkHornResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func honkHorn<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_HonkHornRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_HonkHornRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_HonkHornResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HonkHornResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "HvacDefrostControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HvacDefrostControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_HvacDefrostControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_HvacDefrostControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func hvacDefrostControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_HvacDefrostControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_HvacDefrostControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HvacDefrostControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LightsControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LightsControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LightsControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LightsControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func lightsControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LightsControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LightsControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LightsControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LightsControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RearCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RearCargoControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_RearCargoControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_RearCargoControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func rearCargoControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_RearCargoControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_RearCargoControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_RearCargoControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RearCargoControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SecurityAlarmControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SecurityAlarmControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SecurityAlarmControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SecurityAlarmControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func securityAlarmControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SecurityAlarmControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetCabinTemperature" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCabinTemperatureRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetCabinTemperatureRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetCabinTemperatureResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setCabinTemperature<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetCabinTemperatureResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetChargeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetChargeLimitRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetChargeLimitRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetChargeLimitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setChargeLimit<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetChargeLimitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetChargeLimitResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetChargeLimitResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WakeupVehicle" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WakeupVehicleRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_WakeupVehicleRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_WakeupVehicleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func wakeupVehicle<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_WakeupVehicleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_WakeupVehicleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WakeupVehicleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetBatteryPrecon" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetBatteryPreconRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetBatteryPreconRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetBatteryPreconResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setBatteryPrecon<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetBatteryPreconRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetBatteryPreconResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetBatteryPreconResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetDischargeSoeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetDischargeSoeLimitRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetDischargeSoeLimitRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetDischargeSoeLimitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setDischargeSoeLimit<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetDischargeSoeLimitResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DischargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DischargeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_DischargeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_DischargeControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func dischargeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_DischargeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_DischargeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_DischargeControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DischargeControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AllWindowControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_AllWindowControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_AllWindowControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_AllWindowControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func allWindowControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_AllWindowControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_AllWindowControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_AllWindowControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_AllWindowControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SeatClimateControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SeatClimateControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SeatClimateControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SeatClimateControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func seatClimateControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SeatClimateControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SeatClimateControlResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SeatClimateControlResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetMaxAC" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetMaxACRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetMaxACRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetMaxACResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setMaxAC<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetMaxACRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetMaxACRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetMaxACResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetMaxACResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SteeringWheelHeater" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SteeringWheelHeaterRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SteeringWheelHeaterRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SteeringWheelHeaterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func steeringWheelHeater<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SteeringWheelHeaterResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetCreatureComfortMode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCreatureComfortModeRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetCreatureComfortModeRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetCreatureComfortModeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setCreatureComfortMode<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetCreatureComfortModeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WelcomeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WelcomeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_WelcomeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_WelcomeControlRequest` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func welcomeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_WelcomeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_WelcomeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_WelcomeControlRequest>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WelcomeControlRequest>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "mobilegateway.protos.VehicleStateService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ApplySoftwareUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ApplySoftwareUpdateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ApplySoftwareUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ApplySoftwareUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func applySoftwareUpdate<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ApplySoftwareUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.ApplySoftwareUpdate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CancelScheduledUpdate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_CancelScheduledUpdateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_CancelScheduledUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_CancelScheduledUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cancelScheduledUpdate<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_CancelScheduledUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.CancelScheduledUpdate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ChargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ChargeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ChargeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ChargeControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func chargeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ChargeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ChargeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ChargeControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ChargeControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.ChargeControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ControlChargePort" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ControlChargePortRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ControlChargePortRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ControlChargePortResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func controlChargePort<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ControlChargePortRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ControlChargePortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ControlChargePortResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ControlChargePortResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.ControlChargePort.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DoorLocksControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DoorLocksControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_DoorLocksControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_DoorLocksControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func doorLocksControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_DoorLocksControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_DoorLocksControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DoorLocksControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.DoorLocksControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FrontCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_FrontCargoControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_FrontCargoControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_FrontCargoControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func frontCargoControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_FrontCargoControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_FrontCargoControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_FrontCargoControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.FrontCargoControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDocumentInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetDocumentInfoRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetDocumentInfoRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetDocumentInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDocumentInfo<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetDocumentInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetDocumentInfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetDocumentInfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.GetDocumentInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetVehicleState" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetVehicleStateRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetVehicleStateRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetVehicleStateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getVehicleState<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetVehicleStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetVehicleStateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetVehicleStateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.GetVehicleState.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "HonkHorn" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HonkHornRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_HonkHornRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_HonkHornResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func honkHorn<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_HonkHornRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_HonkHornRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_HonkHornResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HonkHornResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.HonkHorn.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "HvacDefrostControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_HvacDefrostControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_HvacDefrostControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_HvacDefrostControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func hvacDefrostControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_HvacDefrostControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_HvacDefrostControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HvacDefrostControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.HvacDefrostControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LightsControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LightsControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LightsControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LightsControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func lightsControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LightsControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LightsControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LightsControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LightsControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.LightsControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RearCargoControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RearCargoControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_RearCargoControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_RearCargoControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func rearCargoControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_RearCargoControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_RearCargoControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_RearCargoControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RearCargoControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.RearCargoControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SecurityAlarmControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SecurityAlarmControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SecurityAlarmControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SecurityAlarmControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func securityAlarmControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SecurityAlarmControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SecurityAlarmControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SecurityAlarmControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetCabinTemperature" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCabinTemperatureRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetCabinTemperatureRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetCabinTemperatureResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setCabinTemperature<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetCabinTemperatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetCabinTemperatureResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetCabinTemperature.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetChargeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetChargeLimitRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetChargeLimitRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetChargeLimitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setChargeLimit<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetChargeLimitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetChargeLimitResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetChargeLimitResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetChargeLimit.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WakeupVehicle" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WakeupVehicleRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_WakeupVehicleRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_WakeupVehicleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func wakeupVehicle<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_WakeupVehicleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_WakeupVehicleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WakeupVehicleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.WakeupVehicle.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetBatteryPrecon" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetBatteryPreconRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetBatteryPreconRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetBatteryPreconResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setBatteryPrecon<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetBatteryPreconRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetBatteryPreconResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetBatteryPreconResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetBatteryPrecon.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetDischargeSoeLimit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetDischargeSoeLimitRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetDischargeSoeLimitRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetDischargeSoeLimitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setDischargeSoeLimit<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetDischargeSoeLimitResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetDischargeSoeLimit.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DischargeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_DischargeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_DischargeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_DischargeControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func dischargeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_DischargeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_DischargeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_DischargeControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DischargeControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.DischargeControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AllWindowControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_AllWindowControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_AllWindowControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_AllWindowControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func allWindowControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_AllWindowControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_AllWindowControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_AllWindowControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_AllWindowControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.AllWindowControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SeatClimateControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SeatClimateControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SeatClimateControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SeatClimateControlResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func seatClimateControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SeatClimateControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SeatClimateControlResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SeatClimateControlResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SeatClimateControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetMaxAC" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetMaxACRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetMaxACRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetMaxACResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setMaxAC<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetMaxACRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetMaxACRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetMaxACResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetMaxACResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetMaxAC.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SteeringWheelHeater" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SteeringWheelHeaterRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SteeringWheelHeaterRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SteeringWheelHeaterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func steeringWheelHeater<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SteeringWheelHeaterResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SteeringWheelHeater.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetCreatureComfortMode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetCreatureComfortModeRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetCreatureComfortModeRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetCreatureComfortModeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setCreatureComfortMode<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetCreatureComfortModeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.SetCreatureComfortMode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WelcomeControl" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_WelcomeControlRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_WelcomeControlRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_WelcomeControlRequest` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func welcomeControl<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_WelcomeControlRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_WelcomeControlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_WelcomeControlRequest>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WelcomeControlRequest>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_VehicleStateService.Method.WelcomeControl.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Mobilegateway_Protos_VehicleStateService.ClientProtocol {
    /// Call the "ApplySoftwareUpdate" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_ApplySoftwareUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func applySoftwareUpdate<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.applySoftwareUpdate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ApplySoftwareUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ApplySoftwareUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelScheduledUpdate" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_CancelScheduledUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelScheduledUpdate<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cancelScheduledUpdate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_CancelScheduledUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_CancelScheduledUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ChargeControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_ChargeControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func chargeControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_ChargeControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ChargeControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.chargeControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ChargeControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ChargeControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ControlChargePort" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_ControlChargePortRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func controlChargePort<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_ControlChargePortRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ControlChargePortResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.controlChargePort(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ControlChargePortRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ControlChargePortResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DoorLocksControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_DoorLocksControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func doorLocksControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_DoorLocksControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DoorLocksControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.doorLocksControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_DoorLocksControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_DoorLocksControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FrontCargoControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_FrontCargoControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func frontCargoControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_FrontCargoControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_FrontCargoControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.frontCargoControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_FrontCargoControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_FrontCargoControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDocumentInfo" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_GetDocumentInfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDocumentInfo<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetDocumentInfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetDocumentInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDocumentInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetDocumentInfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetDocumentInfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetVehicleState" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_GetVehicleStateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getVehicleState<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetVehicleStateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetVehicleStateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getVehicleState(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetVehicleStateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetVehicleStateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "HonkHorn" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_HonkHornRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func honkHorn<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_HonkHornRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HonkHornResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.honkHorn(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_HonkHornRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_HonkHornResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "HvacDefrostControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_HvacDefrostControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func hvacDefrostControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_HvacDefrostControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HvacDefrostControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.hvacDefrostControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_HvacDefrostControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_HvacDefrostControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LightsControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_LightsControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func lightsControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_LightsControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LightsControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.lightsControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LightsControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LightsControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RearCargoControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_RearCargoControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rearCargoControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_RearCargoControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RearCargoControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.rearCargoControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_RearCargoControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_RearCargoControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SecurityAlarmControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SecurityAlarmControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func securityAlarmControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.securityAlarmControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SecurityAlarmControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SecurityAlarmControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCabinTemperature" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetCabinTemperatureRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setCabinTemperature<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setCabinTemperature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetCabinTemperatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetCabinTemperatureResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetChargeLimit" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetChargeLimitRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setChargeLimit<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetChargeLimitRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetChargeLimitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setChargeLimit(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetChargeLimitRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetChargeLimitResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WakeupVehicle" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_WakeupVehicleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wakeupVehicle<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_WakeupVehicleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WakeupVehicleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.wakeupVehicle(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_WakeupVehicleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_WakeupVehicleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetBatteryPrecon" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetBatteryPreconRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setBatteryPrecon<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetBatteryPreconRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetBatteryPreconResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setBatteryPrecon(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetBatteryPreconRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetBatteryPreconResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetDischargeSoeLimit" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetDischargeSoeLimitRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setDischargeSoeLimit<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setDischargeSoeLimit(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetDischargeSoeLimitRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetDischargeSoeLimitResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DischargeControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_DischargeControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func dischargeControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_DischargeControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DischargeControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.dischargeControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_DischargeControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_DischargeControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AllWindowControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_AllWindowControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func allWindowControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_AllWindowControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_AllWindowControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.allWindowControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_AllWindowControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_AllWindowControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SeatClimateControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SeatClimateControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func seatClimateControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SeatClimateControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SeatClimateControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.seatClimateControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SeatClimateControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SeatClimateControlResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetMaxAC" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetMaxACRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setMaxAC<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetMaxACRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetMaxACResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setMaxAC(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetMaxACRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetMaxACResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SteeringWheelHeater" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SteeringWheelHeaterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func steeringWheelHeater<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.steeringWheelHeater(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SteeringWheelHeaterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SteeringWheelHeaterResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCreatureComfortMode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetCreatureComfortModeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setCreatureComfortMode<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setCreatureComfortMode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetCreatureComfortModeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetCreatureComfortModeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WelcomeControl" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_WelcomeControlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func welcomeControl<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_WelcomeControlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WelcomeControlRequest>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.welcomeControl(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_WelcomeControlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_WelcomeControlRequest>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Mobilegateway_Protos_VehicleStateService.ClientProtocol {
    /// Call the "ApplySoftwareUpdate" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func applySoftwareUpdate<Result>(
        _ message: Mobilegateway_Protos_ApplySoftwareUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ApplySoftwareUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_ApplySoftwareUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.applySoftwareUpdate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelScheduledUpdate" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelScheduledUpdate<Result>(
        _ message: Mobilegateway_Protos_CancelScheduledUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_CancelScheduledUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_CancelScheduledUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelScheduledUpdate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ChargeControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func chargeControl<Result>(
        _ message: Mobilegateway_Protos_ChargeControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ChargeControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_ChargeControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.chargeControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ControlChargePort" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func controlChargePort<Result>(
        _ message: Mobilegateway_Protos_ControlChargePortRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ControlChargePortResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_ControlChargePortRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.controlChargePort(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DoorLocksControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func doorLocksControl<Result>(
        _ message: Mobilegateway_Protos_DoorLocksControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DoorLocksControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_DoorLocksControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.doorLocksControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FrontCargoControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func frontCargoControl<Result>(
        _ message: Mobilegateway_Protos_FrontCargoControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_FrontCargoControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_FrontCargoControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.frontCargoControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDocumentInfo" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDocumentInfo<Result>(
        _ message: Mobilegateway_Protos_GetDocumentInfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetDocumentInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_GetDocumentInfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDocumentInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetVehicleState" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getVehicleState<Result>(
        _ message: Mobilegateway_Protos_GetVehicleStateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetVehicleStateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_GetVehicleStateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getVehicleState(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "HonkHorn" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func honkHorn<Result>(
        _ message: Mobilegateway_Protos_HonkHornRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HonkHornResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_HonkHornRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.honkHorn(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "HvacDefrostControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func hvacDefrostControl<Result>(
        _ message: Mobilegateway_Protos_HvacDefrostControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_HvacDefrostControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_HvacDefrostControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.hvacDefrostControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LightsControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func lightsControl<Result>(
        _ message: Mobilegateway_Protos_LightsControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LightsControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_LightsControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.lightsControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RearCargoControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rearCargoControl<Result>(
        _ message: Mobilegateway_Protos_RearCargoControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RearCargoControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_RearCargoControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.rearCargoControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SecurityAlarmControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func securityAlarmControl<Result>(
        _ message: Mobilegateway_Protos_SecurityAlarmControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SecurityAlarmControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SecurityAlarmControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.securityAlarmControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCabinTemperature" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setCabinTemperature<Result>(
        _ message: Mobilegateway_Protos_SetCabinTemperatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCabinTemperatureResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetCabinTemperatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setCabinTemperature(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetChargeLimit" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setChargeLimit<Result>(
        _ message: Mobilegateway_Protos_SetChargeLimitRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetChargeLimitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetChargeLimitRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setChargeLimit(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WakeupVehicle" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wakeupVehicle<Result>(
        _ message: Mobilegateway_Protos_WakeupVehicleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WakeupVehicleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_WakeupVehicleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.wakeupVehicle(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetBatteryPrecon" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setBatteryPrecon<Result>(
        _ message: Mobilegateway_Protos_SetBatteryPreconRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetBatteryPreconResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetBatteryPreconRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setBatteryPrecon(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetDischargeSoeLimit" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setDischargeSoeLimit<Result>(
        _ message: Mobilegateway_Protos_SetDischargeSoeLimitRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetDischargeSoeLimitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetDischargeSoeLimitRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setDischargeSoeLimit(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DischargeControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func dischargeControl<Result>(
        _ message: Mobilegateway_Protos_DischargeControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_DischargeControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_DischargeControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.dischargeControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AllWindowControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func allWindowControl<Result>(
        _ message: Mobilegateway_Protos_AllWindowControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_AllWindowControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_AllWindowControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.allWindowControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SeatClimateControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func seatClimateControl<Result>(
        _ message: Mobilegateway_Protos_SeatClimateControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SeatClimateControlResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SeatClimateControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.seatClimateControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetMaxAC" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setMaxAC<Result>(
        _ message: Mobilegateway_Protos_SetMaxACRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetMaxACResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetMaxACRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setMaxAC(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SteeringWheelHeater" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func steeringWheelHeater<Result>(
        _ message: Mobilegateway_Protos_SteeringWheelHeaterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SteeringWheelHeaterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SteeringWheelHeaterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.steeringWheelHeater(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCreatureComfortMode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setCreatureComfortMode<Result>(
        _ message: Mobilegateway_Protos_SetCreatureComfortModeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetCreatureComfortModeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetCreatureComfortModeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setCreatureComfortMode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WelcomeControl" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func welcomeControl<Result>(
        _ message: Mobilegateway_Protos_WelcomeControlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_WelcomeControlRequest>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_WelcomeControlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.welcomeControl(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}