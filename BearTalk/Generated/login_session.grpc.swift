// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: login_session.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - mobilegateway.protos.LoginSession

/// Namespace containing generated types for the "mobilegateway.protos.LoginSession" service.
public enum Mobilegateway_Protos_LoginSession {
    /// Service descriptor for the "mobilegateway.protos.LoginSession" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "ConfirmResetPin" metadata.
        public enum ConfirmResetPin {
            /// Request type for "ConfirmResetPin".
            public typealias Input = Mobilegateway_Protos_ConfirmResetPinRequest
            /// Response type for "ConfirmResetPin".
            public typealias Output = Mobilegateway_Protos_ConfirmResetPinResponse
            /// Descriptor for "ConfirmResetPin".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "ConfirmResetPin"
            )
        }
        /// Namespace for "GetNewJWTToken" metadata.
        public enum GetNewJWTToken {
            /// Request type for "GetNewJWTToken".
            public typealias Input = Mobilegateway_Protos_GetNewJWTTokenRequest
            /// Response type for "GetNewJWTToken".
            public typealias Output = Mobilegateway_Protos_GetNewJWTTokenResponse
            /// Descriptor for "GetNewJWTToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "GetNewJWTToken"
            )
        }
        /// Namespace for "GetSubscription" metadata.
        public enum GetSubscription {
            /// Request type for "GetSubscription".
            public typealias Input = Mobilegateway_Protos_GetSubscriptionRequest
            /// Response type for "GetSubscription".
            public typealias Output = Mobilegateway_Protos_GetSubscriptionResponse
            /// Descriptor for "GetSubscription".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "GetSubscription"
            )
        }
        /// Namespace for "GetUserVehicles" metadata.
        public enum GetUserVehicles {
            /// Request type for "GetUserVehicles".
            public typealias Input = Mobilegateway_Protos_GetUserVehiclesRequest
            /// Response type for "GetUserVehicles".
            public typealias Output = Mobilegateway_Protos_GetUserVehiclesResponse
            /// Descriptor for "GetUserVehicles".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "GetUserVehicles"
            )
        }
        /// Namespace for "Login" metadata.
        public enum Login {
            /// Request type for "Login".
            public typealias Input = Mobilegateway_Protos_LoginRequest
            /// Response type for "Login".
            public typealias Output = Mobilegateway_Protos_LoginResponse
            /// Descriptor for "Login".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "Login"
            )
        }
        /// Namespace for "Logout" metadata.
        public enum Logout {
            /// Request type for "Logout".
            public typealias Input = Mobilegateway_Protos_LogoutRequest
            /// Response type for "Logout".
            public typealias Output = Mobilegateway_Protos_LogoutResponse
            /// Descriptor for "Logout".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "Logout"
            )
        }
        /// Namespace for "RefreshNotificationToken" metadata.
        public enum RefreshNotificationToken {
            /// Request type for "RefreshNotificationToken".
            public typealias Input = Mobilegateway_Protos_RefreshNotificationTokenRequest
            /// Response type for "RefreshNotificationToken".
            public typealias Output = Mobilegateway_Protos_RefreshNotificationTokenResponse
            /// Descriptor for "RefreshNotificationToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "RefreshNotificationToken"
            )
        }
        /// Namespace for "SetNickName" metadata.
        public enum SetNickName {
            /// Request type for "SetNickName".
            public typealias Input = Mobilegateway_Protos_SetNickNameRequest
            /// Response type for "SetNickName".
            public typealias Output = Mobilegateway_Protos_SetNickNameResponse
            /// Descriptor for "SetNickName".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "SetNickName"
            )
        }
        /// Namespace for "SetSubscription" metadata.
        public enum SetSubscription {
            /// Request type for "SetSubscription".
            public typealias Input = Mobilegateway_Protos_SetSubscriptionRequest
            /// Response type for "SetSubscription".
            public typealias Output = Mobilegateway_Protos_SetSubscriptionResponse
            /// Descriptor for "SetSubscription".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession"),
                method: "SetSubscription"
            )
        }
        /// Descriptors for all methods in the "mobilegateway.protos.LoginSession" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            ConfirmResetPin.descriptor,
            GetNewJWTToken.descriptor,
            GetSubscription.descriptor,
            GetUserVehicles.descriptor,
            Login.descriptor,
            Logout.descriptor,
            RefreshNotificationToken.descriptor,
            SetNickName.descriptor,
            SetSubscription.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "mobilegateway.protos.LoginSession" service.
    public static let mobilegateway_protos_LoginSession = GRPCCore.ServiceDescriptor(fullyQualifiedService: "mobilegateway.protos.LoginSession")
}

// MARK: mobilegateway.protos.LoginSession (server)

extension Mobilegateway_Protos_LoginSession {
    /// Streaming variant of the service protocol for the "mobilegateway.protos.LoginSession" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ConfirmResetPin" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_ConfirmResetPinRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_ConfirmResetPinResponse` messages.
        func confirmResetPin(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ConfirmResetPinResponse>

        /// Handle the "GetNewJWTToken" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_GetNewJWTTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_GetNewJWTTokenResponse` messages.
        func getNewJWTToken(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>

        /// Handle the "GetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_GetSubscriptionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_GetSubscriptionResponse` messages.
        func getSubscription(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetSubscriptionResponse>

        /// Handle the "GetUserVehicles" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_GetUserVehiclesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_GetUserVehiclesResponse` messages.
        func getUserVehicles(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetUserVehiclesResponse>

        /// Handle the "Login" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_LoginRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_LoginResponse` messages.
        func login(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LoginRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LoginResponse>

        /// Handle the "Logout" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_LogoutRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_LogoutResponse` messages.
        func logout(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LogoutRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LogoutResponse>

        /// Handle the "RefreshNotificationToken" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_RefreshNotificationTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_RefreshNotificationTokenResponse` messages.
        func refreshNotificationToken(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>

        /// Handle the "SetNickName" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetNickNameRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetNickNameResponse` messages.
        func setNickName(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetNickNameRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetNickNameResponse>

        /// Handle the "SetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Mobilegateway_Protos_SetSubscriptionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Mobilegateway_Protos_SetSubscriptionResponse` messages.
        func setSubscription(
            request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetSubscriptionResponse>
    }

    /// Service protocol for the "mobilegateway.protos.LoginSession" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Mobilegateway_Protos_LoginSession.StreamingServiceProtocol {
        /// Handle the "ConfirmResetPin" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ConfirmResetPinRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_ConfirmResetPinResponse` message.
        func confirmResetPin(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ConfirmResetPinResponse>

        /// Handle the "GetNewJWTToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetNewJWTTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_GetNewJWTTokenResponse` message.
        func getNewJWTToken(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>

        /// Handle the "GetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetSubscriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_GetSubscriptionResponse` message.
        func getSubscription(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetSubscriptionResponse>

        /// Handle the "GetUserVehicles" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetUserVehiclesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_GetUserVehiclesResponse` message.
        func getUserVehicles(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetUserVehiclesResponse>

        /// Handle the "Login" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LoginRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_LoginResponse` message.
        func login(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_LoginRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LoginResponse>

        /// Handle the "Logout" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LogoutRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_LogoutResponse` message.
        func logout(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_LogoutRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LogoutResponse>

        /// Handle the "RefreshNotificationToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RefreshNotificationTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_RefreshNotificationTokenResponse` message.
        func refreshNotificationToken(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>

        /// Handle the "SetNickName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetNickNameRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetNickNameResponse` message.
        func setNickName(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetNickNameRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetNickNameResponse>

        /// Handle the "SetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetSubscriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Mobilegateway_Protos_SetSubscriptionResponse` message.
        func setSubscription(
            request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetSubscriptionResponse>
    }

    /// Simple service protocol for the "mobilegateway.protos.LoginSession" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Mobilegateway_Protos_LoginSession.ServiceProtocol {
        /// Handle the "ConfirmResetPin" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_ConfirmResetPinRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_ConfirmResetPinResponse` to respond with.
        func confirmResetPin(
            request: Mobilegateway_Protos_ConfirmResetPinRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_ConfirmResetPinResponse

        /// Handle the "GetNewJWTToken" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_GetNewJWTTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_GetNewJWTTokenResponse` to respond with.
        func getNewJWTToken(
            request: Mobilegateway_Protos_GetNewJWTTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_GetNewJWTTokenResponse

        /// Handle the "GetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_GetSubscriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_GetSubscriptionResponse` to respond with.
        func getSubscription(
            request: Mobilegateway_Protos_GetSubscriptionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_GetSubscriptionResponse

        /// Handle the "GetUserVehicles" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_GetUserVehiclesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_GetUserVehiclesResponse` to respond with.
        func getUserVehicles(
            request: Mobilegateway_Protos_GetUserVehiclesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_GetUserVehiclesResponse

        /// Handle the "Login" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_LoginRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_LoginResponse` to respond with.
        func login(
            request: Mobilegateway_Protos_LoginRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_LoginResponse

        /// Handle the "Logout" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_LogoutRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_LogoutResponse` to respond with.
        func logout(
            request: Mobilegateway_Protos_LogoutRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_LogoutResponse

        /// Handle the "RefreshNotificationToken" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_RefreshNotificationTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_RefreshNotificationTokenResponse` to respond with.
        func refreshNotificationToken(
            request: Mobilegateway_Protos_RefreshNotificationTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_RefreshNotificationTokenResponse

        /// Handle the "SetNickName" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetNickNameRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetNickNameResponse` to respond with.
        func setNickName(
            request: Mobilegateway_Protos_SetNickNameRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetNickNameResponse

        /// Handle the "SetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A `Mobilegateway_Protos_SetSubscriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Mobilegateway_Protos_SetSubscriptionResponse` to respond with.
        func setSubscription(
            request: Mobilegateway_Protos_SetSubscriptionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Mobilegateway_Protos_SetSubscriptionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Mobilegateway_Protos_LoginSession.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.ConfirmResetPin.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ConfirmResetPinRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ConfirmResetPinResponse>(),
            handler: { request, context in
                try await self.confirmResetPin(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.GetNewJWTToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetNewJWTTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetNewJWTTokenResponse>(),
            handler: { request, context in
                try await self.getNewJWTToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.GetSubscription.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetSubscriptionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetSubscriptionResponse>(),
            handler: { request, context in
                try await self.getSubscription(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.GetUserVehicles.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetUserVehiclesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetUserVehiclesResponse>(),
            handler: { request, context in
                try await self.getUserVehicles(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.Login.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LoginRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LoginResponse>(),
            handler: { request, context in
                try await self.login(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.Logout.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LogoutRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LogoutResponse>(),
            handler: { request, context in
                try await self.logout(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.RefreshNotificationToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_RefreshNotificationTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_RefreshNotificationTokenResponse>(),
            handler: { request, context in
                try await self.refreshNotificationToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.SetNickName.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetNickNameRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetNickNameResponse>(),
            handler: { request, context in
                try await self.setNickName(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Mobilegateway_Protos_LoginSession.Method.SetSubscription.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetSubscriptionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetSubscriptionResponse>(),
            handler: { request, context in
                try await self.setSubscription(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Mobilegateway_Protos_LoginSession.ServiceProtocol {
    public func confirmResetPin(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_ConfirmResetPinResponse> {
        let response = try await self.confirmResetPin(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getNewJWTToken(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetNewJWTTokenResponse> {
        let response = try await self.getNewJWTToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getSubscription(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetSubscriptionResponse> {
        let response = try await self.getSubscription(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getUserVehicles(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_GetUserVehiclesResponse> {
        let response = try await self.getUserVehicles(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func login(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LoginRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LoginResponse> {
        let response = try await self.login(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func logout(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_LogoutRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_LogoutResponse> {
        let response = try await self.logout(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func refreshNotificationToken(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse> {
        let response = try await self.refreshNotificationToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setNickName(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetNickNameRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetNickNameResponse> {
        let response = try await self.setNickName(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setSubscription(
        request: GRPCCore.StreamingServerRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Mobilegateway_Protos_SetSubscriptionResponse> {
        let response = try await self.setSubscription(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Mobilegateway_Protos_LoginSession.SimpleServiceProtocol {
    public func confirmResetPin(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_ConfirmResetPinResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_ConfirmResetPinResponse>(
            message: try await self.confirmResetPin(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getNewJWTToken(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetNewJWTTokenResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>(
            message: try await self.getNewJWTToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getSubscription(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetSubscriptionResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_GetSubscriptionResponse>(
            message: try await self.getSubscription(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getUserVehicles(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_GetUserVehiclesResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_GetUserVehiclesResponse>(
            message: try await self.getUserVehicles(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func login(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_LoginRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LoginResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_LoginResponse>(
            message: try await self.login(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func logout(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_LogoutRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_LogoutResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_LogoutResponse>(
            message: try await self.logout(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func refreshNotificationToken(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>(
            message: try await self.refreshNotificationToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setNickName(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetNickNameRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetNickNameResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetNickNameResponse>(
            message: try await self.setNickName(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setSubscription(
        request: GRPCCore.ServerRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Mobilegateway_Protos_SetSubscriptionResponse> {
        return GRPCCore.ServerResponse<Mobilegateway_Protos_SetSubscriptionResponse>(
            message: try await self.setSubscription(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: mobilegateway.protos.LoginSession (client)

extension Mobilegateway_Protos_LoginSession {
    /// Generated client protocol for the "mobilegateway.protos.LoginSession" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "ConfirmResetPin" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ConfirmResetPinRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ConfirmResetPinRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ConfirmResetPinResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func confirmResetPin<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ConfirmResetPinRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ConfirmResetPinResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ConfirmResetPinResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNewJWTToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetNewJWTTokenRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetNewJWTTokenRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetNewJWTTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNewJWTToken<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetNewJWTTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetSubscriptionRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetSubscriptionRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetSubscriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSubscription<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetSubscriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetSubscriptionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetSubscriptionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserVehicles" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetUserVehiclesRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetUserVehiclesRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetUserVehiclesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserVehicles<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetUserVehiclesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetUserVehiclesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetUserVehiclesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Login" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LoginRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LoginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func login<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LoginResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LoginResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Logout" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LogoutRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LogoutRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LogoutResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func logout<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LogoutRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LogoutRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LogoutResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LogoutResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RefreshNotificationToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RefreshNotificationTokenRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_RefreshNotificationTokenRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_RefreshNotificationTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func refreshNotificationToken<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_RefreshNotificationTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetNickName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetNickNameRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetNickNameRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetNickNameResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setNickName<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetNickNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetNickNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetNickNameResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetNickNameResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetSubscriptionRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetSubscriptionRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetSubscriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setSubscription<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetSubscriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetSubscriptionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetSubscriptionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "mobilegateway.protos.LoginSession" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ConfirmResetPin" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_ConfirmResetPinRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_ConfirmResetPinRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_ConfirmResetPinResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func confirmResetPin<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_ConfirmResetPinRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_ConfirmResetPinResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ConfirmResetPinResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.ConfirmResetPin.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNewJWTToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetNewJWTTokenRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetNewJWTTokenRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetNewJWTTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getNewJWTToken<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetNewJWTTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetNewJWTTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.GetNewJWTToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetSubscriptionRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetSubscriptionRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetSubscriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getSubscription<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetSubscriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetSubscriptionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetSubscriptionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.GetSubscription.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserVehicles" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_GetUserVehiclesRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_GetUserVehiclesRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_GetUserVehiclesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getUserVehicles<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_GetUserVehiclesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_GetUserVehiclesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetUserVehiclesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.GetUserVehicles.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Login" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LoginRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LoginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func login<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LoginResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LoginResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.Login.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Logout" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_LogoutRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_LogoutRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_LogoutResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func logout<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_LogoutRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_LogoutRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_LogoutResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LogoutResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.Logout.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RefreshNotificationToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_RefreshNotificationTokenRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_RefreshNotificationTokenRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_RefreshNotificationTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func refreshNotificationToken<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_RefreshNotificationTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.RefreshNotificationToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetNickName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetNickNameRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetNickNameRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetNickNameResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setNickName<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetNickNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetNickNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetNickNameResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetNickNameResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.SetNickName.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetSubscription" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Mobilegateway_Protos_SetSubscriptionRequest` message.
        ///   - serializer: A serializer for `Mobilegateway_Protos_SetSubscriptionRequest` messages.
        ///   - deserializer: A deserializer for `Mobilegateway_Protos_SetSubscriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setSubscription<Result>(
            request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Mobilegateway_Protos_SetSubscriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Mobilegateway_Protos_SetSubscriptionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetSubscriptionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Mobilegateway_Protos_LoginSession.Method.SetSubscription.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Mobilegateway_Protos_LoginSession.ClientProtocol {
    /// Call the "ConfirmResetPin" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_ConfirmResetPinRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func confirmResetPin<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_ConfirmResetPinRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ConfirmResetPinResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.confirmResetPin(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_ConfirmResetPinRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_ConfirmResetPinResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNewJWTToken" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_GetNewJWTTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNewJWTToken<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNewJWTToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetNewJWTTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetNewJWTTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSubscription" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_GetSubscriptionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getSubscription<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetSubscriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetSubscriptionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserVehicles" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_GetUserVehiclesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUserVehicles<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_GetUserVehiclesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetUserVehiclesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserVehicles(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_GetUserVehiclesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_GetUserVehiclesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_LoginRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func login<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_LoginRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LoginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.login(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LoginRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LoginResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Logout" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_LogoutRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func logout<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_LogoutRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LogoutResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.logout(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_LogoutRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_LogoutResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshNotificationToken" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_RefreshNotificationTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func refreshNotificationToken<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.refreshNotificationToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_RefreshNotificationTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_RefreshNotificationTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetNickName" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetNickNameRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setNickName<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetNickNameRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetNickNameResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setNickName(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetNickNameRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetNickNameResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetSubscription" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Mobilegateway_Protos_SetSubscriptionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setSubscription<Result>(
        request: GRPCCore.ClientRequest<Mobilegateway_Protos_SetSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetSubscriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Mobilegateway_Protos_SetSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Mobilegateway_Protos_SetSubscriptionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Mobilegateway_Protos_LoginSession.ClientProtocol {
    /// Call the "ConfirmResetPin" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func confirmResetPin<Result>(
        _ message: Mobilegateway_Protos_ConfirmResetPinRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_ConfirmResetPinResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_ConfirmResetPinRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.confirmResetPin(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNewJWTToken" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNewJWTToken<Result>(
        _ message: Mobilegateway_Protos_GetNewJWTTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetNewJWTTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_GetNewJWTTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNewJWTToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSubscription" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getSubscription<Result>(
        _ message: Mobilegateway_Protos_GetSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetSubscriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_GetSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSubscription(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserVehicles" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUserVehicles<Result>(
        _ message: Mobilegateway_Protos_GetUserVehiclesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_GetUserVehiclesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_GetUserVehiclesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserVehicles(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func login<Result>(
        _ message: Mobilegateway_Protos_LoginRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LoginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_LoginRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.login(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Logout" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func logout<Result>(
        _ message: Mobilegateway_Protos_LogoutRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_LogoutResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_LogoutRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.logout(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshNotificationToken" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func refreshNotificationToken<Result>(
        _ message: Mobilegateway_Protos_RefreshNotificationTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_RefreshNotificationTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_RefreshNotificationTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.refreshNotificationToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetNickName" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setNickName<Result>(
        _ message: Mobilegateway_Protos_SetNickNameRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetNickNameResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetNickNameRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setNickName(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetSubscription" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setSubscription<Result>(
        _ message: Mobilegateway_Protos_SetSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Mobilegateway_Protos_SetSubscriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Mobilegateway_Protos_SetSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setSubscription(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}